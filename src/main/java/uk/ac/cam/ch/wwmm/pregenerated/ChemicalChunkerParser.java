// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g 2011-03-15 16:00:22

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DT-THE'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PRP$'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=35;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=30;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__215=215;
    public static final int NounPhrase=6;
    public static final int T__216=216;
    public static final int T__213=213;
    public static final int T__214=214;
    public static final int T__219=219;
    public static final int TempPhrase=18;
    public static final int T__217=217;
    public static final int T__218=218;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=28;
    public static final int T__223=223;
    public static final int T__222=222;
    public static final int T__221=221;
    public static final int T__220=220;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int MOLECULE=27;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__210=210;
    public static final int T__212=212;
    public static final int T__211=211;
    public static final int Unmatched=5;
    public static final int RolePrepPhrase=16;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=34;
    public static final int MIXTURE=13;
    public static final int ACHAR=32;
    public static final int VOLUME=22;
    public static final int Sentence=4;
    public static final int MASS=20;
    public static final int DissolvePhrase=8;
    public static final int QUANTITY=29;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=24;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int AtmospherePhrase=17;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=25;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__199=199;
    public static final int T__58=58;
    public static final int T__198=198;
    public static final int T__51=51;
    public static final int T__197=197;
    public static final int T__52=52;
    public static final int T__196=196;
    public static final int T__53=53;
    public static final int T__195=195;
    public static final int T__54=54;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=33;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int NEWLINE=31;
    public static final int T__177=177;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;
    public static final int OSCARCM=26;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:59:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:59:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:59:11: ( sentences )+
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:59:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 135:
                case 136:
                case 137:
                case 138:
                case 153:
                case 158:
                case 159:
                case 163:
                case 164:
                case 165:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 177:
                case 179:
                case 182:
                case 194:
                case 195:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 207:
                case 208:
                case 209:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document282);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 59:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:59:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( comma | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:10: ( ( sentenceStructure | unmatchedPhrase )+ ( comma | stop )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:13: ( sentenceStructure | unmatchedPhrase )+ ( comma | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences303);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences305);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:53: ( comma | stop )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case 129:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA3_4 = input.LA(3);

                        if ( (synpred4_ChemicalChunker()) ) {
                            alt3=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 133:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:54: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences313);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:60: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences315);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter9 = null;

        ChemicalChunkerParser.advAdj_return advAdj10 = null;

        ChemicalChunkerParser.colon_return colon11 = null;

        ChemicalChunkerParser.conjunction_return conjunction12 = null;

        ChemicalChunkerParser.rbconj_return rbconj13 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure326);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure328);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure330);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure332);
            	    prepphraseAfter9=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure337);
            	    advAdj10=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj10.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure339);
            	    colon11=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon11.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:90: ( conjunction | rbconj )*
            loop6:
            do {
                int alt6=3;
                switch ( input.LA(1) ) {
                case 129:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_5 = input.LA(3);

                        if ( (synpred12_ChemicalChunker()) ) {
                            alt6=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 203:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_6 = input.LA(3);

                        if ( (synpred13_ChemicalChunker()) ) {
                            alt6=2;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 152:
                    {
                    alt6=1;
                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:91: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure345);
            	    conjunction12=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction12.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:103: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure347);
            	    rbconj13=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:66:1: unmatchedPhrase : unmatchedTokens -> ( ^( Unmatched unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens14 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:67:2: ( unmatchedTokens -> ( ^( Unmatched unmatchedTokens ) )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:67:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase360);
            unmatchedTokens14=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens14.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 67:21: -> ( ^( Unmatched unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:67:24: ^( Unmatched unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:69:1: unmatchedTokens : ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw15 = null;

        ChemicalChunkerParser.noun_return noun16 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode17 = null;

        ChemicalChunkerParser.verb_return verb18 = null;

        ChemicalChunkerParser.inAll_return inAll19 = null;

        ChemicalChunkerParser.dt_return dt20 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE21 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd22 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm23 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn24 = null;

        ChemicalChunkerParser.oscaront_return oscaront25 = null;

        ChemicalChunkerParser.brackets_return brackets26 = null;

        ChemicalChunkerParser.sym_return sym27 = null;

        ChemicalChunkerParser.colon_return colon28 = null;

        ChemicalChunkerParser.md_return md29 = null;

        ChemicalChunkerParser.neg_return neg30 = null;

        ChemicalChunkerParser.number_return number31 = null;

        ChemicalChunkerParser.comma_return comma32 = null;

        ChemicalChunkerParser.advAdj_return advAdj33 = null;

        ChemicalChunkerParser.rbconj_return rbconj34 = null;

        ChemicalChunkerParser.reference_return reference35 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:2: ( ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:4: ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:4: ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )
            int alt7=21;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens380);
                    fw15=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw15.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens382);
                    noun16=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun16.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:13: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedTokens384);
                    tmunicode17=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode17.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens386);
                    verb18=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb18.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:28: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens388);
                    inAll19=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll19.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:34: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens390);
                    dt20=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt20.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:37: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedTokens392);
                    dtTHE21=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE21.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:43: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens394);
                    oscarcd22=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd22.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:51: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens396);
                    oscarcm23=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm23.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:59: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens398);
                    oscarrn24=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn24.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:67: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens400);
                    oscaront25=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront25.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:76: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens402);
                    brackets26=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets26.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:85: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens404);
                    sym27=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym27.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:89: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens406);
                    colon28=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon28.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:95: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens408);
                    md29=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md29.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:98: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens410);
                    neg30=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg30.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:102: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens412);
                    number31=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number31.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:109: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens414);
                    comma32=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma32.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:115: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedTokens416);
                    advAdj33=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj33.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:122: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedTokens418);
                    rbconj34=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj34.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:129: reference
                    {
                    pushFollow(FOLLOW_reference_in_unmatchedTokens420);
                    reference35=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference35.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:73:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure36 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:74:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:74:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase432);
            nounphraseStructure36=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure36.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 74:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:74:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure137 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure238 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:78:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:78:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure455);
                    nounphraseStructure137=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure137.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:78:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure457);
                    nounphraseStructure238=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:79:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus39 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:80:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:80:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1466);
            multiApparatus39=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus39.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 80:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:80:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:81:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE40 = null;

        ChemicalChunkerParser.dt_return dt41 = null;

        ChemicalChunkerParser.advAdj_return advAdj42 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase43 = null;

        ChemicalChunkerParser.noun_return noun44 = null;

        ChemicalChunkerParser.number_return number45 = null;

        ChemicalChunkerParser.ratio_return ratio46 = null;

        ChemicalChunkerParser.conjunction_return conjunction47 = null;

        ChemicalChunkerParser.advAdj_return advAdj48 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase49 = null;

        ChemicalChunkerParser.noun_return noun50 = null;

        ChemicalChunkerParser.number_return number51 = null;

        ChemicalChunkerParser.ratio_return ratio52 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf53 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN54 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase55 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 159:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2486);
                    dtTHE40=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE40.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred36_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2489);
                    dt41=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt41.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2492);
            	    advAdj42=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj42.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:24: ( dissolvePhrase | noun | number | ratio )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2497);
            	    dissolvePhrase43=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase43.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:40: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2499);
            	    noun44=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun44.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:45: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure2501);
            	    number45=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number45.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:52: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2503);
            	    ratio46=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio46.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:64: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2511);
            	    	    conjunction47=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction47.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:77: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2514);
            	    	    advAdj48=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj48.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:85: ( dissolvePhrase | noun | number | ratio )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:86: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2518);
            	            dissolvePhrase49=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase49.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:101: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2520);
            	            noun50=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun50.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:106: number
            	            {
            	            pushFollow(FOLLOW_number_in_nounphraseStructure2522);
            	            number51=number();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, number51.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:113: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2524);
            	            ratio52=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio52.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:125: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 48:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred50_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 54:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred50_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:126: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 54:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 48:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:127: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2534);
            	            prepphraseOf53=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf53.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:141: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2537);
            	            prepphraseIN54=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN54.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:155: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2540);
            	            dissolvePhrase55=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase55.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:1: dissolvePhrase : ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure1_return dissolveStructure156 = null;

        ChemicalChunkerParser.dissolveStructure2_return dissolveStructure257 = null;

        ChemicalChunkerParser.dissolveStructure3_return dissolveStructure358 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure1=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure1");
        RewriteRuleSubtreeStream stream_dissolveStructure3=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure3");
        RewriteRuleSubtreeStream stream_dissolveStructure2=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure2");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:2: ( ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            int alt20=3;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:5: dissolveStructure1
                    {
                    pushFollow(FOLLOW_dissolveStructure1_in_dissolvePhrase555);
                    dissolveStructure156=dissolveStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure1.add(dissolveStructure156.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:24: dissolveStructure2
                    {
                    pushFollow(FOLLOW_dissolveStructure2_in_dissolvePhrase557);
                    dissolveStructure257=dissolveStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure2.add(dissolveStructure257.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:43: dissolveStructure3
                    {
                    pushFollow(FOLLOW_dissolveStructure3_in_dissolvePhrase559);
                    dissolveStructure358=dissolveStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure3.add(dissolveStructure358.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure1, dissolveStructure3, dissolveStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 84:63: -> ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:67: ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:84: ( dissolveStructure1 )?
                if ( stream_dissolveStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure1.nextTree());

                }
                stream_dissolveStructure1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:104: ( dissolveStructure2 )?
                if ( stream_dissolveStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure2.nextTree());

                }
                stream_dissolveStructure2.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:124: ( dissolveStructure3 )?
                if ( stream_dissolveStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure3.nextTree());

                }
                stream_dissolveStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:86:1: dissolveStructure1 : lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb ;
    public final ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure1_return retval = new ChemicalChunkerParser.dissolveStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb59 = null;

        ChemicalChunkerParser.adj_return adj60 = null;

        ChemicalChunkerParser.nnp_return nnp61 = null;

        ChemicalChunkerParser.molecule_return molecule62 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule63 = null;

        ChemicalChunkerParser.inin_return inin64 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE65 = null;

        ChemicalChunkerParser.adj_return adj66 = null;

        ChemicalChunkerParser.nnp_return nnp67 = null;

        ChemicalChunkerParser.molecule_return molecule68 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule69 = null;

        ChemicalChunkerParser.conjunction_return conjunction70 = null;

        ChemicalChunkerParser.molecule_return molecule71 = null;

        ChemicalChunkerParser.rrb_return rrb72 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:2: ( lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:4: lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_dissolveStructure1585);
            lrb59=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb59.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:8: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure1587);
                    adj60=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj60.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:13: ( nnp )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 182:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure1590);
                    nnp61=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp61.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:18: ( molecule | unnamedmolecule )
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:19: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure1594);
                    molecule62=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule62.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:28: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1596);
                    unnamedmolecule63=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule63.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:45: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                switch ( input.LA(1) ) {
                case 48:
                    {
                    alt29=1;
                    }
                    break;

                }

                switch (alt29) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:46: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure1600);
            	    inin64=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin64.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:51: ( dtTHE )?
            	    int alt24=2;
            	    switch ( input.LA(1) ) {
            	        case 159:
            	            {
            	            alt24=1;
            	            }
            	            break;
            	    }

            	    switch (alt24) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure1602);
            	            dtTHE65=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE65.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:58: ( adj )?
            	    int alt25=2;
            	    alt25 = dfa25.predict(input);
            	    switch (alt25) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure1605);
            	            adj66=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj66.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:63: ( nnp )?
            	    int alt26=2;
            	    switch ( input.LA(1) ) {
            	        case 182:
            	            {
            	            alt26=1;
            	            }
            	            break;
            	    }

            	    switch (alt26) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure1608);
            	            nnp67=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp67.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:68: ( molecule | unnamedmolecule )
            	    int alt27=2;
            	    alt27 = dfa27.predict(input);
            	    switch (alt27) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:69: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure1612);
            	            molecule68=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule68.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:78: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1614);
            	            unnamedmolecule69=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule69.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:95: ( conjunction molecule )*
            	    loop28:
            	    do {
            	        int alt28=2;
            	        switch ( input.LA(1) ) {
            	        case 129:
            	        case 152:
            	            {
            	            alt28=1;
            	            }
            	            break;

            	        }

            	        switch (alt28) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:96: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure1618);
            	    	    conjunction70=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction70.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure1620);
            	    	    molecule71=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule71.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop28;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_dissolveStructure1626);
            rrb72=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb72.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure1"

    public static class dissolveStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:88:1: dissolveStructure2 : ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure2_return retval = new ChemicalChunkerParser.dissolveStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.molecule_return molecule75 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule76 = null;

        ChemicalChunkerParser.inin_return inin77 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE78 = null;

        ChemicalChunkerParser.adj_return adj79 = null;

        ChemicalChunkerParser.nnp_return nnp80 = null;

        ChemicalChunkerParser.molecule_return molecule81 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule82 = null;

        ChemicalChunkerParser.conjunction_return conjunction83 = null;

        ChemicalChunkerParser.molecule_return molecule84 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:2: ( ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:4: ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:4: ( adj )?
            int alt30=2;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure2635);
                    adj73=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj73.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:9: ( nnp )?
            int alt31=2;
            switch ( input.LA(1) ) {
                case 182:
                    {
                    alt31=1;
                    }
                    break;
            }

            switch (alt31) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure2638);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:14: ( molecule | unnamedmolecule )
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:15: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure2642);
                    molecule75=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule75.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:24: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2644);
                    unnamedmolecule76=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule76.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:41: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt38=0;
            loop38:
            do {
                int alt38=2;
                switch ( input.LA(1) ) {
                case 48:
                    {
                    int LA38_2 = input.LA(2);

                    if ( (synpred70_ChemicalChunker()) ) {
                        alt38=1;
                    }


                    }
                    break;

                }

                switch (alt38) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure2648);
            	    inin77=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin77.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:47: ( dtTHE )?
            	    int alt33=2;
            	    switch ( input.LA(1) ) {
            	        case 159:
            	            {
            	            alt33=1;
            	            }
            	            break;
            	    }

            	    switch (alt33) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure2650);
            	            dtTHE78=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE78.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:54: ( adj )?
            	    int alt34=2;
            	    alt34 = dfa34.predict(input);
            	    switch (alt34) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure2653);
            	            adj79=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj79.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:59: ( nnp )?
            	    int alt35=2;
            	    switch ( input.LA(1) ) {
            	        case 182:
            	            {
            	            alt35=1;
            	            }
            	            break;
            	    }

            	    switch (alt35) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure2656);
            	            nnp80=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp80.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:64: ( molecule | unnamedmolecule )
            	    int alt36=2;
            	    alt36 = dfa36.predict(input);
            	    switch (alt36) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:65: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure2660);
            	            molecule81=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule81.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:74: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2662);
            	            unnamedmolecule82=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule82.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:91: ( conjunction molecule )*
            	    loop37:
            	    do {
            	        int alt37=2;
            	        switch ( input.LA(1) ) {
            	        case 152:
            	            {
            	            int LA37_1 = input.LA(2);

            	            if ( (synpred69_ChemicalChunker()) ) {
            	                alt37=1;
            	            }


            	            }
            	            break;
            	        case 129:
            	            {
            	            int LA37_2 = input.LA(2);

            	            if ( (synpred69_ChemicalChunker()) ) {
            	                alt37=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt37) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:92: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure2666);
            	    	    conjunction83=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction83.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure2668);
            	    	    molecule84=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule84.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop37;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt38 >= 1 ) break loop38;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(38, input);
                        throw eee;
                }
                cnt38++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure2"

    public static class dissolveStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:1: dissolveStructure3 : ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure3_return dissolveStructure3() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure3_return retval = new ChemicalChunkerParser.dissolveStructure3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj85 = null;

        ChemicalChunkerParser.nnp_return nnp86 = null;

        ChemicalChunkerParser.molecule_return molecule87 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule88 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity89 = null;

        ChemicalChunkerParser.inin_return inin90 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE91 = null;

        ChemicalChunkerParser.adj_return adj92 = null;

        ChemicalChunkerParser.nnp_return nnp93 = null;

        ChemicalChunkerParser.molecule_return molecule94 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule95 = null;

        ChemicalChunkerParser.conjunction_return conjunction96 = null;

        ChemicalChunkerParser.molecule_return molecule97 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:2: ( ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:4: ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:4: ( adj )?
            int alt39=2;
            switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 43:
                case 171:
                case 172:
                case 173:
                case 174:
                    {
                    alt39=1;
                    }
                    break;
            }

            switch (alt39) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure3682);
                    adj85=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj85.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnp_in_dissolveStructure3685);
            nnp86=nnp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp86.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:13: ( molecule | unnamedmolecule | nnchementity )
            int alt40=3;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:14: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure3688);
                    molecule87=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule87.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:23: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3690);
                    unnamedmolecule88=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule88.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:39: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure3692);
                    nnchementity89=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity89.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:53: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt46=0;
            loop46:
            do {
                int alt46=2;
                switch ( input.LA(1) ) {
                case 48:
                    {
                    int LA46_2 = input.LA(2);

                    if ( (synpred79_ChemicalChunker()) ) {
                        alt46=1;
                    }


                    }
                    break;

                }

                switch (alt46) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure3696);
            	    inin90=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin90.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:59: ( dtTHE )?
            	    int alt41=2;
            	    switch ( input.LA(1) ) {
            	        case 159:
            	            {
            	            alt41=1;
            	            }
            	            break;
            	    }

            	    switch (alt41) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure3698);
            	            dtTHE91=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE91.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:66: ( adj )?
            	    int alt42=2;
            	    alt42 = dfa42.predict(input);
            	    switch (alt42) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure3701);
            	            adj92=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj92.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:71: ( nnp )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 182:
            	            {
            	            alt43=1;
            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure3704);
            	            nnp93=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp93.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:76: ( molecule | unnamedmolecule )
            	    int alt44=2;
            	    alt44 = dfa44.predict(input);
            	    switch (alt44) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:77: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure3708);
            	            molecule94=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule94.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:86: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3710);
            	            unnamedmolecule95=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule95.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:103: ( conjunction molecule )*
            	    loop45:
            	    do {
            	        int alt45=2;
            	        switch ( input.LA(1) ) {
            	        case 152:
            	            {
            	            int LA45_1 = input.LA(2);

            	            if ( (synpred78_ChemicalChunker()) ) {
            	                alt45=1;
            	            }


            	            }
            	            break;
            	        case 129:
            	            {
            	            int LA45_2 = input.LA(2);

            	            if ( (synpred78_ChemicalChunker()) ) {
            	                alt45=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt45) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:104: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure3714);
            	    	    conjunction96=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction96.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure3716);
            	    	    molecule97=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule97.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop45;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        throw eee;
                }
                cnt46++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure3"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:95:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc98 = null;

        ChemicalChunkerParser.comma_return comma99 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:96:2: ( cc | comma )
            int alt47=2;
            switch ( input.LA(1) ) {
            case 152:
                {
                alt47=1;
                }
                break;
            case 129:
                {
                alt47=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }

            switch (alt47) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:96:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction733);
                    cc98=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc98.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:96:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction735);
                    comma99=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma99.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure100 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:102:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:102:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase747);
            verbphraseStructure100=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure100.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 102:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:102:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt101 = null;

        ChemicalChunkerParser.to_return to102 = null;

        ChemicalChunkerParser.inAll_return inAll103 = null;

        ChemicalChunkerParser.inafter_return inafter104 = null;

        ChemicalChunkerParser.md_return md105 = null;

        ChemicalChunkerParser.rbconj_return rbconj106 = null;

        ChemicalChunkerParser.adv_return adv107 = null;

        ChemicalChunkerParser.adj_return adj108 = null;

        ChemicalChunkerParser.verb_return verb109 = null;

        ChemicalChunkerParser.md_return md110 = null;

        ChemicalChunkerParser.adv_return adv111 = null;

        ChemicalChunkerParser.adj_return adj112 = null;

        ChemicalChunkerParser.neg_return neg113 = null;

        ChemicalChunkerParser.inoff_return inoff114 = null;

        ChemicalChunkerParser.cc_return cc115 = null;

        ChemicalChunkerParser.comma_return comma116 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase117 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:24: ( dt )?
            int alt48=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt48=1;
                    }
                    break;
            }

            switch (alt48) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure765);
                    dt101=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt101.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:28: ( to )?
            int alt49=2;
            switch ( input.LA(1) ) {
                case 209:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA49_3 = input.LA(3);

                            if ( (synpred82_ChemicalChunker()) ) {
                                alt49=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt49) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure768);
                    to102=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to102.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:32: ( inAll )?
            int alt50=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 170:
                case 209:
                    {
                    alt50=1;
                    }
                    break;
                case 47:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA50_4 = input.LA(3);

                            if ( (synpred83_ChemicalChunker()) ) {
                                alt50=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt50) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure771);
                    inAll103=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll103.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:39: ( inafter )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 47:
                    {
                    alt51=1;
                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure774);
                    inafter104=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter104.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                alt61 = dfa61.predict(input);
                switch (alt61) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:49: ( md )*
            	    loop52:
            	    do {
            	        int alt52=2;
            	        switch ( input.LA(1) ) {
            	        case 175:
            	            {
            	            alt52=1;
            	            }
            	            break;

            	        }

            	        switch (alt52) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure778);
            	    	    md105=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md105.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop52;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:53: ( rbconj )?
            	    int alt53=2;
            	    switch ( input.LA(1) ) {
            	        case 203:
            	            {
            	            alt53=1;
            	            }
            	            break;
            	    }

            	    switch (alt53) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure781);
            	            rbconj106=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj106.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:61: ( adv )*
            	    loop54:
            	    do {
            	        int alt54=2;
            	        switch ( input.LA(1) ) {
            	        case 201:
            	        case 202:
            	        case 204:
            	        case 205:
            	        case 207:
            	            {
            	            alt54=1;
            	            }
            	            break;

            	        }

            	        switch (alt54) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure784);
            	    	    adv107=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv107.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop54;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:66: ( adj )?
            	    int alt55=2;
            	    switch ( input.LA(1) ) {
            	        case 37:
            	        case 38:
            	        case 43:
            	        case 171:
            	        case 172:
            	        case 173:
            	        case 174:
            	            {
            	            alt55=1;
            	            }
            	            break;
            	    }

            	    switch (alt55) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure787);
            	            adj108=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj108.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:71: ( verb )+
            	    int cnt56=0;
            	    loop56:
            	    do {
            	        int alt56=2;
            	        alt56 = dfa56.predict(input);
            	        switch (alt56) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure790);
            	    	    verb109=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb109.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt56 >= 1 ) break loop56;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(56, input);
            	                throw eee;
            	        }
            	        cnt56++;
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:77: ( md )*
            	    loop57:
            	    do {
            	        int alt57=2;
            	        switch ( input.LA(1) ) {
            	        case 175:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA57_3 = input.LA(3);

            	                if ( (synpred90_ChemicalChunker()) ) {
            	                    alt57=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt57) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure793);
            	    	    md110=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md110.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop57;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:81: ( adv )*
            	    loop58:
            	    do {
            	        int alt58=2;
            	        alt58 = dfa58.predict(input);
            	        switch (alt58) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure796);
            	    	    adv111=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv111.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop58;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:86: ( adj )?
            	    int alt59=2;
            	    alt59 = dfa59.predict(input);
            	    switch (alt59) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure799);
            	            adj112=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj112.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:91: ( neg )?
            	    int alt60=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA60_3 = input.LA(3);

            	                    if ( (synpred93_ChemicalChunker()) ) {
            	                        alt60=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt60) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure802);
            	            neg113=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg113.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:99: ( inoff )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 60:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA62_3 = input.LA(3);

                            if ( (synpred95_ChemicalChunker()) ) {
                                alt62=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure808);
                    inoff114=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff114.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:106: ( ( cc )? ( comma )? prepphrase )*
            loop65:
            do {
                int alt65=2;
                alt65 = dfa65.predict(input);
                switch (alt65) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:107: ( cc )?
            	    int alt63=2;
            	    switch ( input.LA(1) ) {
            	        case 152:
            	            {
            	            alt63=1;
            	            }
            	            break;
            	    }

            	    switch (alt63) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure812);
            	            cc115=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc115.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:111: ( comma )?
            	    int alt64=2;
            	    switch ( input.LA(1) ) {
            	        case 129:
            	            {
            	            alt64=1;
            	            }
            	            break;
            	    }

            	    switch (alt64) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure815);
            	            comma116=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma116.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure818);
            	    prepphrase117=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase117.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb118 = null;

        ChemicalChunkerParser.vbp_return vbp119 = null;

        ChemicalChunkerParser.vbg_return vbg120 = null;

        ChemicalChunkerParser.vbd_return vbd121 = null;

        ChemicalChunkerParser.vbz_return vbz122 = null;

        ChemicalChunkerParser.vbn_return vbn123 = null;

        ChemicalChunkerParser.vbuse_return vbuse124 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge125 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse126 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb127 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject128 = null;

        ChemicalChunkerParser.vbadd_return vbadd129 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute130 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge131 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain132 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop133 = null;

        ChemicalChunkerParser.vbfill_return vbfill134 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend135 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat136 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus137 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate138 = null;

        ChemicalChunkerParser.vbcool_return vbcool139 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass140 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve141 = null;

        ChemicalChunkerParser.vbdry_return vbdry142 = null;

        ChemicalChunkerParser.vbextract_return vbextract143 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter144 = null;

        ChemicalChunkerParser.vbheat_return vbheat145 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease146 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition147 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate148 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify149 = null;

        ChemicalChunkerParser.vbquench_return vbquench150 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover151 = null;

        ChemicalChunkerParser.vbremove_return vbremove152 = null;

        ChemicalChunkerParser.vbstir_return vbstir153 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize154 = null;

        ChemicalChunkerParser.vbwait_return vbwait155 = null;

        ChemicalChunkerParser.vbwash_return vbwash156 = null;

        ChemicalChunkerParser.vbyield_return vbyield157 = null;

        ChemicalChunkerParser.vbchange_return vbchange158 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt66=41;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb830);
                    vb118=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb118.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb832);
                    vbp119=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp119.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb834);
                    vbg120=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg120.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb836);
                    vbd121=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd121.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb838);
                    vbz122=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz122.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb840);
                    vbn123=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn123.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb842);
                    vbuse124=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse124.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb844);
                    vbsubmerge125=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge125.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb846);
                    vbimmerse126=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse126.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb848);
                    degassMultiVerb127=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb127.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb850);
                    vbsubject128=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject128.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb852);
                    vbadd129=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd129.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb854);
                    vbdilute130=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute130.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb856);
                    vbcharge131=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge131.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb858);
                    vbcontain132=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain132.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb860);
                    vbdrop133=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop133.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb862);
                    vbfill134=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill134.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb864);
                    vbsuspend135=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend135.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb866);
                    vbtreat136=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat136.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb868);
                    vbapparatus137=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus137.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb870);
                    vbconcentrate138=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate138.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb872);
                    vbcool139=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool139.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb874);
                    vbdegass140=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass140.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb876);
                    vbdissolve141=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve141.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb878);
                    vbdry142=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry142.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb880);
                    vbextract143=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract143.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb882);
                    vbfilter144=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter144.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb885);
                    vbheat145=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat145.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb887);
                    vbincrease146=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease146.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb889);
                    vbpartition147=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition147.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb891);
                    vbprecipitate148=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate148.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb893);
                    vbpurify149=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify149.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb895);
                    vbquench150=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench150.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb897);
                    vbrecover151=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover151.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb899);
                    vbremove152=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove152.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb901);
                    vbstir153=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir153.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb903);
                    vbsynthesize154=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize154.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb905);
                    vbwait155=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait155.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb907);
                    vbwash156=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash156.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb909);
                    vbyield157=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield157.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb911);
                    vbchange158=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange158.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:106:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass159 = null;

        ChemicalChunkerParser.cc_return cc160 = null;

        ChemicalChunkerParser.vbfill_return vbfill161 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:107:2: ( vbdegass cc vbfill )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:107:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb920);
            vbdegass159=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass159.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb922);
            cc160=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc160.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb924);
            vbfill161=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill161.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:108:1: number : ( cd | oscarcd | oscarcpr );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd162 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd163 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr164 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:108:8: ( cd | oscarcd | oscarcpr )
            int alt67=3;
            switch ( input.LA(1) ) {
            case 153:
                {
                alt67=1;
                }
                break;
            case 36:
                {
                alt67=2;
                }
                break;
            case 39:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:108:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number931);
                    cd162=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd162.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:108:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number933);
                    oscarcd163=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd163.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:108:21: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_number935);
                    oscarcpr164=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr164.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt165 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss166 = null;

        ChemicalChunkerParser.wpo_return wpo167 = null;

        ChemicalChunkerParser.wpo_return wpo168 = null;

        ChemicalChunkerParser.wps_return wps169 = null;

        ChemicalChunkerParser.wql_return wql170 = null;

        ChemicalChunkerParser.wrb_return wrb171 = null;

        ChemicalChunkerParser.ex_return ex172 = null;

        ChemicalChunkerParser.pdt_return pdt173 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt68=9;
            alt68 = dfa68.predict(input);
            switch (alt68) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause943);
                    wdt165=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt165.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause945);
                    wp_poss166=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss166.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause947);
                    wpo167=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo167.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause949);
                    wpo168=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo168.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause951);
                    wps169=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps169.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause953);
                    wql170=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql170.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause955);
                    wrb171=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb171.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause957);
                    ex172=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex172.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause959);
                    pdt173=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt173.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure174 = null;

        ChemicalChunkerParser.dash_return dash175 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure176 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:7: ( nounStructure ( dash nounStructure )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun967);
            nounStructure174=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure174.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:23: ( dash nounStructure )*
            loop69:
            do {
                int alt69=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    int LA69_2 = input.LA(2);

                    if ( (synpred149_ChemicalChunker()) ) {
                        alt69=1;
                    }


                    }
                    break;

                }

                switch (alt69) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun970);
            	    dash175=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash175.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun972);
            	    nounStructure176=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure176.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp177 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss178 = null;

        ChemicalChunkerParser.citation_return citation179 = null;

        ChemicalChunkerParser.cycles_return cycles180 = null;

        ChemicalChunkerParser.molecule_return molecule181 = null;

        ChemicalChunkerParser.apparatus_return apparatus182 = null;

        ChemicalChunkerParser.mixture_return mixture183 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule184 = null;

        ChemicalChunkerParser.nnyield_return nnyield185 = null;

        ChemicalChunkerParser.nnstate_return nnstate186 = null;

        ChemicalChunkerParser.nn_return nn187 = null;

        ChemicalChunkerParser.nns_return nns188 = null;

        ChemicalChunkerParser.nnp_return nnp189 = null;

        ChemicalChunkerParser.nnadd_return nnadd190 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase191 = null;

        ChemicalChunkerParser.nnexample_return nnexample192 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr193 = null;

        ChemicalChunkerParser.range_return range194 = null;

        ChemicalChunkerParser.amount_return amount195 = null;

        ChemicalChunkerParser.nntime_return nntime196 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere197 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode198 = null;

        ChemicalChunkerParser.nneq_return nneq199 = null;

        ChemicalChunkerParser.quantity_return quantity200 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity201 = null;

        ChemicalChunkerParser.measurements_return measurements202 = null;

        ChemicalChunkerParser.nntemp_return nntemp203 = null;

        ChemicalChunkerParser.nnflash_return nnflash204 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral205 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod206 = null;

        ChemicalChunkerParser.nnamount_return nnamount207 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure208 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn209 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography210 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum211 = null;

        ChemicalChunkerParser.nncycle_return nncycle212 = null;

        ChemicalChunkerParser.nntimes_return nntimes213 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate214 = null;

        ChemicalChunkerParser.nnvol_return nnvol215 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify216 = null;

        ChemicalChunkerParser.wdt_return wdt217 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss218 = null;

        ChemicalChunkerParser.wpo_return wpo219 = null;

        ChemicalChunkerParser.wps_return wps220 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize221 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture222 = null;

        ChemicalChunkerParser.reference_return reference223 = null;

        ChemicalChunkerParser.oscaront_return oscaront224 = null;

        ChemicalChunkerParser.nndry_return nndry225 = null;

        ChemicalChunkerParser.number_return number226 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound227 = null;

        ChemicalChunkerParser.nnextract_return nnextract228 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter229 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate230 = null;

        ChemicalChunkerParser.nnremove_return nnremove231 = null;

        ChemicalChunkerParser.fw_return fw232 = null;

        ChemicalChunkerParser.fwin_return fwin233 = null;

        ChemicalChunkerParser.sym_return sym234 = null;

        ChemicalChunkerParser.clause_return clause235 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt70=59;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure983);
                    prp177=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp177.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure985);
                    prp_poss178=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss178.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure987);
                    citation179=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation179.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure989);
                    cycles180=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles180.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure991);
                    molecule181=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule181.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure993);
                    apparatus182=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus182.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure995);
                    mixture183=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture183.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure997);
                    unnamedmolecule184=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule184.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure999);
                    nnyield185=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield185.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure1001);
                    nnstate186=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate186.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:106: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure1003);
                    nn187=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn187.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:109: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure1005);
                    nns188=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns188.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:113: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure1007);
                    nnp189=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp189.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:117: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure1009);
                    nnadd190=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd190.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:123: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure1011);
                    preparationphrase191=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase191.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:141: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure1013);
                    nnexample192=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample192.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:151: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_nounStructure1015);
                    oscarcpr193=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr193.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:160: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure1017);
                    range194=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range194.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:166: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_nounStructure1019);
                    amount195=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount195.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:173: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure1021);
                    nntime196=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime196.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:180: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure1023);
                    nnatmosphere197=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere197.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:193: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure1025);
                    tmunicode198=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode198.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:203: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1027);
                    nneq199=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq199.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:208: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure1029);
                    quantity200=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity200.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:217: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure1031);
                    nnchementity201=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity201.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:230: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_nounStructure1033);
                    measurements202=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements202.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:243: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1035);
                    nntemp203=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp203.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:250: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1037);
                    nnflash204=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash204.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:258: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1039);
                    nngeneral205=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral205.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:268: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_nounStructure1041);
                    nnmethod206=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod206.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:277: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1043);
                    nnamount207=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount207.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:286: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1045);
                    nnpressure208=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure208.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:297: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1047);
                    nncolumn209=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn209.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:306: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1049);
                    nnchromatography210=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography210.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:323: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1051);
                    nnvacuum211=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum211.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:332: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1053);
                    nncycle212=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle212.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:340: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1055);
                    nntimes213=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes213.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:348: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1057);
                    nnconcentrate214=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate214.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:362: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1059);
                    nnvol215=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol215.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:368: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1061);
                    nnpurify216=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify216.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:377: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_nounStructure1063);
                    wdt217=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt217.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:381: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_nounStructure1065);
                    wp_poss218=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss218.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:389: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_nounStructure1067);
                    wpo219=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo219.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:393: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_nounStructure1069);
                    wps220=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps220.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:397: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1071);
                    nnsynthesize221=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize221.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:410: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1073);
                    nnmixture222=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture222.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:420: reference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_reference_in_nounStructure1075);
                    reference223=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference223.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:430: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_nounStructure1077);
                    oscaront224=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront224.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:439: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1079);
                    nndry225=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry225.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:445: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_nounStructure1081);
                    number226=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number226.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:452: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure1083);
                    oscarCompound227=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound227.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:466: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1085);
                    nnextract228=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract228.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:476: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1087);
                    nnfilter229=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter229.getTree());

                    }
                    break;
                case 54 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:485: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1089);
                    nnprecipitate230=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate230.getTree());

                    }
                    break;
                case 55 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:499: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1091);
                    nnremove231=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove231.getTree());

                    }
                    break;
                case 56 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:508: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1093);
                    fw232=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw232.getTree());

                    }
                    break;
                case 57 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:511: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_nounStructure1095);
                    fwin233=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin233.getTree());

                    }
                    break;
                case 58 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:516: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1097);
                    sym234=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym234.getTree());

                    }
                    break;
                case 59 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:520: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1099);
                    clause235=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause235.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:1: range : number dash number ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.number_return number236 = null;

        ChemicalChunkerParser.dash_return dash237 = null;

        ChemicalChunkerParser.number_return number238 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:6: ( number dash number )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:8: number dash number
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_number_in_range1105);
            number236=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number236.getTree());
            pushFollow(FOLLOW_dash_in_range1107);
            dash237=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash237.getTree());
            pushFollow(FOLLOW_number_in_range1109);
            number238=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number238.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:114:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure239 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:114:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:114:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles1116);
            cycleStructure239=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure239.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 114:25: -> ^( CYCLES cycleStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:114:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:115:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd240 = null;

        ChemicalChunkerParser.dashNN_return dashNN241 = null;

        ChemicalChunkerParser.nncycle_return nncycle242 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:115:16: ( cd ( dashNN )? nncycle )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:115:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure1133);
            cd240=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd240.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:115:21: ( dashNN )?
            int alt71=2;
            switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 43:
                case 153:
                case 171:
                case 172:
                case 173:
                case 174:
                case 177:
                    {
                    alt71=1;
                    }
                    break;
            }

            switch (alt71) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure1135);
                    dashNN241=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN241.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure1138);
            nncycle242=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle242.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj243 = null;

        ChemicalChunkerParser.nn_return nn244 = null;

        ChemicalChunkerParser.cd_return cd245 = null;

        ChemicalChunkerParser.dash_return dash246 = null;

        ChemicalChunkerParser.adj_return adj247 = null;

        ChemicalChunkerParser.nn_return nn248 = null;

        ChemicalChunkerParser.cd_return cd249 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:10: ( adj | nn | cd )
            int alt72=3;
            switch ( input.LA(1) ) {
            case 37:
            case 38:
            case 43:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt72=1;
                }
                break;
            case 177:
                {
                alt72=2;
                }
                break;
            case 153:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN1148);
                    adj243=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj243.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN1150);
                    nn244=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn244.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN1152);
                    cd245=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd245.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:22: ( dash ( adj | nn | cd ) )*
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    alt74=1;
                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN1156);
            	    dash246=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash246.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:28: ( adj | nn | cd )
            	    int alt73=3;
            	    switch ( input.LA(1) ) {
            	    case 37:
            	    case 38:
            	    case 43:
            	    case 171:
            	    case 172:
            	    case 173:
            	    case 174:
            	        {
            	        alt73=1;
            	        }
            	        break;
            	    case 177:
            	        {
            	        alt73=2;
            	        }
            	        break;
            	    case 153:
            	        {
            	        alt73=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 73, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt73) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN1159);
            	            adj247=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj247.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN1161);
            	            nn248=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn248.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN1163);
            	            cd249=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd249.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:1: ratio : ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio250 = null;

        ChemicalChunkerParser.nounratio_return nounratio251 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:7: ( ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:9: ( numberratio | nounratio )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:9: ( numberratio | nounratio )
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio1176);
                    numberratio250=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio250.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio1178);
                    nounratio251=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio251.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numberratio, nounratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:33: -> ^( RATIO ( numberratio )? ( nounratio )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:36: ^( RATIO ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:44: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:57: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:1: numberratio : cd ( colon oscarcd | cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd252 = null;

        ChemicalChunkerParser.colon_return colon253 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd254 = null;

        ChemicalChunkerParser.cd_return cd255 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:13: ( cd ( colon oscarcd | cd )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:16: cd ( colon oscarcd | cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio1201);
            cd252=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd252.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:19: ( colon oscarcd | cd )+
            int cnt76=0;
            loop76:
            do {
                int alt76=3;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:20: colon oscarcd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio1204);
            	    colon253=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon253.getTree());
            	    pushFollow(FOLLOW_oscarcd_in_numberratio1206);
            	    oscarcd254=oscarcd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd254.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:34: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_numberratio1208);
            	    cd255=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd255.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun256 = null;

        ChemicalChunkerParser.colon_return colon257 = null;

        ChemicalChunkerParser.noun_return noun258 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:120:2: ( noun ( colon noun )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:120:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio1221);
            noun256=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun256.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:120:11: ( colon noun )+
            int cnt77=0;
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    int LA77_2 = input.LA(2);

                    if ( (synpred217_ChemicalChunker()) ) {
                        alt77=1;
                    }


                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:120:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio1225);
            	    colon257=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon257.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio1227);
            	    noun258=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun258.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:122:1: reference : lsqb cd rsqb ;
    public final ChemicalChunkerParser.reference_return reference() throws RecognitionException {
        ChemicalChunkerParser.reference_return retval = new ChemicalChunkerParser.reference_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb259 = null;

        ChemicalChunkerParser.cd_return cd260 = null;

        ChemicalChunkerParser.rsqb_return rsqb261 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:123:2: ( lsqb cd rsqb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:123:4: lsqb cd rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_reference1241);
            lsqb259=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb259.getTree());
            pushFollow(FOLLOW_cd_in_reference1243);
            cd260=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd260.getTree());
            pushFollow(FOLLOW_rsqb_in_reference1245);
            rsqb261=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb261.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reference"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1262 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2263 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:9: ( ( citationStructure1 | citationStructure2 ) -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:11: ( citationStructure1 | citationStructure2 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:11: ( citationStructure1 | citationStructure2 )
            int alt78=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt78=1;
                }
                break;
            case 129:
                {
                alt78=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation1252);
                    citationStructure1262=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1262.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation1254);
                    citationStructure2263=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2263.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure2, citationStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 124:51: -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:54: ^( CITATION ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:66: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:86: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:126:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb264 = null;

        ChemicalChunkerParser.citationContent_return citationContent265 = null;

        ChemicalChunkerParser.rrb_return rrb266 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:126:19: ( lrb citationContent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:126:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure11276);
            lrb264=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb264.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure11278);
            citationContent265=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent265.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure11280);
            rrb266=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb266.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:127:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma267 = null;

        ChemicalChunkerParser.lrb_return lrb268 = null;

        ChemicalChunkerParser.citationContent_return citationContent269 = null;

        ChemicalChunkerParser.rrb_return rrb270 = null;

        ChemicalChunkerParser.comma_return comma271 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:127:19: ( comma lrb citationContent rrb comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:127:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure21286);
            comma267=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma267.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure21288);
            lrb268=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb268.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure21290);
            citationContent269=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent269.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure21292);
            rrb270=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb270.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure21294);
            comma271=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma271.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp272 = null;

        ChemicalChunkerParser.fw_return fw273 = null;

        ChemicalChunkerParser.cd_return cd274 = null;

        ChemicalChunkerParser.conjunction_return conjunction275 = null;

        ChemicalChunkerParser.nnp_return nnp276 = null;

        ChemicalChunkerParser.fw_return fw277 = null;

        ChemicalChunkerParser.cd_return cd278 = null;

        ChemicalChunkerParser.conjunction_return conjunction279 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:20: ( nnp | fw | cd | conjunction )
            int alt79=4;
            switch ( input.LA(1) ) {
            case 182:
                {
                alt79=1;
                }
                break;
            case 164:
                {
                alt79=2;
                }
                break;
            case 153:
                {
                alt79=3;
                }
                break;
            case 129:
            case 152:
                {
                alt79=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent1303);
                    nnp272=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp272.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent1305);
                    fw273=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw273.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent1307);
                    cd274=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd274.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent1309);
                    conjunction275=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction275.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:44: ( nnp | fw | cd | conjunction )+
            int cnt80=0;
            loop80:
            do {
                int alt80=5;
                switch ( input.LA(1) ) {
                case 182:
                    {
                    alt80=1;
                    }
                    break;
                case 164:
                    {
                    alt80=2;
                    }
                    break;
                case 153:
                    {
                    alt80=3;
                    }
                    break;
                case 129:
                case 152:
                    {
                    alt80=4;
                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent1313);
            	    nnp276=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp276.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent1315);
            	    fw277=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw277.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent1317);
            	    cd278=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd278.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent1319);
            	    conjunction279=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction279.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio280 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3281 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2282 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1283 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:10: ( mixtureRatio )?
            int alt81=2;
            switch ( input.LA(1) ) {
                case 153:
                    {
                    alt81=1;
                    }
                    break;
            }

            switch (alt81) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture1329);
                    mixtureRatio280=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio280.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt82=3;
            switch ( input.LA(1) ) {
            case 137:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 134:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 36:
                            case 37:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 132:
                            case 133:
                            case 134:
                            case 135:
                            case 137:
                            case 153:
                            case 158:
                            case 163:
                            case 164:
                            case 165:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 177:
                            case 179:
                            case 182:
                            case 194:
                            case 195:
                            case 208:
                            case 209:
                            case 211:
                            case 212:
                            case 213:
                            case 214:
                            case 215:
                            case 216:
                            case 217:
                            case 218:
                            case 219:
                            case 220:
                            case 221:
                            case 222:
                            case 223:
                                {
                                alt82=3;
                                }
                                break;
                            case 138:
                                {
                                alt82=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 82, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 82, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 132:
                    case 133:
                    case 135:
                    case 137:
                    case 153:
                    case 158:
                    case 163:
                    case 164:
                    case 165:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 177:
                    case 179:
                    case 182:
                    case 194:
                    case 195:
                    case 208:
                    case 209:
                    case 211:
                    case 212:
                    case 213:
                    case 214:
                    case 215:
                    case 216:
                    case 217:
                    case 218:
                    case 219:
                    case 220:
                    case 221:
                    case 222:
                    case 223:
                        {
                        alt82=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;
                }

                }
                break;
            case 129:
                {
                alt82=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }

            switch (alt82) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture1334);
                    mixtureStructure3281=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3281.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture1336);
                    mixtureStructure2282=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2282.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture1338);
                    mixtureStructure1283=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1283.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2, mixtureStructure3, mixtureRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:81: -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:84: ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:96: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:110: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:129: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:148: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:131:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma284 = null;

        ChemicalChunkerParser.lrb_return lrb285 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent286 = null;

        ChemicalChunkerParser.rrb_return rrb287 = null;

        ChemicalChunkerParser.comma_return comma288 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:131:18: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:131:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure21365);
            comma284=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma284.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure21367);
            lrb285=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb285.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure21369);
            mixtureContent286=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent286.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure21371);
            rrb287=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb287.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure21373);
            comma288=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma288.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:132:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb289 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent290 = null;

        ChemicalChunkerParser.rrb_return rrb291 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:132:18: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:132:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11379);
            lrb289=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb289.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11381);
            mixtureContent290=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent290.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11383);
            rrb291=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb291.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:133:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb292 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent293 = null;

        ChemicalChunkerParser.rrb_return rrb294 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:134:2: ( lrb nnpercent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:134:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure31391);
            lrb292=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb292.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure31394);
            nnpercent293=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent293.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure31396);
            rrb294=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb294.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:1: mixtureRatio : cd colon ( cd | oscarcd ) ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd295 = null;

        ChemicalChunkerParser.colon_return colon296 = null;

        ChemicalChunkerParser.cd_return cd297 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd298 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:137:2: ( cd colon ( cd | oscarcd ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:137:4: cd colon ( cd | oscarcd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio1407);
            cd295=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd295.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio1409);
            colon296=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon296.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:137:13: ( cd | oscarcd )
            int alt83=2;
            switch ( input.LA(1) ) {
            case 153:
                {
                alt83=1;
                }
                break;
            case 36:
                {
                alt83=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:137:14: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureRatio1412);
                    cd297=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd297.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:137:17: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_mixtureRatio1414);
                    oscarcd298=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd298.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:1: mixtureContent : ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw299 = null;

        ChemicalChunkerParser.verb_return verb300 = null;

        ChemicalChunkerParser.nn_return nn301 = null;

        ChemicalChunkerParser.measurements_return measurements302 = null;

        ChemicalChunkerParser.md_return md303 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent304 = null;

        ChemicalChunkerParser.stop_return stop305 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound306 = null;

        ChemicalChunkerParser.molecule_return molecule307 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule308 = null;

        ChemicalChunkerParser.dash_return dash309 = null;

        ChemicalChunkerParser.sym_return sym310 = null;

        ChemicalChunkerParser.cd_return cd311 = null;

        ChemicalChunkerParser.noun_return noun312 = null;

        ChemicalChunkerParser.inof_return inof313 = null;

        ChemicalChunkerParser.inAll_return inAll314 = null;

        ChemicalChunkerParser.cd_return cd315 = null;

        ChemicalChunkerParser.comma_return comma316 = null;

        ChemicalChunkerParser.adj_return adj317 = null;

        ChemicalChunkerParser.colon_return colon318 = null;

        ChemicalChunkerParser.stop_return stop319 = null;

        ChemicalChunkerParser.minimixture_return minimixture320 = null;

        ChemicalChunkerParser.fw_return fw321 = null;

        ChemicalChunkerParser.verb_return verb322 = null;

        ChemicalChunkerParser.measurements_return measurements323 = null;

        ChemicalChunkerParser.nnyield_return nnyield324 = null;

        ChemicalChunkerParser.md_return md325 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent326 = null;

        ChemicalChunkerParser.stop_return stop327 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound328 = null;

        ChemicalChunkerParser.molecule_return molecule329 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule330 = null;

        ChemicalChunkerParser.dash_return dash331 = null;

        ChemicalChunkerParser.sym_return sym332 = null;

        ChemicalChunkerParser.cd_return cd333 = null;

        ChemicalChunkerParser.noun_return noun334 = null;

        ChemicalChunkerParser.inof_return inof335 = null;

        ChemicalChunkerParser.inAll_return inAll336 = null;

        ChemicalChunkerParser.cd_return cd337 = null;

        ChemicalChunkerParser.comma_return comma338 = null;

        ChemicalChunkerParser.adj_return adj339 = null;

        ChemicalChunkerParser.colon_return colon340 = null;

        ChemicalChunkerParser.stop_return stop341 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:15: ( ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt84=21;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1424);
                    fw299=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw299.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1426);
                    verb300=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb300.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent1428);
                    nn301=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn301.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:31: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1430);
                    measurements302=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements302.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:44: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1432);
                    md303=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md303.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:47: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent1434);
                    nnpercent304=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent304.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:57: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1436);
                    stop305=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop305.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:62: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1438);
                    oscarCompound306=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound306.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:76: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1440);
                    molecule307=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule307.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:85: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1442);
                    unnamedmolecule308=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule308.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:101: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1444);
                    dash309=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash309.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:106: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1446);
                    sym310=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym310.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:110: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1448);
                    cd311=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd311.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:113: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1450);
                    noun312=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun312.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:118: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1452);
                    inof313=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof313.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:123: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1454);
                    inAll314=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll314.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:129: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1456);
                    cd315=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd315.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:132: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1458);
                    comma316=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma316.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:138: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1460);
                    adj317=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj317.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:142: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1462);
                    colon318=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon318.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:148: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1464);
                    stop319=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop319.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt85=0;
            loop85:
            do {
                int alt85=23;
                alt85 = dfa85.predict(input);
                switch (alt85) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:155: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent1468);
            	    minimixture320=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture320.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:167: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1470);
            	    fw321=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw321.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:170: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1472);
            	    verb322=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb322.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:175: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1474);
            	    measurements323=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements323.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:188: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent1476);
            	    nnyield324=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield324.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:196: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1478);
            	    md325=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md325.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:199: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent1480);
            	    nnpercent326=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent326.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:209: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1482);
            	    stop327=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop327.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:214: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1484);
            	    oscarCompound328=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound328.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:228: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1486);
            	    molecule329=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule329.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:237: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1488);
            	    unnamedmolecule330=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule330.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:253: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1490);
            	    dash331=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash331.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:258: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1492);
            	    sym332=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym332.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:262: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1494);
            	    cd333=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd333.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:265: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1496);
            	    noun334=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun334.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:270: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1498);
            	    inof335=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof335.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:275: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1500);
            	    inAll336=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll336.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:281: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1502);
            	    cd337=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd337.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:284: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1504);
            	    comma338=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma338.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:290: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1506);
            	    adj339=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj339.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:294: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1508);
            	    colon340=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon340.getTree());

            	    }
            	    break;
            	case 22 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:300: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1510);
            	    stop341=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop341.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt85 >= 1 ) break loop85;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(85, input);
                        throw eee;
                }
                cnt85++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2342 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1343 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt86=2;
            switch ( input.LA(1) ) {
            case 129:
                {
                alt86=1;
                }
                break;
            case 137:
                {
                alt86=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture1521);
                    mixtureStructure2342=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2342.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture1523);
                    mixtureStructure1343=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1343.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:140:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class minimixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:141:1: minimixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.minimixtureStructure2_return minimixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure2_return retval = new ChemicalChunkerParser.minimixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma344 = null;

        ChemicalChunkerParser.lrb_return lrb345 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent346 = null;

        ChemicalChunkerParser.rrb_return rrb347 = null;

        ChemicalChunkerParser.comma_return comma348 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:141:22: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:141:24: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_minimixtureStructure21543);
            comma344=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma344.getTree());
            pushFollow(FOLLOW_lrb_in_minimixtureStructure21545);
            lrb345=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb345.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure21547);
            mixtureContent346=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent346.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure21549);
            rrb347=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb347.getTree());
            pushFollow(FOLLOW_comma_in_minimixtureStructure21551);
            comma348=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma348.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure2"

    public static class minimixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:1: minimixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.minimixtureStructure1_return minimixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure1_return retval = new ChemicalChunkerParser.minimixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb349 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent350 = null;

        ChemicalChunkerParser.rrb_return rrb351 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:22: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:25: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_minimixtureStructure11558);
            lrb349=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb349.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure11560);
            mixtureContent350=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent350.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure11562);
            rrb351=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb351.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure1"

    public static class minimixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:1: minimixtureContent : ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.minimixtureContent_return minimixtureContent() throws RecognitionException {
        ChemicalChunkerParser.minimixtureContent_return retval = new ChemicalChunkerParser.minimixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw352 = null;

        ChemicalChunkerParser.nn_return nn353 = null;

        ChemicalChunkerParser.verb_return verb354 = null;

        ChemicalChunkerParser.measurements_return measurements355 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent356 = null;

        ChemicalChunkerParser.md_return md357 = null;

        ChemicalChunkerParser.stop_return stop358 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound359 = null;

        ChemicalChunkerParser.molecule_return molecule360 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule361 = null;

        ChemicalChunkerParser.dash_return dash362 = null;

        ChemicalChunkerParser.sym_return sym363 = null;

        ChemicalChunkerParser.cd_return cd364 = null;

        ChemicalChunkerParser.noun_return noun365 = null;

        ChemicalChunkerParser.inof_return inof366 = null;

        ChemicalChunkerParser.inAll_return inAll367 = null;

        ChemicalChunkerParser.cd_return cd368 = null;

        ChemicalChunkerParser.comma_return comma369 = null;

        ChemicalChunkerParser.adj_return adj370 = null;

        ChemicalChunkerParser.colon_return colon371 = null;

        ChemicalChunkerParser.stop_return stop372 = null;

        ChemicalChunkerParser.fw_return fw373 = null;

        ChemicalChunkerParser.verb_return verb374 = null;

        ChemicalChunkerParser.measurements_return measurements375 = null;

        ChemicalChunkerParser.nnyield_return nnyield376 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent377 = null;

        ChemicalChunkerParser.md_return md378 = null;

        ChemicalChunkerParser.stop_return stop379 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound380 = null;

        ChemicalChunkerParser.molecule_return molecule381 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule382 = null;

        ChemicalChunkerParser.dash_return dash383 = null;

        ChemicalChunkerParser.sym_return sym384 = null;

        ChemicalChunkerParser.cd_return cd385 = null;

        ChemicalChunkerParser.noun_return noun386 = null;

        ChemicalChunkerParser.inof_return inof387 = null;

        ChemicalChunkerParser.inAll_return inAll388 = null;

        ChemicalChunkerParser.cd_return cd389 = null;

        ChemicalChunkerParser.comma_return comma390 = null;

        ChemicalChunkerParser.adj_return adj391 = null;

        ChemicalChunkerParser.colon_return colon392 = null;

        ChemicalChunkerParser.stop_return stop393 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:19: ( ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt87=21;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:24: fw
                    {
                    pushFollow(FOLLOW_fw_in_minimixtureContent1571);
                    fw352=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw352.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:27: nn
                    {
                    pushFollow(FOLLOW_nn_in_minimixtureContent1573);
                    nn353=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn353.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:30: verb
                    {
                    pushFollow(FOLLOW_verb_in_minimixtureContent1575);
                    verb354=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb354.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:35: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_minimixtureContent1577);
                    measurements355=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements355.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1579);
                    nnpercent356=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent356.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:58: md
                    {
                    pushFollow(FOLLOW_md_in_minimixtureContent1581);
                    md357=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md357.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:61: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1583);
                    stop358=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop358.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:66: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1585);
                    oscarCompound359=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound359.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:80: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_minimixtureContent1587);
                    molecule360=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule360.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:89: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1589);
                    unnamedmolecule361=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule361.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:105: dash
                    {
                    pushFollow(FOLLOW_dash_in_minimixtureContent1591);
                    dash362=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash362.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:110: sym
                    {
                    pushFollow(FOLLOW_sym_in_minimixtureContent1593);
                    sym363=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym363.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:114: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1595);
                    cd364=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd364.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:117: noun
                    {
                    pushFollow(FOLLOW_noun_in_minimixtureContent1597);
                    noun365=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun365.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:122: inof
                    {
                    pushFollow(FOLLOW_inof_in_minimixtureContent1599);
                    inof366=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof366.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:127: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_minimixtureContent1601);
                    inAll367=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll367.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:133: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1603);
                    cd368=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd368.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:136: comma
                    {
                    pushFollow(FOLLOW_comma_in_minimixtureContent1605);
                    comma369=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma369.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:142: adj
                    {
                    pushFollow(FOLLOW_adj_in_minimixtureContent1607);
                    adj370=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj370.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:146: colon
                    {
                    pushFollow(FOLLOW_colon_in_minimixtureContent1609);
                    colon371=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon371.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:152: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1611);
                    stop372=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop372.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt88=0;
            loop88:
            do {
                int alt88=22;
                alt88 = dfa88.predict(input);
                switch (alt88) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:159: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_minimixtureContent1615);
            	    fw373=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw373.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:162: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_minimixtureContent1617);
            	    verb374=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb374.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:167: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_minimixtureContent1619);
            	    measurements375=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements375.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:180: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_minimixtureContent1621);
            	    nnyield376=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield376.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:188: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1623);
            	    nnpercent377=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent377.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:198: md
            	    {
            	    pushFollow(FOLLOW_md_in_minimixtureContent1625);
            	    md378=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md378.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:201: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1627);
            	    stop379=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop379.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:206: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1629);
            	    oscarCompound380=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound380.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:220: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_minimixtureContent1631);
            	    molecule381=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule381.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:229: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1633);
            	    unnamedmolecule382=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule382.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:245: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_minimixtureContent1635);
            	    dash383=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash383.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:250: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_minimixtureContent1637);
            	    sym384=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym384.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:254: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1639);
            	    cd385=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd385.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:257: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_minimixtureContent1641);
            	    noun386=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun386.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:262: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_minimixtureContent1643);
            	    inof387=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof387.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:267: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_minimixtureContent1645);
            	    inAll388=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll388.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:273: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1647);
            	    cd389=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd389.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:276: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_minimixtureContent1649);
            	    comma390=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma390.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:282: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_minimixtureContent1651);
            	    adj391=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj391.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:286: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_minimixtureContent1653);
            	    colon392=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon392.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:292: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1655);
            	    stop393=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop393.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:1: adj : ( jj | jjr | jjs | jjt | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj394 = null;

        ChemicalChunkerParser.jjr_return jjr395 = null;

        ChemicalChunkerParser.jjs_return jjs396 = null;

        ChemicalChunkerParser.jjt_return jjt397 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj398 = null;

        ChemicalChunkerParser.jjchem_return jjchem399 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn400 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:5: ( jj | jjr | jjs | jjt | oscarcj | jjchem | oscarrn )
            int alt89=7;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt89=1;
                }
                break;
            case 172:
                {
                alt89=2;
                }
                break;
            case 173:
                {
                alt89=3;
                }
                break;
            case 174:
                {
                alt89=4;
                }
                break;
            case 37:
                {
                alt89=5;
                }
                break;
            case 43:
                {
                alt89=6;
                }
                break;
            case 38:
                {
                alt89=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1666);
                    jj394=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj394.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1668);
                    jjr395=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr395.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1670);
                    jjs396=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs396.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj1672);
                    jjt397=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt397.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1674);
                    oscarcj398=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj398.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:30: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj1676);
                    jjchem399=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem399.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:37: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1678);
                    oscarrn400=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn400.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:1: adv : ( rb | rbr | rbt | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb401 = null;

        ChemicalChunkerParser.rbr_return rbr402 = null;

        ChemicalChunkerParser.rbt_return rbt403 = null;

        ChemicalChunkerParser.rp_return rp404 = null;

        ChemicalChunkerParser.rbs_return rbs405 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:5: ( rb | rbr | rbt | rp | rbs )
            int alt90=5;
            switch ( input.LA(1) ) {
            case 201:
                {
                alt90=1;
                }
                break;
            case 202:
                {
                alt90=2;
                }
                break;
            case 204:
                {
                alt90=3;
                }
                break;
            case 207:
                {
                alt90=4;
                }
                break;
            case 205:
                {
                alt90=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1685);
                    rb401=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb401.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1687);
                    rbr402=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr402.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1689);
                    rbt403=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt403.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1691);
                    rp404=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp404.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1693);
                    rbs405=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs405.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:150:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg406 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere407 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime408 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp409 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN410 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole411 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther412 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:5: ( neg )?
            int alt91=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    alt91=1;
                    }
                    break;
            }

            switch (alt91) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1706);
                    neg406=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg406.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt92=6;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1710);
                    prepphraseAtmosphere407=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere407.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1712);
                    prepphraseTime408=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime408.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1714);
                    prepphraseTemp409=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp409.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1716);
                    prepphraseIN410=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN410.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1718);
                    prepphraseRole411=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole411.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1720);
                    prepphraseOther412=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther412.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv413 = null;

        ChemicalChunkerParser.adj_return adj414 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:154:2: ( adv | adj )
            int alt93=2;
            switch ( input.LA(1) ) {
            case 201:
            case 202:
            case 204:
            case 205:
            case 207:
                {
                alt93=1;
                }
                break;
            case 37:
            case 38:
            case 43:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt93=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:154:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1734);
                    adv413=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv413.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:154:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1736);
                    adj414=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj414.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:155:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj415 = null;

        ChemicalChunkerParser.inMost_return inMost416 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase417 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:4: ( advAdj )*
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 43:
                case 171:
                case 172:
                case 173:
                case 174:
                case 201:
                case 202:
                case 204:
                case 205:
                case 207:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1745);
            	    advAdj415=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj415.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:12: ( inMost )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 170:
                case 209:
                    {
                    alt95=1;
                    }
                    break;

                }

                switch (alt95) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1748);
            	    inMost416=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost416.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1752);
            nounphrase417=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase417.getTree());


            // AST REWRITE
            // elements: nounphrase, inMost, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 156:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:157:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof418 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase419 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1778);
            inof418=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof418.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1781);
            nounphrase419=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase419.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure420 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:161:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:161:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1802);
            prepPhraseTimeStructure420=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure420.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 161:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:161:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj421 = null;

        ChemicalChunkerParser.inAll_return inAll422 = null;

        ChemicalChunkerParser.dt_return dt423 = null;

        ChemicalChunkerParser.advAdj_return advAdj424 = null;

        ChemicalChunkerParser.cd_return cd425 = null;

        ChemicalChunkerParser.nntime_return nntime426 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:3: ( advAdj )*
            loop96:
            do {
                int alt96=2;
                alt96 = dfa96.predict(input);
                switch (alt96) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1819);
            	    advAdj421=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj421.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:11: ( inAll )?
            int alt97=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 170:
                case 209:
                    {
                    alt97=1;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1822);
                    inAll422=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll422.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:19: ( dt )?
            int alt98=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt98=1;
                    }
                    break;
            }

            switch (alt98) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1826);
                    dt423=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt423.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:23: ( advAdj )*
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 43:
                case 171:
                case 172:
                case 173:
                case 174:
                case 201:
                case 202:
                case 204:
                case 205:
                case 207:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1829);
            	    advAdj424=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj424.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:31: ( cd )?
            int alt100=2;
            switch ( input.LA(1) ) {
                case 153:
                    {
                    alt100=1;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1832);
                    cd425=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd425.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:35: ( nntime )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                switch ( input.LA(1) ) {
                case 63:
                    {
                    int LA101_2 = input.LA(2);

                    if ( (synpred338_ChemicalChunker()) ) {
                        alt101=1;
                    }


                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1835);
            	    nntime426=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime426.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:165:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin427 = null;

        ChemicalChunkerParser.molecule_return molecule428 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1847);
            inin427=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin427.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1849);
            molecule428=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule428.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 166:17: -> ^( PrepPhrase inin molecule )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas429 = null;

        ChemicalChunkerParser.dt_return dt430 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity431 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1870);
            inas429=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas429.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:8: ( dt )?
            int alt102=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt102=1;
                    }
                    break;
            }

            switch (alt102) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1872);
                    dt430=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt430.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1875);
            nnchementity431=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity431.getTree());


            // AST REWRITE
            // elements: nnchementity, dt, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 169:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent432 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1898);
            prepphraseAtmosphereContent432=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent432.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 171:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:172:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder433 = null;

        ChemicalChunkerParser.dt_return dt434 = null;

        ChemicalChunkerParser.advAdj_return advAdj435 = null;

        ChemicalChunkerParser.molecule_return molecule436 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere437 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1917);
            inunder433=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder433.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:12: ( dt )?
            int alt103=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt103=1;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1920);
                    dt434=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt434.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:16: ( advAdj )*
            loop104:
            do {
                int alt104=2;
                alt104 = dfa104.predict(input);
                switch (alt104) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1923);
            	    advAdj435=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj435.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1926);
            molecule436=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule436.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:33: ( nnatmosphere )?
            int alt105=2;
            switch ( input.LA(1) ) {
                case 67:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA105_3 = input.LA(3);

                            if ( (synpred342_ChemicalChunker()) ) {
                                alt105=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1928);
                    nnatmosphere437=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere437.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in438 = null;

        ChemicalChunkerParser.inas_return inas439 = null;

        ChemicalChunkerParser.inbefore_return inbefore440 = null;

        ChemicalChunkerParser.inby_return inby441 = null;

        ChemicalChunkerParser.infor_return infor442 = null;

        ChemicalChunkerParser.infrom_return infrom443 = null;

        ChemicalChunkerParser.inin_return inin444 = null;

        ChemicalChunkerParser.ininto_return ininto445 = null;

        ChemicalChunkerParser.inof_return inof446 = null;

        ChemicalChunkerParser.inoff_return inoff447 = null;

        ChemicalChunkerParser.inon_return inon448 = null;

        ChemicalChunkerParser.inover_return inover449 = null;

        ChemicalChunkerParser.inunder_return inunder450 = null;

        ChemicalChunkerParser.invia_return invia451 = null;

        ChemicalChunkerParser.inwith_return inwith452 = null;

        ChemicalChunkerParser.inwithout_return inwithout453 = null;

        ChemicalChunkerParser.to_return to454 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt106=17;
            switch ( input.LA(1) ) {
            case 170:
                {
                alt106=1;
                }
                break;
            case 45:
                {
                alt106=2;
                }
                break;
            case 46:
                {
                alt106=3;
                }
                break;
            case 52:
                {
                alt106=4;
                }
                break;
            case 56:
                {
                alt106=5;
                }
                break;
            case 57:
                {
                alt106=6;
                }
                break;
            case 48:
                {
                alt106=7;
                }
                break;
            case 49:
                {
                alt106=8;
                }
                break;
            case 54:
                {
                alt106=9;
                }
                break;
            case 60:
                {
                alt106=10;
                }
                break;
            case 55:
                {
                alt106=11;
                }
                break;
            case 59:
                {
                alt106=12;
                }
                break;
            case 58:
                {
                alt106=13;
                }
                break;
            case 53:
                {
                alt106=14;
                }
                break;
            case 50:
                {
                alt106=15;
                }
                break;
            case 51:
                {
                alt106=16;
                }
                break;
            case 209:
                {
                alt106=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }

            switch (alt106) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost1939);
                    in438=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in438.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost1941);
                    inas439=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas439.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost1943);
                    inbefore440=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore440.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost1945);
                    inby441=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby441.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost1947);
                    infor442=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor442.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost1949);
                    infrom443=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom443.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost1951);
                    inin444=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin444.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost1953);
                    ininto445=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto445.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost1955);
                    inof446=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof446.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost1957);
                    inoff447=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff447.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost1959);
                    inon448=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon448.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost1961);
                    inover449=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover449.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost1963);
                    inunder450=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder450.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost1965);
                    invia451=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia451.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost1967);
                    inwith452=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith452.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost1969);
                    inwithout453=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout453.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost1971);
                    to454=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to454.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in455 = null;

        ChemicalChunkerParser.inafter_return inafter456 = null;

        ChemicalChunkerParser.inas_return inas457 = null;

        ChemicalChunkerParser.inbefore_return inbefore458 = null;

        ChemicalChunkerParser.inby_return inby459 = null;

        ChemicalChunkerParser.infor_return infor460 = null;

        ChemicalChunkerParser.infrom_return infrom461 = null;

        ChemicalChunkerParser.inin_return inin462 = null;

        ChemicalChunkerParser.ininto_return ininto463 = null;

        ChemicalChunkerParser.inof_return inof464 = null;

        ChemicalChunkerParser.inoff_return inoff465 = null;

        ChemicalChunkerParser.inon_return inon466 = null;

        ChemicalChunkerParser.inover_return inover467 = null;

        ChemicalChunkerParser.inunder_return inunder468 = null;

        ChemicalChunkerParser.invia_return invia469 = null;

        ChemicalChunkerParser.inwith_return inwith470 = null;

        ChemicalChunkerParser.inwithout_return inwithout471 = null;

        ChemicalChunkerParser.to_return to472 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt107=18;
            switch ( input.LA(1) ) {
            case 170:
                {
                alt107=1;
                }
                break;
            case 47:
                {
                alt107=2;
                }
                break;
            case 45:
                {
                alt107=3;
                }
                break;
            case 46:
                {
                alt107=4;
                }
                break;
            case 52:
                {
                alt107=5;
                }
                break;
            case 56:
                {
                alt107=6;
                }
                break;
            case 57:
                {
                alt107=7;
                }
                break;
            case 48:
                {
                alt107=8;
                }
                break;
            case 49:
                {
                alt107=9;
                }
                break;
            case 54:
                {
                alt107=10;
                }
                break;
            case 60:
                {
                alt107=11;
                }
                break;
            case 55:
                {
                alt107=12;
                }
                break;
            case 59:
                {
                alt107=13;
                }
                break;
            case 58:
                {
                alt107=14;
                }
                break;
            case 53:
                {
                alt107=15;
                }
                break;
            case 50:
                {
                alt107=16;
                }
                break;
            case 51:
                {
                alt107=17;
                }
                break;
            case 209:
                {
                alt107=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1979);
                    in455=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in455.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1981);
                    inafter456=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter456.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1983);
                    inas457=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas457.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1985);
                    inbefore458=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore458.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1987);
                    inby459=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby459.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1989);
                    infor460=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor460.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1991);
                    infrom461=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom461.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1993);
                    inin462=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin462.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1995);
                    ininto463=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto463.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1997);
                    inof464=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof464.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1999);
                    inoff465=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff465.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll2001);
                    inon466=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon466.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll2003);
                    inover467=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover467.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll2005);
                    inunder468=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder468.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll2007);
                    invia469=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia469.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll2009);
                    inwith470=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith470.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll2011);
                    inwithout471=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout471.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll2013);
                    to472=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to472.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent473 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp2020);
            prepphraseTempContent473=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent473.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 178:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj474 = null;

        ChemicalChunkerParser.inAll_return inAll475 = null;

        ChemicalChunkerParser.dt_return dt476 = null;

        ChemicalChunkerParser.advAdj_return advAdj477 = null;

        ChemicalChunkerParser.cd_return cd478 = null;

        ChemicalChunkerParser.nntemp_return nntemp479 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:5: ( advAdj )?
            int alt108=2;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent2041);
                    advAdj474=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj474.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:13: ( inAll )?
            int alt109=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 170:
                case 209:
                    {
                    alt109=1;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent2044);
                    inAll475=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll475.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:20: ( dt )?
            int alt110=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt110=1;
                    }
                    break;
            }

            switch (alt110) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent2047);
                    dt476=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt476.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:24: ( advAdj )?
            int alt111=2;
            switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 43:
                case 171:
                case 172:
                case 173:
                case 174:
                case 201:
                case 202:
                case 204:
                case 205:
                case 207:
                    {
                    alt111=1;
                    }
                    break;
            }

            switch (alt111) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent2050);
                    advAdj477=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj477.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:32: ( cd )?
            int alt112=2;
            switch ( input.LA(1) ) {
                case 153:
                    {
                    alt112=1;
                    }
                    break;
            }

            switch (alt112) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent2053);
                    cd478=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd478.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:36: ( nntemp )+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                switch ( input.LA(1) ) {
                case 71:
                    {
                    int LA113_2 = input.LA(2);

                    if ( (synpred381_ChemicalChunker()) ) {
                        alt113=1;
                    }


                    }
                    break;

                }

                switch (alt113) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent2056);
            	    nntemp479=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp479.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj480 = null;

        ChemicalChunkerParser.inafter_return inafter481 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase482 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:5: ( advAdj )? inafter nounphrase
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:5: ( advAdj )?
            int alt114=2;
            switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 43:
                case 171:
                case 172:
                case 173:
                case 174:
                case 201:
                case 202:
                case 204:
                case 205:
                case 207:
                    {
                    alt114=1;
                    }
                    break;
            }

            switch (alt114) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter2069);
                    advAdj480=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj480.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter2072);
            inafter481=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter481.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter2075);
            nounphrase482=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase482.getTree());


            // AST REWRITE
            // elements: inafter, advAdj, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:187:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd483 = null;

        ChemicalChunkerParser.nnamount_return nnamount484 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:187:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:187:10: ( cd )+ nnamount
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:187:10: ( cd )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    alt115=1;
                    }
                    break;

                }

                switch (alt115) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount2105);
            	    cd483=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd483.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2108);
            nnamount484=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount484.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:187:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd485 = null;

        ChemicalChunkerParser.nnmass_return nnmass486 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:8: ( cd )+ nnmass
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:8: ( cd )+
            int cnt116=0;
            loop116:
            do {
                int alt116=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    alt116=1;
                    }
                    break;

                }

                switch (alt116) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2129);
            	    cd485=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd485.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt116 >= 1 ) break loop116;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(116, input);
                        throw eee;
                }
                cnt116++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2132);
            nnmass486=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass486.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 188:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:189:1: percent : number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.number_return number487 = null;

        ChemicalChunkerParser.nn_return nn488 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent489 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:189:9: ( number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:189:11: number ( nn )? nnpercent
            {
            pushFollow(FOLLOW_number_in_percent2153);
            number487=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number487.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:189:18: ( nn )?
            int alt117=2;
            switch ( input.LA(1) ) {
                case 177:
                    {
                    alt117=1;
                    }
                    break;
            }

            switch (alt117) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2155);
                    nn488=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn488.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2158);
            nnpercent489=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent489.getTree());


            // AST REWRITE
            // elements: nn, nnpercent, number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:32: -> ^( PERCENT number ( nn )? nnpercent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:189:35: ^( PERCENT number ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_number.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:189:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd490 = null;

        ChemicalChunkerParser.nnvol_return nnvol491 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:10: ( cd )+ nnvol
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:10: ( cd )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    alt118=1;
                    }
                    break;

                }

                switch (alt118) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2181);
            	    cd490=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd490.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2184);
            nnvol491=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol491.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 190:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:1: molar : ( cd )* nnmolar -> ^( MOLAR ( cd )* nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd492 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar493 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:7: ( ( cd )* nnmolar -> ^( MOLAR ( cd )* nnmolar ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:9: ( cd )* nnmolar
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:9: ( cd )*
            loop119:
            do {
                int alt119=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    alt119=1;
                    }
                    break;

                }

                switch (alt119) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2205);
            	    cd492=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd492.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2208);
            nnmolar493=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar493.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 191:21: -> ^( MOLAR ( cd )* nnmolar )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:24: ^( MOLAR ( cd )* nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:34: ( cd )*
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:193:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize494 = null;

        ChemicalChunkerParser.inas_return inas495 = null;

        ChemicalChunkerParser.nnexample_return nnexample496 = null;

        ChemicalChunkerParser.cd_return cd497 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase498 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase2231);
            vbsynthesize494=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize494.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase2233);
            inas495=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas495.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:22: ( nnexample cd | prepphrase )
            int alt120=2;
            switch ( input.LA(1) ) {
            case 61:
                {
                alt120=1;
                }
                break;
            case 37:
            case 38:
            case 43:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 63:
            case 71:
            case 131:
            case 153:
            case 158:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 201:
            case 202:
            case 204:
            case 205:
            case 207:
            case 209:
                {
                alt120=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase2236);
                    nnexample496=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample496.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase2238);
                    cd497=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd497.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase2241);
                    prepphrase498=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase498.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:196:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus499 = null;

        ChemicalChunkerParser.conjunction_return conjunction500 = null;

        ChemicalChunkerParser.apparatus_return apparatus501 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus2254);
            apparatus499=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus499.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:14: ( ( conjunction )* apparatus )*
            loop122:
            do {
                int alt122=2;
                alt122 = dfa122.predict(input);
                switch (alt122) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:15: ( conjunction )* apparatus
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:15: ( conjunction )*
            	    loop121:
            	    do {
            	        int alt121=2;
            	        alt121 = dfa121.predict(input);
            	        switch (alt121) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus2257);
            	    	    conjunction500=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction500.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop121;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus2260);
            	    apparatus501=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus501.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt502 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus503 = null;

        ChemicalChunkerParser.nnApp_return nnApp504 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:4: ( dt )?
            int alt123=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt123=1;
                    }
                    break;
            }

            switch (alt123) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus2272);
                    dt502=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt502.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:8: ( preapparatus )*
            loop124:
            do {
                int alt124=2;
                switch ( input.LA(1) ) {
                case 36:
                case 37:
                case 38:
                case 39:
                case 43:
                case 62:
                case 65:
                case 70:
                case 75:
                case 81:
                case 86:
                case 129:
                case 137:
                case 153:
                case 171:
                case 172:
                case 173:
                case 174:
                case 177:
                    {
                    alt124=1;
                    }
                    break;

                }

                switch (alt124) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus2275);
            	    preapparatus503=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus503.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:22: ( nnApp )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                switch ( input.LA(1) ) {
                case 97:
                    {
                    int LA125_2 = input.LA(2);

                    if ( (synpred393_ChemicalChunker()) ) {
                        alt125=1;
                    }


                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus2278);
            	    nnApp504=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp504.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);



            // AST REWRITE
            // elements: dt, preapparatus, nnApp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 199:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus505 = null;

        ChemicalChunkerParser.dash_return dash506 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus507 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:4: ( nnapparatus )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                switch ( input.LA(1) ) {
                case 97:
                    {
                    int LA126_2 = input.LA(2);

                    if ( (synpred394_ChemicalChunker()) ) {
                        alt126=1;
                    }


                    }
                    break;

                }

                switch (alt126) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2306);
            	    nnapparatus505=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus505.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:17: ( dash nnapparatus )*
            loop127:
            do {
                int alt127=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 97:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA127_5 = input.LA(5);

                                if ( (synpred395_ChemicalChunker()) ) {
                                    alt127=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt127) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp2310);
            	    dash506=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash506.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2312);
            	    nnapparatus507=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus507.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:203:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity508 = null;

        ChemicalChunkerParser.adj_return adj509 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure510 = null;

        ChemicalChunkerParser.nnadd_return nnadd511 = null;

        ChemicalChunkerParser.molecule_return molecule512 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity513 = null;

        ChemicalChunkerParser.nnstate_return nnstate514 = null;

        ChemicalChunkerParser.nn_return nn515 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt128=0;
            loop128:
            do {
                int alt128=9;
                alt128 = dfa128.predict(input);
                switch (alt128) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus2326);
            	    quantity508=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity508.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus2328);
            	    adj509=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj509.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus2330);
            	    nnpressure510=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure510.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus2332);
            	    nnadd511=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd511.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus2334);
            	    molecule512=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule512.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus2336);
            	    nnchementity513=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity513.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus2338);
            	    nnstate514=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate514.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus2340);
            	    nn515=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn515.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd516 = null;

        ChemicalChunkerParser.nn_return nn517 = null;

        ChemicalChunkerParser.multiple_return multiple518 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes519 = null;

        ChemicalChunkerParser.dt_return dt520 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:3: ( cd nn )?
            int alt129=2;
            switch ( input.LA(1) ) {
                case 153:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 177:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 36:
                                                case 39:
                                                case 65:
                                                case 153:
                                                    {
                                                    alt129=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt129) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2351);
                    cd516=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd516.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2353);
                    nn517=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn517.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:12: ( multiple | measurementtypes )
            int alt130=2;
            switch ( input.LA(1) ) {
            case 153:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 64:
                    case 65:
                    case 66:
                    case 69:
                    case 134:
                    case 153:
                    case 177:
                        {
                        alt130=2;
                        }
                        break;
                    case 42:
                        {
                        alt130=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;
                }

                }
                break;
            case 36:
            case 39:
            case 65:
                {
                alt130=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2358);
                    multiple518=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple518.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2360);
                    measurementtypes519=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes519.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:43: ( dt )?
            int alt131=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA131_3 = input.LA(3);

                            if ( (synpred406_ChemicalChunker()) ) {
                                alt131=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt131) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2366);
                    dt520=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt520.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd521 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode522 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes523 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2374);
            cd521=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd521.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2376);
            cdunicode522=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode522.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:25: ( measurementtypes )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2378);
                    measurementtypes523=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes523.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, cdunicode, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 207:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:208:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar524 = null;

        ChemicalChunkerParser.amount_return amount525 = null;

        ChemicalChunkerParser.mass_return mass526 = null;

        ChemicalChunkerParser.percent_return percent527 = null;

        ChemicalChunkerParser.volume_return volume528 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:209:2: ( molar | amount | mass | percent | volume )
            int alt133=5;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:209:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2405);
                    molar524=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar524.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:209:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2407);
                    amount525=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount525.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:209:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2409);
                    mass526=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass526.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:209:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2411);
                    percent527=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent527.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:209:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2413);
                    volume528=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume528.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:1: oscarCompound : ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj529 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1530 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2531 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3532 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4533 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm534 = null;

        ChemicalChunkerParser.adj_return adj535 = null;

        ChemicalChunkerParser.reference_return reference536 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:15: ( ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:18: ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:18: ( adj )*
            loop134:
            do {
                int alt134=2;
                switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 43:
                case 171:
                case 172:
                case 173:
                case 174:
                    {
                    alt134=1;
                    }
                    break;

                }

                switch (alt134) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound2425);
            	    adj529=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj529.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt135=5;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:24: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound2429);
                    oscarCompound1530=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1530.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:39: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound2431);
                    oscarCompound2531=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2531.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:54: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound2433);
                    oscarCompound3532=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3532.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:69: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound2435);
                    oscarCompound4533=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4533.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:84: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound2437);
                    oscarcm534=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm534.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:93: ( adj )?
            int alt136=2;
            alt136 = dfa136.predict(input);
            switch (alt136) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound2440);
                    adj535=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj535.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:98: ( reference )?
            int alt137=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 153:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 136:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA137_7 = input.LA(7);

                                                            if ( (synpred418_ChemicalChunker()) ) {
                                                                alt137=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt137) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: reference
                    {
                    pushFollow(FOLLOW_reference_in_oscarCompound2443);
                    reference536=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference536.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:1: oscarCompound4 : lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb537 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm538 = null;

        ChemicalChunkerParser.rrb_return rrb539 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:16: ( lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound42452);
            lrb537=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb537.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound42455);
            oscarcm538=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm538.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound42457);
            rrb539=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb539.getTree());


            // AST REWRITE
            // elements: oscarcm, lrb, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:35: -> ^( OSCARCM lrb oscarcm rrb )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:38: ^( OSCARCM lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:1: oscarCompound3 : oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure540 = null;


        RewriteRuleSubtreeStream stream_oscarCompound3Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound3Structure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:16: ( oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:18: oscarCompound3Structure
            {
            pushFollow(FOLLOW_oscarCompound3Structure_in_oscarCompound32480);
            oscarCompound3Structure540=oscarCompound3Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound3Structure.add(oscarCompound3Structure540.getTree());


            // AST REWRITE
            // elements: oscarCompound3Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 215:42: -> ^( OSCARCM oscarCompound3Structure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:45: ^( OSCARCM oscarCompound3Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound3Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:1: oscarCompound2 : oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure541 = null;


        RewriteRuleSubtreeStream stream_oscarCompound2Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound2Structure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:16: ( oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:18: oscarCompound2Structure
            {
            pushFollow(FOLLOW_oscarCompound2Structure_in_oscarCompound22498);
            oscarCompound2Structure541=oscarCompound2Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound2Structure.add(oscarCompound2Structure541.getTree());


            // AST REWRITE
            // elements: oscarCompound2Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 216:42: -> ^( OSCARCM oscarCompound2Structure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:45: ^( OSCARCM oscarCompound2Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound2Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:1: oscarCompound1 : oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm542 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm543 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:16: ( oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound12516);
            oscarcm542=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm542.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:26: ( oscarcm )+
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                switch ( input.LA(1) ) {
                case 81:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA138_3 = input.LA(3);

                        if ( (synpred419_ChemicalChunker()) ) {
                            alt138=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt138) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound12518);
            	    oscarcm543=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm543.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt138 >= 1 ) break loop138;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:35: -> ^( OSCARCM oscarcm ( oscarcm )+ )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:38: ^( OSCARCM oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class oscarCompound3Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3Structure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:220:1: oscarCompound3Structure : oscarcm ( dash | apost )+ ;
    public final ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3Structure_return retval = new ChemicalChunkerParser.oscarCompound3Structure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm544 = null;

        ChemicalChunkerParser.dash_return dash545 = null;

        ChemicalChunkerParser.apost_return apost546 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:2: ( oscarcm ( dash | apost )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:5: oscarcm ( dash | apost )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound3Structure2543);
            oscarcm544=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm544.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:13: ( dash | apost )+
            int cnt139=0;
            loop139:
            do {
                int alt139=3;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA139_4 = input.LA(3);

                        if ( (synpred420_ChemicalChunker()) ) {
                            alt139=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 130:
                    {
                    alt139=2;
                    }
                    break;

                }

                switch (alt139) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:14: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound3Structure2546);
            	    dash545=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash545.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:19: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound3Structure2548);
            	    apost546=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost546.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3Structure"

    public static class oscarCompound2Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2Structure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:1: oscarCompound2Structure : oscarcm ( dash oscarcm )+ ( dash )? ;
    public final ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2Structure_return retval = new ChemicalChunkerParser.oscarCompound2Structure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm547 = null;

        ChemicalChunkerParser.dash_return dash548 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm549 = null;

        ChemicalChunkerParser.dash_return dash550 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:2: ( oscarcm ( dash oscarcm )+ ( dash )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:5: oscarcm ( dash oscarcm )+ ( dash )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2562);
            oscarcm547=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm547.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:13: ( dash oscarcm )+
            int cnt140=0;
            loop140:
            do {
                int alt140=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 81:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA140_5 = input.LA(5);

                                if ( (synpred422_ChemicalChunker()) ) {
                                    alt140=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt140) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:14: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2565);
            	    dash548=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash548.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2567);
            	    oscarcm549=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm549.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt140 >= 1 ) break loop140;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(140, input);
                        throw eee;
                }
                cnt140++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:30: ( dash )?
            int alt141=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA141_3 = input.LA(3);

                            if ( (synpred423_ChemicalChunker()) ) {
                                alt141=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt141) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2572);
                    dash550=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash550.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2Structure"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ( mixture )? ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity551 = null;

        ChemicalChunkerParser.mixture_return mixture552 = null;

        ChemicalChunkerParser.inof_return inof553 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound554 = null;

        ChemicalChunkerParser.mixture_return mixture555 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:2: ( ( quantity | mixture )+ inof oscarCompound ( mixture )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:3: ( quantity | mixture )+ inof oscarCompound ( mixture )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:3: ( quantity | mixture )+
            int cnt142=0;
            loop142:
            do {
                int alt142=3;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    int LA142_2 = input.LA(2);

                    if ( (synpred424_ChemicalChunker()) ) {
                        alt142=1;
                    }
                    else if ( (synpred425_ChemicalChunker()) ) {
                        alt142=2;
                    }


                    }
                    break;
                case 153:
                    {
                    int LA142_3 = input.LA(2);

                    if ( (synpred424_ChemicalChunker()) ) {
                        alt142=1;
                    }
                    else if ( (synpred425_ChemicalChunker()) ) {
                        alt142=2;
                    }


                    }
                    break;
                case 36:
                case 39:
                case 65:
                    {
                    alt142=1;
                    }
                    break;
                case 129:
                    {
                    alt142=2;
                    }
                    break;

                }

                switch (alt142) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount12586);
            	    quantity551=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity551.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount12588);
            	    mixture552=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture552.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt142 >= 1 ) break loop142;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(142, input);
                        throw eee;
                }
                cnt142++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount12592);
            inof553=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof553.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount12594);
            oscarCompound554=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound554.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:42: ( mixture )?
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount12596);
                    mixture555=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture555.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:230:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity556 = null;

        ChemicalChunkerParser.mixture_return mixture557 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound558 = null;

        ChemicalChunkerParser.citation_return citation559 = null;

        ChemicalChunkerParser.quantity_return quantity560 = null;

        ChemicalChunkerParser.mixture_return mixture561 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:3: ( quantity | mixture )*
            loop144:
            do {
                int alt144=3;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22607);
            	    quantity556=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity556.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22609);
            	    mixture557=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture557.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:23: ( oscarCompound )+
            int cnt145=0;
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount22613);
            	    oscarCompound558=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound558.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt145 >= 1 ) break loop145;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(145, input);
                        throw eee;
                }
                cnt145++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:39: ( citation | quantity | mixture )*
            loop146:
            do {
                int alt146=4;
                alt146 = dfa146.predict(input);
                switch (alt146) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount22618);
            	    citation559=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation559.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22620);
            	    quantity560=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity560.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22622);
            	    mixture561=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture561.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:1: moleculeamount3 : ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity562 = null;

        ChemicalChunkerParser.mixture_return mixture563 = null;

        ChemicalChunkerParser.inof_return inof564 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio565 = null;

        ChemicalChunkerParser.mixture_return mixture566 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound567 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:2: ( ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:3: ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:3: ( quantity | mixture )
            int alt147=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                int LA147_1 = input.LA(2);

                if ( (synpred433_ChemicalChunker()) ) {
                    alt147=1;
                }
                else if ( (true) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;
                }
                }
                break;
            case 153:
                {
                int LA147_2 = input.LA(2);

                if ( (synpred433_ChemicalChunker()) ) {
                    alt147=1;
                }
                else if ( (true) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 2, input);

                    throw nvae;
                }
                }
                break;
            case 36:
            case 39:
            case 65:
                {
                alt147=1;
                }
                break;
            case 129:
                {
                alt147=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount32636);
                    quantity562=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity562.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32638);
                    mixture563=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture563.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount32641);
            inof564=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof564.getTree());
            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount32643);
            mixtureRatio565=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio565.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:40: ( mixture )?
            int alt148=2;
            switch ( input.LA(1) ) {
                case 129:
                case 153:
                    {
                    alt148=1;
                    }
                    break;
                case 137:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 81:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 36:
                                                case 37:
                                                case 38:
                                                case 39:
                                                case 40:
                                                case 41:
                                                case 43:
                                                case 44:
                                                case 45:
                                                case 46:
                                                case 47:
                                                case 48:
                                                case 49:
                                                case 50:
                                                case 51:
                                                case 52:
                                                case 53:
                                                case 54:
                                                case 55:
                                                case 56:
                                                case 57:
                                                case 58:
                                                case 59:
                                                case 60:
                                                case 61:
                                                case 62:
                                                case 63:
                                                case 65:
                                                case 66:
                                                case 67:
                                                case 68:
                                                case 69:
                                                case 70:
                                                case 71:
                                                case 72:
                                                case 73:
                                                case 74:
                                                case 75:
                                                case 76:
                                                case 77:
                                                case 78:
                                                case 79:
                                                case 80:
                                                case 81:
                                                case 82:
                                                case 83:
                                                case 84:
                                                case 85:
                                                case 86:
                                                case 87:
                                                case 88:
                                                case 89:
                                                case 90:
                                                case 91:
                                                case 92:
                                                case 93:
                                                case 94:
                                                case 95:
                                                case 96:
                                                case 97:
                                                case 98:
                                                case 99:
                                                case 100:
                                                case 101:
                                                case 102:
                                                case 103:
                                                case 104:
                                                case 105:
                                                case 106:
                                                case 107:
                                                case 108:
                                                case 109:
                                                case 110:
                                                case 111:
                                                case 112:
                                                case 113:
                                                case 114:
                                                case 115:
                                                case 116:
                                                case 117:
                                                case 118:
                                                case 119:
                                                case 120:
                                                case 121:
                                                case 122:
                                                case 123:
                                                case 124:
                                                case 125:
                                                case 126:
                                                case 127:
                                                case 128:
                                                case 129:
                                                case 130:
                                                case 132:
                                                case 133:
                                                case 134:
                                                case 135:
                                                case 137:
                                                case 153:
                                                case 158:
                                                case 163:
                                                case 164:
                                                case 165:
                                                case 170:
                                                case 171:
                                                case 172:
                                                case 173:
                                                case 174:
                                                case 175:
                                                case 177:
                                                case 179:
                                                case 182:
                                                case 194:
                                                case 195:
                                                case 208:
                                                case 209:
                                                case 211:
                                                case 212:
                                                case 213:
                                                case 214:
                                                case 215:
                                                case 216:
                                                case 217:
                                                case 218:
                                                case 219:
                                                case 220:
                                                case 221:
                                                case 222:
                                                case 223:
                                                    {
                                                    alt148=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 40:
                                case 41:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 120:
                                case 121:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 126:
                                case 127:
                                case 128:
                                case 129:
                                case 132:
                                case 133:
                                case 134:
                                case 135:
                                case 137:
                                case 153:
                                case 158:
                                case 163:
                                case 164:
                                case 165:
                                case 170:
                                case 171:
                                case 172:
                                case 173:
                                case 174:
                                case 175:
                                case 177:
                                case 179:
                                case 182:
                                case 194:
                                case 195:
                                case 208:
                                case 209:
                                case 211:
                                case 212:
                                case 213:
                                case 214:
                                case 215:
                                case 216:
                                case 217:
                                case 218:
                                case 219:
                                case 220:
                                case 221:
                                case 222:
                                case 223:
                                    {
                                    alt148=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt148) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32645);
                    mixture566=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture566.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount32648);
            oscarCompound567=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound567.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3568 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1569 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2570 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:16: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:18: moleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount2658);
                    moleculeamount3568=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3568.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:34: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount2660);
                    moleculeamount1569=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1569.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:52: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount2664);
                    moleculeamount2570=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2570.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount571 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:238:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:238:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule2685);
            moleculeamount571=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount571.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 238:19: -> ^( MOLECULE moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:238:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class oscarcdType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcdType"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:1: oscarcdType : lrb ( oscarcd | cd ) rrb ;
    public final ChemicalChunkerParser.oscarcdType_return oscarcdType() throws RecognitionException {
        ChemicalChunkerParser.oscarcdType_return retval = new ChemicalChunkerParser.oscarcdType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb572 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd573 = null;

        ChemicalChunkerParser.cd_return cd574 = null;

        ChemicalChunkerParser.rrb_return rrb575 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:13: ( lrb ( oscarcd | cd ) rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:16: lrb ( oscarcd | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_oscarcdType2707);
            lrb572=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb572.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:20: ( oscarcd | cd )
            int alt150=2;
            switch ( input.LA(1) ) {
            case 36:
                {
                alt150=1;
                }
                break;
            case 153:
                {
                alt150=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:21: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_oscarcdType2710);
                    oscarcd573=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd573.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:29: cd
                    {
                    pushFollow(FOLLOW_cd_in_oscarcdType2712);
                    cd574=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd574.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_oscarcdType2715);
            rrb575=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb575.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcdType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity576 = null;

        ChemicalChunkerParser.inof_return inof577 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd578 = null;

        ChemicalChunkerParser.cd_return cd579 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:245:2: ( quantity inof ( oscarcd | cd ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:245:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount12724);
            quantity576=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity576.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount12726);
            inof577=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof577.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:245:18: ( oscarcd | cd )
            int alt151=2;
            switch ( input.LA(1) ) {
            case 36:
                {
                alt151=1;
                }
                break;
            case 153:
                {
                alt151=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:245:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount12729);
                    oscarcd578=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd578.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:245:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount12731);
                    cd579=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd579.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:1: unnamedmoleculeamount2 : ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd580 = null;

        ChemicalChunkerParser.oscarcdType_return oscarcdType581 = null;

        ChemicalChunkerParser.citation_return citation582 = null;

        ChemicalChunkerParser.quantity_return quantity583 = null;

        ChemicalChunkerParser.mixture_return mixture584 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:2: ( ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:3: ( oscarcd | oscarcdType ) ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:3: ( oscarcd | oscarcdType )
            int alt152=2;
            switch ( input.LA(1) ) {
            case 36:
                {
                alt152=1;
                }
                break;
            case 137:
                {
                alt152=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:4: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount22740);
                    oscarcd580=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd580.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:12: oscarcdType
                    {
                    pushFollow(FOLLOW_oscarcdType_in_unnamedmoleculeamount22742);
                    oscarcdType581=oscarcdType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcdType581.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:25: ( citation | quantity | mixture )*
            loop153:
            do {
                int alt153=4;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:26: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount22746);
            	    citation582=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation582.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:35: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount22748);
            	    quantity583=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity583.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:44: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount22750);
            	    mixture584=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture584.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:252:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity585 = null;

        ChemicalChunkerParser.inof_return inof586 = null;

        ChemicalChunkerParser.jj_return jj587 = null;

        ChemicalChunkerParser.noun_return noun588 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:2: ( quantity inof ( ( jj )? noun )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32766);
            quantity585=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity585.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32768);
            inof586=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof586.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:17: ( ( jj )? noun )+
            int cnt155=0;
            loop155:
            do {
                int alt155=2;
                alt155 = dfa155.predict(input);
                switch (alt155) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:18: ( jj )? noun
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:18: ( jj )?
            	    int alt154=2;
            	    switch ( input.LA(1) ) {
            	        case 171:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA154_3 = input.LA(3);

            	                    if ( (synpred443_ChemicalChunker()) ) {
            	                        alt154=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt154) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32771);
            	            jj587=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj587.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32774);
            	    noun588=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun588.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt155 >= 1 ) break loop155;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(155, input);
                        throw eee;
                }
                cnt155++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:256:1: unnamedmoleculeamount4 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity589 = null;

        ChemicalChunkerParser.mixture_return mixture590 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity591 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:2: ( ( quantity | mixture ) nnchementity )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:3: ( quantity | mixture )
            int alt156=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                int LA156_1 = input.LA(2);

                if ( (synpred445_ChemicalChunker()) ) {
                    alt156=1;
                }
                else if ( (true) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;
                }
                }
                break;
            case 153:
                {
                int LA156_2 = input.LA(2);

                if ( (synpred445_ChemicalChunker()) ) {
                    alt156=1;
                }
                else if ( (true) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 2, input);

                    throw nvae;
                }
                }
                break;
            case 36:
            case 39:
            case 65:
                {
                alt156=1;
                }
                break;
            case 129:
                {
                alt156=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount42787);
                    quantity589=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity589.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount42789);
                    mixture590=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture590.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount42792);
            nnchementity591=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity591.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:259:1: unnamedmoleculeamount5 : jjcomp nnchementity ( oscarcd )? ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp592 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity593 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd594 = null;

        ChemicalChunkerParser.quantity_return quantity595 = null;

        ChemicalChunkerParser.mixture_return mixture596 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:259:24: ( jjcomp nnchementity ( oscarcd )? ( quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:11: jjcomp nnchementity ( oscarcd )? ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount52811);
            jjcomp592=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp592.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount52813);
            nnchementity593=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity593.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:31: ( oscarcd )?
            int alt157=2;
            switch ( input.LA(1) ) {
                case 36:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA157_3 = input.LA(3);

                            if ( (synpred446_ChemicalChunker()) ) {
                                alt157=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt157) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount52815);
                    oscarcd594=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd594.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:40: ( quantity | mixture )*
            loop158:
            do {
                int alt158=3;
                alt158 = dfa158.predict(input);
                switch (alt158) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:41: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount52819);
            	    quantity595=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity595.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:50: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount52821);
            	    mixture596=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture596.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:262:1: unnamedmoleculeamount : ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5597 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1598 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2599 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3600 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4601 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:2: ( ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            int alt159=5;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:4: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2835);
                    unnamedmoleculeamount5597=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5597.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:27: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2837);
                    unnamedmoleculeamount1598=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1598.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:52: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2841);
                    unnamedmoleculeamount2599=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2599.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:77: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2845);
                    unnamedmoleculeamount3600=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3600.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:100: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2847);
                    unnamedmoleculeamount4601=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4601.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:264:1: unnamedmolecule : unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount602 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:265:2: ( unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:265:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2858);
            unnamedmoleculeamount602=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount602.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:26: -> ^( UNNAMEDMOLECULE unnamedmoleculeamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:265:29: ^( UNNAMEDMOLECULE unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:1: quantity : ( quantity1 | quantity2 ) -> ^( QUANTITY ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1603 = null;

        ChemicalChunkerParser.quantity2_return quantity2604 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:11: ( ( quantity1 | quantity2 ) -> ^( QUANTITY ( quantity1 )? ( quantity2 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:14: ( quantity1 | quantity2 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:14: ( quantity1 | quantity2 )
            int alt160=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt160=1;
                }
                break;
            case 36:
            case 39:
            case 65:
            case 153:
                {
                alt160=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2880);
                    quantity1603=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1603.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2882);
                    quantity2604=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2604.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity1, quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 267:36: -> ^( QUANTITY ( quantity1 )? ( quantity2 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:41: ^( QUANTITY ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:53: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:64: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb605 = null;

        ChemicalChunkerParser.measurements_return measurements606 = null;

        ChemicalChunkerParser.comma_return comma607 = null;

        ChemicalChunkerParser.measurements_return measurements608 = null;

        ChemicalChunkerParser.comma_return comma609 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase610 = null;

        ChemicalChunkerParser.stop_return stop611 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase612 = null;

        ChemicalChunkerParser.rrb_return rrb613 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12907);
            lrb605=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb605.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12909);
            measurements606=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements606.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:21: ( comma measurements )*
            loop161:
            do {
                int alt161=2;
                switch ( input.LA(1) ) {
                case 129:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 36:
                        case 39:
                        case 65:
                        case 153:
                            {
                            alt161=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt161) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12912);
            	    comma607=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma607.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12915);
            	    measurements608=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements608.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:44: ( comma preparationphrase )*
            loop162:
            do {
                int alt162=2;
                switch ( input.LA(1) ) {
                case 129:
                    {
                    alt162=1;
                    }
                    break;

                }

                switch (alt162) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12920);
            	    comma609=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma609.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12922);
            	    preparationphrase610=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase610.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:71: ( stop preparationphrase )*
            loop163:
            do {
                int alt163=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt163=1;
                    }
                    break;

                }

                switch (alt163) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12927);
            	    stop611=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop611.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12929);
            	    preparationphrase612=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase612.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12934);
            rrb613=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb613.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements614 = null;

        ChemicalChunkerParser.comma_return comma615 = null;

        ChemicalChunkerParser.measurements_return measurements616 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22946);
            measurements614=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements614.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:18: ( comma measurements )*
            loop164:
            do {
                int alt164=2;
                alt164 = dfa164.predict(input);
                switch (alt164) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22949);
            	    comma615=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma615.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22952);
            	    measurements616=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements616.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral617 = null;

        ChemicalChunkerParser.nn_return nn618 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod619 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd620 = null;

        ChemicalChunkerParser.cd_return cd621 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:5: ( nngeneral | nn )?
            int alt165=3;
            switch ( input.LA(1) ) {
                case 73:
                    {
                    alt165=1;
                    }
                    break;
                case 177:
                    {
                    alt165=2;
                    }
                    break;
            }

            switch (alt165) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2967);
                    nngeneral617=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral617.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2969);
                    nn618=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn618.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2973);
            nnmethod619=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod619.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:30: ( oscarcd | cd )?
            int alt166=3;
            switch ( input.LA(1) ) {
                case 36:
                    {
                    alt166=1;
                    }
                    break;
                case 153:
                    {
                    alt166=2;
                    }
                    break;
            }

            switch (alt166) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2976);
                    oscarcd620=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd620.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2978);
                    cd621=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd621.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:276:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb622 = null;

        ChemicalChunkerParser.rrb_return rrb623 = null;

        ChemicalChunkerParser.lsqb_return lsqb624 = null;

        ChemicalChunkerParser.rsqb_return rsqb625 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt167=0;
            loop167:
            do {
                int alt167=5;
                alt167 = dfa167.predict(input);
                switch (alt167) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets3000);
            	    lrb622=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb622.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets3002);
            	    rrb623=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb623.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets3004);
            	    lsqb624=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb624.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets3006);
            	    rsqb625=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb625.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:1: oscarcd : 'OSCAR-CD' TOKEN -> ^( 'OSCAR-CD' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;
        RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:8: ( 'OSCAR-CD' TOKEN -> ^( 'OSCAR-CD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:9: 'OSCAR-CD' TOKEN
            {
            string_literal626=(Token)match(input,36,FOLLOW_36_in_oscarcd3019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_36.add(string_literal626);

            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd3021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN627);



            // AST REWRITE
            // elements: TOKEN, 36
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:26: -> ^( 'OSCAR-CD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:29: ^( 'OSCAR-CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_36.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:9: 'OSCAR-CJ' TOKEN
            {
            string_literal628=(Token)match(input,37,FOLLOW_37_in_oscarcj3034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_37.add(string_literal628);

            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3036); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN629);



            // AST REWRITE
            // elements: 37, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 285:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_37.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:286:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:286:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:286:9: 'OSCAR-RN' TOKEN
            {
            string_literal630=(Token)match(input,38,FOLLOW_38_in_oscarrn3049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal630);

            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN631);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:286:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:1: oscarcpr : 'OSCAR-CPR' TOKEN -> ^( 'OSCAR-CPR' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:9: ( 'OSCAR-CPR' TOKEN -> ^( 'OSCAR-CPR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:10: 'OSCAR-CPR' TOKEN
            {
            string_literal632=(Token)match(input,39,FOLLOW_39_in_oscarcpr3064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal632);

            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr3066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN633);



            // AST REWRITE
            // elements: 39, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:28: -> ^( 'OSCAR-CPR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:31: ^( 'OSCAR-CPR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:10: 'OSCAR-ONT' TOKEN
            {
            string_literal634=(Token)match(input,40,FOLLOW_40_in_oscaront3079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal634);

            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN635);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:289:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:289:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:289:11: 'TM-UNICODE' TOKEN
            {
            string_literal636=(Token)match(input,41,FOLLOW_41_in_tmunicode3094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal636);

            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN637);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:289:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:11: 'CD-UNICODE' TOKEN
            {
            string_literal638=(Token)match(input,42,FOLLOW_42_in_cdunicode3109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal638);

            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN639);



            // AST REWRITE
            // elements: TOKEN, 42
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:291:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:291:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:291:8: 'JJ-CHEM' TOKEN
            {
            string_literal640=(Token)match(input,43,FOLLOW_43_in_jjchem3124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal640);

            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN641);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 291:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:291:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal642=(Token)match(input,44,FOLLOW_44_in_jjcomp3139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal642);

            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN643);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:294:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:294:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:294:6: 'IN-AS' TOKEN
            {
            string_literal644=(Token)match(input,45,FOLLOW_45_in_inas3155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal644);

            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN645);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:294:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:10: 'IN-BEFORE' TOKEN
            {
            string_literal646=(Token)match(input,46,FOLLOW_46_in_inbefore3170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal646);

            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN647);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:9: 'IN-AFTER' TOKEN
            {
            string_literal648=(Token)match(input,47,FOLLOW_47_in_inafter3185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal648);

            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN649);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:297:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:297:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:297:6: 'IN-IN' TOKEN
            {
            string_literal650=(Token)match(input,48,FOLLOW_48_in_inin3200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal650);

            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN651);



            // AST REWRITE
            // elements: TOKEN, 48
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:297:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:8: 'IN-INTO' TOKEN
            {
            string_literal652=(Token)match(input,49,FOLLOW_49_in_ininto3215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal652);

            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN653);



            // AST REWRITE
            // elements: 49, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:8: 'IN-WITH' TOKEN
            {
            string_literal654=(Token)match(input,50,FOLLOW_50_in_inwith3230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal654);

            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN655);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:300:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:300:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:300:11: 'IN-WITHOUT' TOKEN
            {
            string_literal656=(Token)match(input,51,FOLLOW_51_in_inwithout3245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal656);

            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN657);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:300:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:6: 'IN-BY' TOKEN
            {
            string_literal658=(Token)match(input,52,FOLLOW_52_in_inby3260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal658);

            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN659);



            // AST REWRITE
            // elements: 52, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:302:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:302:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:302:7: 'IN-VIA' TOKEN
            {
            string_literal660=(Token)match(input,53,FOLLOW_53_in_invia3275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal660);

            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN661);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:302:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:303:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:303:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:303:6: 'IN-OF' TOKEN
            {
            string_literal662=(Token)match(input,54,FOLLOW_54_in_inof3290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal662);

            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN663);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 303:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:303:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:6: 'IN-ON' TOKEN
            {
            string_literal664=(Token)match(input,55,FOLLOW_55_in_inon3305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal664);

            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN665);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:305:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:305:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:305:7: 'IN-FOR' TOKEN
            {
            string_literal666=(Token)match(input,56,FOLLOW_56_in_infor3320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal666);

            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN667);



            // AST REWRITE
            // elements: 56, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:305:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:8: 'IN-FROM' TOKEN
            {
            string_literal668=(Token)match(input,57,FOLLOW_57_in_infrom3335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal668);

            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN669);



            // AST REWRITE
            // elements: TOKEN, 57
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:9: 'IN-UNDER' TOKEN
            {
            string_literal670=(Token)match(input,58,FOLLOW_58_in_inunder3350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal670);

            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN671);



            // AST REWRITE
            // elements: TOKEN, 58
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 307:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:308:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:308:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:308:8: 'IN-OVER' TOKEN
            {
            string_literal672=(Token)match(input,59,FOLLOW_59_in_inover3365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal672);

            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN673);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:308:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:309:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:309:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:309:7: 'IN-OFF' TOKEN
            {
            string_literal674=(Token)match(input,60,FOLLOW_60_in_inoff3380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal674);

            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN675);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:309:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal676=(Token)match(input,61,FOLLOW_61_in_nnexample3397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal676);

            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN677);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:9: 'NN-STATE' TOKEN
            {
            string_literal678=(Token)match(input,62,FOLLOW_62_in_nnstate3412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal678);

            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN679);



            // AST REWRITE
            // elements: 62, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:314:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:314:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:314:8: 'NN-TIME' TOKEN
            {
            string_literal680=(Token)match(input,63,FOLLOW_63_in_nntime3427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal680);

            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN681);



            // AST REWRITE
            // elements: 63, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:314:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:8: 'NN-MASS' TOKEN
            {
            string_literal682=(Token)match(input,64,FOLLOW_64_in_nnmass3442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal682);

            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN683);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:9: 'NN-MOLAR' TOKEN
            {
            string_literal684=(Token)match(input,65,FOLLOW_65_in_nnmolar3457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal684);

            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN685);



            // AST REWRITE
            // elements: TOKEN, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:317:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:317:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:317:10: 'NN-AMOUNT' TOKEN
            {
            string_literal686=(Token)match(input,66,FOLLOW_66_in_nnamount3472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal686);

            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN687);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:317:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal688=(Token)match(input,67,FOLLOW_67_in_nnatmosphere3487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal688);

            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN689);



            // AST REWRITE
            // elements: 67, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:6: 'NN-EQ' TOKEN
            {
            string_literal690=(Token)match(input,68,FOLLOW_68_in_nneq3502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal690);

            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN691);



            // AST REWRITE
            // elements: TOKEN, 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:320:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:320:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:320:7: 'NN-VOL' TOKEN
            {
            string_literal692=(Token)match(input,69,FOLLOW_69_in_nnvol3517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal692);

            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN693);



            // AST REWRITE
            // elements: 69, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:320:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:321:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:321:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:321:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal694=(Token)match(input,70,FOLLOW_70_in_nnchementity3532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal694);

            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN695);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:321:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:8: 'NN-TEMP' TOKEN
            {
            string_literal696=(Token)match(input,71,FOLLOW_71_in_nntemp3547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal696);

            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN697);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 322:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:323:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:323:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:323:9: 'NN-FLASH' TOKEN
            {
            string_literal698=(Token)match(input,72,FOLLOW_72_in_nnflash3562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal698);

            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN699);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:323:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:324:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:324:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:324:11: 'NN-GENERAL' TOKEN
            {
            string_literal700=(Token)match(input,73,FOLLOW_73_in_nngeneral3577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal700);

            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN701);



            // AST REWRITE
            // elements: 73, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:324:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:10: 'NN-METHOD' TOKEN
            {
            string_literal702=(Token)match(input,74,FOLLOW_74_in_nnmethod3592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal702);

            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN703);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:326:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:326:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:326:12: 'NN-PRESSURE' TOKEN
            {
            string_literal704=(Token)match(input,75,FOLLOW_75_in_nnpressure3607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal704);

            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN705);



            // AST REWRITE
            // elements: 75, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:326:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:10: 'NN-COLUMN' TOKEN
            {
            string_literal706=(Token)match(input,76,FOLLOW_76_in_nncolumn3622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal706);

            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN707);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal708=(Token)match(input,77,FOLLOW_77_in_nnchromatography3637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal708);

            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN709);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:329:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:329:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:329:10: 'NN-VACUUM' TOKEN
            {
            string_literal710=(Token)match(input,78,FOLLOW_78_in_nnvacuum3652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal710);

            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN711);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:329:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:9: 'NN-CYCLE' TOKEN
            {
            string_literal712=(Token)match(input,79,FOLLOW_79_in_nncycle3667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal712);

            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN713);



            // AST REWRITE
            // elements: 79, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 330:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:9: 'NN-TIMES' TOKEN
            {
            string_literal714=(Token)match(input,80,FOLLOW_80_in_nntimes3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal714);

            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN715);



            // AST REWRITE
            // elements: TOKEN, 80
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:334:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:334:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:334:9: 'OSCAR-CM' TOKEN
            {
            string_literal716=(Token)match(input,81,FOLLOW_81_in_oscarcm3699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal716);

            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN717);



            // AST REWRITE
            // elements: 81, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:334:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:337:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:337:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:337:7: 'VB-USE' TOKEN
            {
            string_literal718=(Token)match(input,82,FOLLOW_82_in_vbuse3716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal718);

            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN719);



            // AST REWRITE
            // elements: 82, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:337:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:10: 'VB-CHANGE' TOKEN
            {
            string_literal720=(Token)match(input,83,FOLLOW_83_in_vbchange3731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal720);

            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN721);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:339:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:339:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:339:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal722=(Token)match(input,84,FOLLOW_84_in_vbsubmerge3746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal722);

            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN723);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:339:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:11: 'VB-SUBJECT' TOKEN
            {
            string_literal724=(Token)match(input,85,FOLLOW_85_in_vbsubject3761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal724);

            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN725);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:7: 'NN-ADD' TOKEN
            {
            string_literal726=(Token)match(input,86,FOLLOW_86_in_nnadd3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal726);

            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN727);



            // AST REWRITE
            // elements: 86, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:11: 'NN-MIXTURE' TOKEN
            {
            string_literal728=(Token)match(input,87,FOLLOW_87_in_nnmixture3793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal728);

            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN729);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:345:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:345:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:345:10: 'VB-DILUTE' TOKEN
            {
            string_literal730=(Token)match(input,88,FOLLOW_88_in_vbdilute3808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal730);

            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN731);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:345:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:346:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:346:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:346:7: 'VB-ADD' TOKEN
            {
            string_literal732=(Token)match(input,89,FOLLOW_89_in_vbadd3824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal732);

            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN733);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:346:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:10: 'VB-CHARGE' TOKEN
            {
            string_literal734=(Token)match(input,90,FOLLOW_90_in_vbcharge3839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal734);

            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN735);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:348:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:348:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:348:11: 'VB-CONTAIN' TOKEN
            {
            string_literal736=(Token)match(input,91,FOLLOW_91_in_vbcontain3854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal736);

            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN737);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:348:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:349:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:349:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:349:8: 'VB-DROP' TOKEN
            {
            string_literal738=(Token)match(input,92,FOLLOW_92_in_vbdrop3869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal738);

            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN739);



            // AST REWRITE
            // elements: 92, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:349:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:8: 'VB-FILL' TOKEN
            {
            string_literal740=(Token)match(input,93,FOLLOW_93_in_vbfill3884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal740);

            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN741);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:11: 'VB-SUSPEND' TOKEN
            {
            string_literal742=(Token)match(input,94,FOLLOW_94_in_vbsuspend3899); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal742);

            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN743);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:9: 'VB-TREAT' TOKEN
            {
            string_literal744=(Token)match(input,95,FOLLOW_95_in_vbtreat3914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal744);

            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN745);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:355:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:355:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:355:13: 'VB-APPARATUS' TOKEN
            {
            string_literal746=(Token)match(input,96,FOLLOW_96_in_vbapparatus3931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal746);

            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN747);



            // AST REWRITE
            // elements: TOKEN, 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 355:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:355:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:13: 'NN-APPARATUS' TOKEN
            {
            string_literal748=(Token)match(input,97,FOLLOW_97_in_nnapparatus3946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal748);

            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN749);



            // AST REWRITE
            // elements: 97, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal750=(Token)match(input,98,FOLLOW_98_in_vbconcentrate3963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal750);

            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate3965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN751);



            // AST REWRITE
            // elements: TOKEN, 98
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:360:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:360:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:360:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal752=(Token)match(input,99,FOLLOW_99_in_nnconcentrate3978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal752);

            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate3980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN753);



            // AST REWRITE
            // elements: TOKEN, 99
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:360:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:363:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:363:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:363:8: 'VB-COOL' TOKEN
            {
            string_literal754=(Token)match(input,100,FOLLOW_100_in_vbcool3995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal754);

            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool3997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN755);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:363:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:366:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:366:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:366:10: 'VB-DEGASS' TOKEN
            {
            string_literal756=(Token)match(input,101,FOLLOW_101_in_vbdegass4012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal756);

            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN757);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:366:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:369:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:369:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:369:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal758=(Token)match(input,102,FOLLOW_102_in_vbdissolve4029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal758);

            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN759);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:369:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:7: 'VB-DRY' TOKEN
            {
            string_literal760=(Token)match(input,103,FOLLOW_103_in_vbdry4046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal760);

            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN761);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:7: 'NN-DRY' TOKEN
            {
            string_literal762=(Token)match(input,104,FOLLOW_104_in_nndry4061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal762);

            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN763);



            // AST REWRITE
            // elements: TOKEN, 104
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:11: 'VB-EXTRACT' TOKEN
            {
            string_literal764=(Token)match(input,105,FOLLOW_105_in_vbextract4078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal764);

            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN765);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:11: 'NN-EXTRACT' TOKEN
            {
            string_literal766=(Token)match(input,106,FOLLOW_106_in_nnextract4093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal766);

            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN767);



            // AST REWRITE
            // elements: TOKEN, 106
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:380:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:380:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:380:10: 'VB-FILTER' TOKEN
            {
            string_literal768=(Token)match(input,107,FOLLOW_107_in_vbfilter4110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal768);

            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN769);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:380:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:10: 'NN-FILTER' TOKEN
            {
            string_literal770=(Token)match(input,108,FOLLOW_108_in_nnfilter4125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal770);

            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN771);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:8: 'VB-HEAT' TOKEN
            {
            string_literal772=(Token)match(input,109,FOLLOW_109_in_vbheat4142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal772);

            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN773);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:12: 'VB-INCREASE' TOKEN
            {
            string_literal774=(Token)match(input,110,FOLLOW_110_in_vbincrease4157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal774);

            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN775);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:11: 'VB-IMMERSE' TOKEN
            {
            string_literal776=(Token)match(input,111,FOLLOW_111_in_vbimmerse4174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal776);

            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN777);



            // AST REWRITE
            // elements: TOKEN, 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:13: 'VB-PARTITION' TOKEN
            {
            string_literal778=(Token)match(input,112,FOLLOW_112_in_vbpartition4190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal778);

            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN779);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal780=(Token)match(input,113,FOLLOW_113_in_vbprecipitate4207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal780);

            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN781);



            // AST REWRITE
            // elements: 113, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal782=(Token)match(input,114,FOLLOW_114_in_nnprecipitate4222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal782);

            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN783);



            // AST REWRITE
            // elements: TOKEN, 114
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:10: 'VB-PURIFY' TOKEN
            {
            string_literal784=(Token)match(input,115,FOLLOW_115_in_vbpurify4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal784);

            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN785);



            // AST REWRITE
            // elements: TOKEN, 115
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:398:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:398:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:398:10: 'NN-PURIFY' TOKEN
            {
            string_literal786=(Token)match(input,116,FOLLOW_116_in_nnpurify4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal786);

            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN787);



            // AST REWRITE
            // elements: 116, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:398:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:10: 'VB-QUENCH' TOKEN
            {
            string_literal788=(Token)match(input,117,FOLLOW_117_in_vbquench4271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal788);

            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN789);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:11: 'VB-RECOVER' TOKEN
            {
            string_literal790=(Token)match(input,118,FOLLOW_118_in_vbrecover4288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal790);

            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN791);



            // AST REWRITE
            // elements: TOKEN, 118
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 404:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:10: 'VB-REMOVE' TOKEN
            {
            string_literal792=(Token)match(input,119,FOLLOW_119_in_vbremove4305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal792);

            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN793);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:408:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:408:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:408:10: 'NN-REMOVE' TOKEN
            {
            string_literal794=(Token)match(input,120,FOLLOW_120_in_nnremove4320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal794);

            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN795);



            // AST REWRITE
            // elements: TOKEN, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:408:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:411:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:411:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:411:8: 'VB-STIR' TOKEN
            {
            string_literal796=(Token)match(input,121,FOLLOW_121_in_vbstir4337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal796);

            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN797);



            // AST REWRITE
            // elements: 121, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:411:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal798=(Token)match(input,122,FOLLOW_122_in_vbsynthesize4354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal798);

            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN799);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal800=(Token)match(input,123,FOLLOW_123_in_nnsynthesize4369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal800);

            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN801);



            // AST REWRITE
            // elements: TOKEN, 123
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:8: 'VB-WAIT' TOKEN
            {
            string_literal802=(Token)match(input,124,FOLLOW_124_in_vbwait4386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal802);

            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN803);



            // AST REWRITE
            // elements: 124, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:8: 'VB-WASH' TOKEN
            {
            string_literal804=(Token)match(input,125,FOLLOW_125_in_vbwash4403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal804);

            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN805);



            // AST REWRITE
            // elements: 125, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:9: 'VB-YIELD' TOKEN
            {
            string_literal806=(Token)match(input,126,FOLLOW_126_in_vbyield4420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal806);

            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN807);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:9: 'NN-YIELD' TOKEN
            {
            string_literal808=(Token)match(input,127,FOLLOW_127_in_nnyield4437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal808);

            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN809);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:7: 'COLON' TOKEN
            {
            string_literal810=(Token)match(input,128,FOLLOW_128_in_colon4453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal810);

            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN811);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:21: -> ^( 'COLON' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:7: 'COMMA' TOKEN
            {
            string_literal812=(Token)match(input,129,FOLLOW_129_in_comma4468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal812);

            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN813);



            // AST REWRITE
            // elements: TOKEN, 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:21: -> ^( 'COMMA' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:431:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:431:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:431:7: 'APOST' TOKEN
            {
            string_literal814=(Token)match(input,130,FOLLOW_130_in_apost4483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal814);

            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN815);



            // AST REWRITE
            // elements: TOKEN, 130
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:21: -> ^( 'APOST' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:431:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:5: 'NEG' TOKEN
            {
            string_literal816=(Token)match(input,131,FOLLOW_131_in_neg4498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal816);

            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN817);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:17: -> ^( 'NEG' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:6: 'DASH' TOKEN
            {
            string_literal818=(Token)match(input,132,FOLLOW_132_in_dash4513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal818);

            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN819);



            // AST REWRITE
            // elements: TOKEN, 132
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:19: -> ^( 'DASH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:434:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:434:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:434:6: 'STOP' TOKEN
            {
            string_literal820=(Token)match(input,133,FOLLOW_133_in_stop4528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal820);

            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN821);



            // AST REWRITE
            // elements: 133, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:19: -> ^( 'STOP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:434:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:11: 'NN-PERCENT' TOKEN
            {
            string_literal822=(Token)match(input,134,FOLLOW_134_in_nnpercent4543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal822);

            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN823);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:6: 'LSQB' TOKEN
            {
            string_literal824=(Token)match(input,135,FOLLOW_135_in_lsqb4558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal824);

            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN825);



            // AST REWRITE
            // elements: TOKEN, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:19: -> ^( 'LSQB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:6: 'RSQB' TOKEN
            {
            string_literal826=(Token)match(input,136,FOLLOW_136_in_rsqb4573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal826);

            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN827);



            // AST REWRITE
            // elements: TOKEN, 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:19: -> ^( 'RSQB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:5: '-LRB-' TOKEN
            {
            string_literal828=(Token)match(input,137,FOLLOW_137_in_lrb4589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal828);

            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN829);



            // AST REWRITE
            // elements: TOKEN, 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:19: -> ^( '-LRB-' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:5: '-RRB-' TOKEN
            {
            string_literal830=(Token)match(input,138,FOLLOW_138_in_rrb4604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal830);

            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN831);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:19: -> ^( '-RRB-' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:445:1: abl : 'ABL' TOKEN -> ^( 'ABL' TOKEN ) ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:445:4: ( 'ABL' TOKEN -> ^( 'ABL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:445:5: 'ABL' TOKEN
            {
            string_literal832=(Token)match(input,139,FOLLOW_139_in_abl4623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal832);

            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl4625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN833);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:17: -> ^( 'ABL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:445:20: ^( 'ABL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:1: abn : 'ABN' TOKEN -> ^( 'ABN' TOKEN ) ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:4: ( 'ABN' TOKEN -> ^( 'ABN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:5: 'ABN' TOKEN
            {
            string_literal834=(Token)match(input,140,FOLLOW_140_in_abn4640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal834);

            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn4642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN835);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:17: -> ^( 'ABN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:20: ^( 'ABN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:1: abx : 'ABX' TOKEN -> ^( 'ABX' TOKEN ) ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:4: ( 'ABX' TOKEN -> ^( 'ABX' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:5: 'ABX' TOKEN
            {
            string_literal836=(Token)match(input,141,FOLLOW_141_in_abx4657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal836);

            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx4659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN837);



            // AST REWRITE
            // elements: 141, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:17: -> ^( 'ABX' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:20: ^( 'ABX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:1: ap : 'AP' TOKEN -> ^( 'AP' TOKEN ) ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:3: ( 'AP' TOKEN -> ^( 'AP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:4: 'AP' TOKEN
            {
            string_literal838=(Token)match(input,142,FOLLOW_142_in_ap4674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal838);

            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap4676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN839);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:15: -> ^( 'AP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:18: ^( 'AP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:1: at : 'AT' TOKEN -> ^( 'AT' TOKEN ) ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:3: ( 'AT' TOKEN -> ^( 'AT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:4: 'AT' TOKEN
            {
            string_literal840=(Token)match(input,143,FOLLOW_143_in_at4691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal840);

            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at4693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN841);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:15: -> ^( 'AT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:18: ^( 'AT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:1: be : 'BE' TOKEN -> ^( 'BE' TOKEN ) ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:3: ( 'BE' TOKEN -> ^( 'BE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:4: 'BE' TOKEN
            {
            string_literal842=(Token)match(input,144,FOLLOW_144_in_be4708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal842);

            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be4710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN843);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:15: -> ^( 'BE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:18: ^( 'BE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:1: bed : 'BED' TOKEN -> ^( 'BED' TOKEN ) ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:4: ( 'BED' TOKEN -> ^( 'BED' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:5: 'BED' TOKEN
            {
            string_literal844=(Token)match(input,145,FOLLOW_145_in_bed4725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal844);

            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed4727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN845);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:17: -> ^( 'BED' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:20: ^( 'BED' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:1: bedz : 'BEDZ' TOKEN -> ^( 'BEDZ' TOKEN ) ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:5: ( 'BEDZ' TOKEN -> ^( 'BEDZ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:6: 'BEDZ' TOKEN
            {
            string_literal846=(Token)match(input,146,FOLLOW_146_in_bedz4742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal846);

            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz4744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN847);



            // AST REWRITE
            // elements: 146, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:19: -> ^( 'BEDZ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:22: ^( 'BEDZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:1: beg : 'BEG' TOKEN -> ^( 'BEG' TOKEN ) ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:4: ( 'BEG' TOKEN -> ^( 'BEG' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:5: 'BEG' TOKEN
            {
            string_literal848=(Token)match(input,147,FOLLOW_147_in_beg4759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal848);

            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg4761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN849);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:17: -> ^( 'BEG' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:20: ^( 'BEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:1: bem : 'BEM' TOKEN -> ^( 'BEM' TOKEN ) ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:4: ( 'BEM' TOKEN -> ^( 'BEM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:5: 'BEM' TOKEN
            {
            string_literal850=(Token)match(input,148,FOLLOW_148_in_bem4776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal850);

            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN851);



            // AST REWRITE
            // elements: 148, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:17: -> ^( 'BEM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:20: ^( 'BEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:1: ben : 'BEN' TOKEN -> ^( 'BEN' TOKEN ) ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:4: ( 'BEN' TOKEN -> ^( 'BEN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:5: 'BEN' TOKEN
            {
            string_literal852=(Token)match(input,149,FOLLOW_149_in_ben4793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal852);

            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben4795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN853);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:17: -> ^( 'BEN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:20: ^( 'BEN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:1: ber : 'BER' TOKEN -> ^( 'BER' TOKEN ) ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:4: ( 'BER' TOKEN -> ^( 'BER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:5: 'BER' TOKEN
            {
            string_literal854=(Token)match(input,150,FOLLOW_150_in_ber4810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal854);

            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber4812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN855);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:17: -> ^( 'BER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:20: ^( 'BER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:1: bez : 'BEZ' TOKEN -> ^( 'BEZ' TOKEN ) ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:4: ( 'BEZ' TOKEN -> ^( 'BEZ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:5: 'BEZ' TOKEN
            {
            string_literal856=(Token)match(input,151,FOLLOW_151_in_bez4827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal856);

            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez4829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN857);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:17: -> ^( 'BEZ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:20: ^( 'BEZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:4: 'CC' TOKEN
            {
            string_literal858=(Token)match(input,152,FOLLOW_152_in_cc4844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal858);

            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN859);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:15: -> ^( 'CC' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:4: 'CD' TOKEN
            {
            string_literal860=(Token)match(input,153,FOLLOW_153_in_cd4861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal860);

            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN861);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:15: -> ^( 'CD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:1: cs : 'CS' TOKEN -> ^( 'CS' TOKEN ) ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:3: ( 'CS' TOKEN -> ^( 'CS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:4: 'CS' TOKEN
            {
            string_literal862=(Token)match(input,154,FOLLOW_154_in_cs4878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal862);

            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs4880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN863);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:15: -> ^( 'CS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:18: ^( 'CS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:1: dotok : 'DO' TOKEN -> ^( 'DO' TOKEN ) ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:6: ( 'DO' TOKEN -> ^( 'DO' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:7: 'DO' TOKEN
            {
            string_literal864=(Token)match(input,155,FOLLOW_155_in_dotok4895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal864);

            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok4897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN865);



            // AST REWRITE
            // elements: TOKEN, 155
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:18: -> ^( 'DO' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:21: ^( 'DO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:496:1: dod : 'DOD' TOKEN -> ^( 'DOD' TOKEN ) ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:496:4: ( 'DOD' TOKEN -> ^( 'DOD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:496:5: 'DOD' TOKEN
            {
            string_literal866=(Token)match(input,156,FOLLOW_156_in_dod4912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal866);

            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod4914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN867);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:17: -> ^( 'DOD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:496:20: ^( 'DOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:499:1: doz : 'DOZ' TOKEN -> ^( 'DOZ' TOKEN ) ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:499:4: ( 'DOZ' TOKEN -> ^( 'DOZ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:499:5: 'DOZ' TOKEN
            {
            string_literal868=(Token)match(input,157,FOLLOW_157_in_doz4929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal868);

            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz4931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN869);



            // AST REWRITE
            // elements: TOKEN, 157
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:17: -> ^( 'DOZ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:499:20: ^( 'DOZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:4: 'DT' TOKEN
            {
            string_literal870=(Token)match(input,158,FOLLOW_158_in_dt4946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal870);

            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt4948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN871);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:15: -> ^( 'DT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:506:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:506:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:506:7: 'DT-THE' TOKEN
            {
            string_literal872=(Token)match(input,159,FOLLOW_159_in_dtTHE4964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal872);

            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN873);



            // AST REWRITE
            // elements: TOKEN, 159
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 506:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:506:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:1: dti : 'DTI' TOKEN -> ^( 'DTI' TOKEN ) ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:4: ( 'DTI' TOKEN -> ^( 'DTI' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:5: 'DTI' TOKEN
            {
            string_literal874=(Token)match(input,160,FOLLOW_160_in_dti4980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal874);

            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti4982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN875);



            // AST REWRITE
            // elements: TOKEN, 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:17: -> ^( 'DTI' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:20: ^( 'DTI' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:1: dts : 'DTS' TOKEN -> ^( 'DTS' TOKEN ) ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:4: ( 'DTS' TOKEN -> ^( 'DTS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:5: 'DTS' TOKEN
            {
            string_literal876=(Token)match(input,161,FOLLOW_161_in_dts4997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal876);

            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts4999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN877);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:17: -> ^( 'DTS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:20: ^( 'DTS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:1: dtx : 'DTX' TOKEN -> ^( 'DTX' TOKEN ) ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:4: ( 'DTX' TOKEN -> ^( 'DTX' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:5: 'DTX' TOKEN
            {
            string_literal878=(Token)match(input,162,FOLLOW_162_in_dtx5014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal878);

            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx5016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN879);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:17: -> ^( 'DTX' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:20: ^( 'DTX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:517:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:517:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:517:4: 'EX' TOKEN
            {
            string_literal880=(Token)match(input,163,FOLLOW_163_in_ex5031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal880);

            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN881);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:15: -> ^( 'EX' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:517:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:4: 'FW' TOKEN
            {
            string_literal882=(Token)match(input,164,FOLLOW_164_in_fw5048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal882);

            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN883);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:15: -> ^( 'FW' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:1: fwin : 'FW-IN' TOKEN -> ^( 'FW-IN' TOKEN ) ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:5: ( 'FW-IN' TOKEN -> ^( 'FW-IN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:6: 'FW-IN' TOKEN
            {
            string_literal884=(Token)match(input,165,FOLLOW_165_in_fwin5065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal884);

            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin5067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN885);



            // AST REWRITE
            // elements: 165, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:20: -> ^( 'FW-IN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:23: ^( 'FW-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:526:1: hv : 'HV' TOKEN -> ^( 'HV' TOKEN ) ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:526:3: ( 'HV' TOKEN -> ^( 'HV' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:526:4: 'HV' TOKEN
            {
            string_literal886=(Token)match(input,166,FOLLOW_166_in_hv5082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal886);

            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv5084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN887);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:15: -> ^( 'HV' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:526:18: ^( 'HV' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:529:1: hvd : 'HVD' TOKEN -> ^( 'HVD' TOKEN ) ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:529:4: ( 'HVD' TOKEN -> ^( 'HVD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:529:5: 'HVD' TOKEN
            {
            string_literal888=(Token)match(input,167,FOLLOW_167_in_hvd5099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal888);

            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd5101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN889);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:17: -> ^( 'HVD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:529:20: ^( 'HVD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:532:1: hvg : 'HVG' TOKEN -> ^( 'HVG' TOKEN ) ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:532:4: ( 'HVG' TOKEN -> ^( 'HVG' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:532:5: 'HVG' TOKEN
            {
            string_literal890=(Token)match(input,168,FOLLOW_168_in_hvg5116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal890);

            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg5118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN891);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:17: -> ^( 'HVG' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:532:20: ^( 'HVG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:535:1: hvn : 'HVN' TOKEN -> ^( 'HVN' TOKEN ) ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:535:4: ( 'HVN' TOKEN -> ^( 'HVN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:535:5: 'HVN' TOKEN
            {
            string_literal892=(Token)match(input,169,FOLLOW_169_in_hvn5133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal892);

            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn5135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN893);



            // AST REWRITE
            // elements: 169, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 535:17: -> ^( 'HVN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:535:20: ^( 'HVN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:538:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:538:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:538:4: 'IN' TOKEN
            {
            string_literal894=(Token)match(input,170,FOLLOW_170_in_in5150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal894);

            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN895);



            // AST REWRITE
            // elements: TOKEN, 170
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:15: -> ^( 'IN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:538:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:4: 'JJ' TOKEN
            {
            string_literal896=(Token)match(input,171,FOLLOW_171_in_jj5167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal896);

            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN897);



            // AST REWRITE
            // elements: 171, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:15: -> ^( 'JJ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:5: 'JJR' TOKEN
            {
            string_literal898=(Token)match(input,172,FOLLOW_172_in_jjr5184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal898);

            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN899);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:17: -> ^( 'JJR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:547:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:547:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:547:5: 'JJS' TOKEN
            {
            string_literal900=(Token)match(input,173,FOLLOW_173_in_jjs5201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal900);

            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN901);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:17: -> ^( 'JJS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:547:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:550:1: jjt : 'JJT' TOKEN -> ^( 'JJT' TOKEN ) ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:550:4: ( 'JJT' TOKEN -> ^( 'JJT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:550:5: 'JJT' TOKEN
            {
            string_literal902=(Token)match(input,174,FOLLOW_174_in_jjt5218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal902);

            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt5220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN903);



            // AST REWRITE
            // elements: TOKEN, 174
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 550:17: -> ^( 'JJT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:550:20: ^( 'JJT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:553:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:553:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:553:4: 'MD' TOKEN
            {
            string_literal904=(Token)match(input,175,FOLLOW_175_in_md5235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal904);

            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN905);



            // AST REWRITE
            // elements: TOKEN, 175
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 553:15: -> ^( 'MD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:553:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:556:1: nc : 'NC' TOKEN -> ^( 'NC' TOKEN ) ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:556:3: ( 'NC' TOKEN -> ^( 'NC' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:556:4: 'NC' TOKEN
            {
            string_literal906=(Token)match(input,176,FOLLOW_176_in_nc5252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal906);

            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc5254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN907);



            // AST REWRITE
            // elements: TOKEN, 176
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 556:15: -> ^( 'NC' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:556:18: ^( 'NC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:4: 'NN' TOKEN
            {
            string_literal908=(Token)match(input,177,FOLLOW_177_in_nn5269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal908);

            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN909);



            // AST REWRITE
            // elements: TOKEN, 177
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 559:15: -> ^( 'NN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:1: nn_poss : 'NN$' TOKEN -> ^( 'NN$' TOKEN ) ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:8: ( 'NN$' TOKEN -> ^( 'NN$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:9: 'NN$' TOKEN
            {
            string_literal910=(Token)match(input,178,FOLLOW_178_in_nn_poss5286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal910);

            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss5288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN911);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 562:21: -> ^( 'NN$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:24: ^( 'NN$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:565:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:565:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:565:5: 'NNS' TOKEN
            {
            string_literal912=(Token)match(input,179,FOLLOW_179_in_nns5303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal912);

            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN913);



            // AST REWRITE
            // elements: TOKEN, 179
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 565:17: -> ^( 'NNS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:565:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:568:1: nns_poss : 'NNS$' TOKEN -> ^( 'NNS$' TOKEN ) ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:568:9: ( 'NNS$' TOKEN -> ^( 'NNS$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:568:10: 'NNS$' TOKEN
            {
            string_literal914=(Token)match(input,180,FOLLOW_180_in_nns_poss5320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal914);

            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss5322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN915);



            // AST REWRITE
            // elements: TOKEN, 180
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:23: -> ^( 'NNS$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:568:26: ^( 'NNS$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:571:1: np : 'NP' TOKEN -> ^( 'NP' TOKEN ) ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:571:3: ( 'NP' TOKEN -> ^( 'NP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:571:4: 'NP' TOKEN
            {
            string_literal916=(Token)match(input,181,FOLLOW_181_in_np5337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal916);

            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np5339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN917);



            // AST REWRITE
            // elements: TOKEN, 181
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:15: -> ^( 'NP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:571:18: ^( 'NP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_181.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:575:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:575:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:575:5: 'NNP' TOKEN
            {
            string_literal918=(Token)match(input,182,FOLLOW_182_in_nnp5355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal918);

            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN919);



            // AST REWRITE
            // elements: 182, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 575:17: -> ^( 'NNP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:575:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_182.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:1: np_poss : 'NP$' TOKEN -> ^( 'NP$' TOKEN ) ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:8: ( 'NP$' TOKEN -> ^( 'NP$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:9: 'NP$' TOKEN
            {
            string_literal920=(Token)match(input,183,FOLLOW_183_in_np_poss5373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal920);

            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss5375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN921);



            // AST REWRITE
            // elements: TOKEN, 183
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:21: -> ^( 'NP$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:24: ^( 'NP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_183.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:582:1: nps : 'NPS' TOKEN -> ^( 'NPS' TOKEN ) ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:582:4: ( 'NPS' TOKEN -> ^( 'NPS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:582:5: 'NPS' TOKEN
            {
            string_literal922=(Token)match(input,184,FOLLOW_184_in_nps5390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal922);

            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps5392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN923);



            // AST REWRITE
            // elements: TOKEN, 184
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:17: -> ^( 'NPS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:582:20: ^( 'NPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_184.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:585:1: nps_poss : 'NPS$' TOKEN -> ^( 'NPS$' TOKEN ) ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal924=null;
        Token TOKEN925=null;

        Object string_literal924_tree=null;
        Object TOKEN925_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:585:9: ( 'NPS$' TOKEN -> ^( 'NPS$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:585:10: 'NPS$' TOKEN
            {
            string_literal924=(Token)match(input,185,FOLLOW_185_in_nps_poss5407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal924);

            TOKEN925=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss5409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN925);



            // AST REWRITE
            // elements: TOKEN, 185
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:23: -> ^( 'NPS$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:585:26: ^( 'NPS$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_185.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:588:1: nr : 'NR' TOKEN -> ^( 'NR' TOKEN ) ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal926=null;
        Token TOKEN927=null;

        Object string_literal926_tree=null;
        Object TOKEN927_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:588:3: ( 'NR' TOKEN -> ^( 'NR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:588:4: 'NR' TOKEN
            {
            string_literal926=(Token)match(input,186,FOLLOW_186_in_nr5424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal926);

            TOKEN927=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr5426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN927);



            // AST REWRITE
            // elements: TOKEN, 186
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:15: -> ^( 'NR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:588:18: ^( 'NR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_186.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:591:1: od : 'OD' TOKEN -> ^( 'OD' TOKEN ) ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal928=null;
        Token TOKEN929=null;

        Object string_literal928_tree=null;
        Object TOKEN929_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:591:3: ( 'OD' TOKEN -> ^( 'OD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:591:4: 'OD' TOKEN
            {
            string_literal928=(Token)match(input,187,FOLLOW_187_in_od5441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal928);

            TOKEN929=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od5443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN929);



            // AST REWRITE
            // elements: TOKEN, 187
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:15: -> ^( 'OD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:591:18: ^( 'OD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_187.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:594:1: pn : 'PN' TOKEN -> ^( 'PN' TOKEN ) ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal930=null;
        Token TOKEN931=null;

        Object string_literal930_tree=null;
        Object TOKEN931_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:594:3: ( 'PN' TOKEN -> ^( 'PN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:594:4: 'PN' TOKEN
            {
            string_literal930=(Token)match(input,188,FOLLOW_188_in_pn5458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_188.add(string_literal930);

            TOKEN931=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn5460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN931);



            // AST REWRITE
            // elements: 188, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:15: -> ^( 'PN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:594:18: ^( 'PN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_188.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:1: pn_poss : 'PN$' TOKEN -> ^( 'PN$' TOKEN ) ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal932=null;
        Token TOKEN933=null;

        Object string_literal932_tree=null;
        Object TOKEN933_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:8: ( 'PN$' TOKEN -> ^( 'PN$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:9: 'PN$' TOKEN
            {
            string_literal932=(Token)match(input,189,FOLLOW_189_in_pn_poss5475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal932);

            TOKEN933=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss5477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN933);



            // AST REWRITE
            // elements: 189, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:21: -> ^( 'PN$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:24: ^( 'PN$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_189.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:1: pp_poss : 'PP$' TOKEN -> ^( 'PP$' TOKEN ) ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal934=null;
        Token TOKEN935=null;

        Object string_literal934_tree=null;
        Object TOKEN935_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:8: ( 'PP$' TOKEN -> ^( 'PP$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:9: 'PP$' TOKEN
            {
            string_literal934=(Token)match(input,190,FOLLOW_190_in_pp_poss5492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal934);

            TOKEN935=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss5494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN935);



            // AST REWRITE
            // elements: TOKEN, 190
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:21: -> ^( 'PP$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:24: ^( 'PP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_190.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:1: pp_poss_poss : 'PP$$' TOKEN -> ^( 'PP$$' TOKEN ) ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal936=null;
        Token TOKEN937=null;

        Object string_literal936_tree=null;
        Object TOKEN937_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:13: ( 'PP$$' TOKEN -> ^( 'PP$$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:14: 'PP$$' TOKEN
            {
            string_literal936=(Token)match(input,191,FOLLOW_191_in_pp_poss_poss5509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal936);

            TOKEN937=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss5511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN937);



            // AST REWRITE
            // elements: TOKEN, 191
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:27: -> ^( 'PP$$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:30: ^( 'PP$$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_191.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:606:1: ppl : 'PPL' TOKEN -> ^( 'PPL' TOKEN ) ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal938=null;
        Token TOKEN939=null;

        Object string_literal938_tree=null;
        Object TOKEN939_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:606:4: ( 'PPL' TOKEN -> ^( 'PPL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:606:5: 'PPL' TOKEN
            {
            string_literal938=(Token)match(input,192,FOLLOW_192_in_ppl5526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_192.add(string_literal938);

            TOKEN939=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl5528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN939);



            // AST REWRITE
            // elements: 192, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:17: -> ^( 'PPL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:606:20: ^( 'PPL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_192.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:609:1: ppls : 'PPLS' TOKEN -> ^( 'PPLS' TOKEN ) ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal940=null;
        Token TOKEN941=null;

        Object string_literal940_tree=null;
        Object TOKEN941_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:609:5: ( 'PPLS' TOKEN -> ^( 'PPLS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:609:6: 'PPLS' TOKEN
            {
            string_literal940=(Token)match(input,193,FOLLOW_193_in_ppls5543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal940);

            TOKEN941=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls5545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN941);



            // AST REWRITE
            // elements: TOKEN, 193
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 609:19: -> ^( 'PPLS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:609:22: ^( 'PPLS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_193.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:611:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal942=null;
        Token TOKEN943=null;

        Object string_literal942_tree=null;
        Object TOKEN943_tree=null;
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:611:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:611:5: 'PRP' TOKEN
            {
            string_literal942=(Token)match(input,194,FOLLOW_194_in_prp5559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_194.add(string_literal942);

            TOKEN943=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN943);



            // AST REWRITE
            // elements: TOKEN, 194
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 611:17: -> ^( 'PRP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:611:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_194.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:614:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal944=null;
        Token TOKEN945=null;

        Object string_literal944_tree=null;
        Object TOKEN945_tree=null;
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:614:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:614:10: 'PRP$' TOKEN
            {
            string_literal944=(Token)match(input,195,FOLLOW_195_in_prp_poss5576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_195.add(string_literal944);

            TOKEN945=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN945);



            // AST REWRITE
            // elements: TOKEN, 195
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 614:23: -> ^( 'PRP$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:614:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_195.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:616:1: ppo : 'PPO' TOKEN -> ^( 'PPO' TOKEN ) ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal946=null;
        Token TOKEN947=null;

        Object string_literal946_tree=null;
        Object TOKEN947_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:616:4: ( 'PPO' TOKEN -> ^( 'PPO' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:616:5: 'PPO' TOKEN
            {
            string_literal946=(Token)match(input,196,FOLLOW_196_in_ppo5592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal946);

            TOKEN947=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo5594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN947);



            // AST REWRITE
            // elements: 196, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:17: -> ^( 'PPO' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:616:20: ^( 'PPO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_196.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:619:1: pps : 'PPS' TOKEN -> ^( 'PPS' TOKEN ) ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal948=null;
        Token TOKEN949=null;

        Object string_literal948_tree=null;
        Object TOKEN949_tree=null;
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:619:4: ( 'PPS' TOKEN -> ^( 'PPS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:619:5: 'PPS' TOKEN
            {
            string_literal948=(Token)match(input,197,FOLLOW_197_in_pps5609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(string_literal948);

            TOKEN949=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps5611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN949);



            // AST REWRITE
            // elements: 197, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 619:17: -> ^( 'PPS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:619:20: ^( 'PPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_197.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:622:1: ppss : 'PPSS' TOKEN -> ^( 'PPSS' TOKEN ) ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal950=null;
        Token TOKEN951=null;

        Object string_literal950_tree=null;
        Object TOKEN951_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:622:5: ( 'PPSS' TOKEN -> ^( 'PPSS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:622:6: 'PPSS' TOKEN
            {
            string_literal950=(Token)match(input,198,FOLLOW_198_in_ppss5626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal950);

            TOKEN951=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss5628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN951);



            // AST REWRITE
            // elements: TOKEN, 198
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 622:19: -> ^( 'PPSS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:622:22: ^( 'PPSS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_198.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:625:1: ql : 'QL' TOKEN -> ^( 'QL' TOKEN ) ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal952=null;
        Token TOKEN953=null;

        Object string_literal952_tree=null;
        Object TOKEN953_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:625:3: ( 'QL' TOKEN -> ^( 'QL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:625:4: 'QL' TOKEN
            {
            string_literal952=(Token)match(input,199,FOLLOW_199_in_ql5643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_199.add(string_literal952);

            TOKEN953=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql5645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN953);



            // AST REWRITE
            // elements: TOKEN, 199
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 625:15: -> ^( 'QL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:625:18: ^( 'QL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_199.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:628:1: qlp : 'QLP' TOKEN -> ^( 'QLP' TOKEN ) ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal954=null;
        Token TOKEN955=null;

        Object string_literal954_tree=null;
        Object TOKEN955_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:628:4: ( 'QLP' TOKEN -> ^( 'QLP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:628:5: 'QLP' TOKEN
            {
            string_literal954=(Token)match(input,200,FOLLOW_200_in_qlp5660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_200.add(string_literal954);

            TOKEN955=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp5662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN955);



            // AST REWRITE
            // elements: TOKEN, 200
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:17: -> ^( 'QLP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:628:20: ^( 'QLP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_200.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:631:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal956=null;
        Token TOKEN957=null;

        Object string_literal956_tree=null;
        Object TOKEN957_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:631:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:631:4: 'RB' TOKEN
            {
            string_literal956=(Token)match(input,201,FOLLOW_201_in_rb5677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_201.add(string_literal956);

            TOKEN957=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN957);



            // AST REWRITE
            // elements: 201, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 631:15: -> ^( 'RB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:631:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_201.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:634:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal958=null;
        Token TOKEN959=null;

        Object string_literal958_tree=null;
        Object TOKEN959_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:634:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:634:5: 'RBR' TOKEN
            {
            string_literal958=(Token)match(input,202,FOLLOW_202_in_rbr5694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_202.add(string_literal958);

            TOKEN959=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN959);



            // AST REWRITE
            // elements: TOKEN, 202
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:17: -> ^( 'RBR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:634:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_202.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:637:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal960=null;
        Token TOKEN961=null;

        Object string_literal960_tree=null;
        Object TOKEN961_tree=null;
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:637:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:637:8: 'RB-CONJ' TOKEN
            {
            string_literal960=(Token)match(input,203,FOLLOW_203_in_rbconj5711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_203.add(string_literal960);

            TOKEN961=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj5713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN961);



            // AST REWRITE
            // elements: 203, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 637:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:637:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_203.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:640:1: rbt : 'RBT' TOKEN -> ^( 'RBT' TOKEN ) ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal962=null;
        Token TOKEN963=null;

        Object string_literal962_tree=null;
        Object TOKEN963_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:640:4: ( 'RBT' TOKEN -> ^( 'RBT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:640:5: 'RBT' TOKEN
            {
            string_literal962=(Token)match(input,204,FOLLOW_204_in_rbt5728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_204.add(string_literal962);

            TOKEN963=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt5730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN963);



            // AST REWRITE
            // elements: TOKEN, 204
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 640:17: -> ^( 'RBT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:640:20: ^( 'RBT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_204.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:643:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal964=null;
        Token TOKEN965=null;

        Object string_literal964_tree=null;
        Object TOKEN965_tree=null;
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:643:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:643:5: 'RBS' TOKEN
            {
            string_literal964=(Token)match(input,205,FOLLOW_205_in_rbs5745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_205.add(string_literal964);

            TOKEN965=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5747); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN965);



            // AST REWRITE
            // elements: TOKEN, 205
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 643:17: -> ^( 'RBS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:643:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_205.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:647:1: rn : 'RN' TOKEN -> ^( 'RN' TOKEN ) ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal966=null;
        Token TOKEN967=null;

        Object string_literal966_tree=null;
        Object TOKEN967_tree=null;
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:647:3: ( 'RN' TOKEN -> ^( 'RN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:647:4: 'RN' TOKEN
            {
            string_literal966=(Token)match(input,206,FOLLOW_206_in_rn5763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_206.add(string_literal966);

            TOKEN967=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn5765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN967);



            // AST REWRITE
            // elements: 206, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 647:15: -> ^( 'RN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:647:18: ^( 'RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_206.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:650:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal968=null;
        Token TOKEN969=null;

        Object string_literal968_tree=null;
        Object TOKEN969_tree=null;
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:650:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:650:4: 'RP' TOKEN
            {
            string_literal968=(Token)match(input,207,FOLLOW_207_in_rp5780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_207.add(string_literal968);

            TOKEN969=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN969);



            // AST REWRITE
            // elements: 207, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:15: -> ^( 'RP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:650:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_207.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:653:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal970=null;
        Token TOKEN971=null;

        Object string_literal970_tree=null;
        Object TOKEN971_tree=null;
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:653:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:653:5: 'SYM' TOKEN
            {
            string_literal970=(Token)match(input,208,FOLLOW_208_in_sym5797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_208.add(string_literal970);

            TOKEN971=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN971);



            // AST REWRITE
            // elements: TOKEN, 208
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 653:17: -> ^( 'SYM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:653:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_208.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:656:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal972=null;
        Token TOKEN973=null;

        Object string_literal972_tree=null;
        Object TOKEN973_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:656:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:656:4: 'TO' TOKEN
            {
            string_literal972=(Token)match(input,209,FOLLOW_209_in_to5814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_209.add(string_literal972);

            TOKEN973=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN973);



            // AST REWRITE
            // elements: 209, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:15: -> ^( 'TO' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:656:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_209.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:659:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal974=null;
        Token TOKEN975=null;

        Object string_literal974_tree=null;
        Object TOKEN975_tree=null;
        RewriteRuleTokenStream stream_210=new RewriteRuleTokenStream(adaptor,"token 210");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:659:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:659:4: 'UH' TOKEN
            {
            string_literal974=(Token)match(input,210,FOLLOW_210_in_uh5831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_210.add(string_literal974);

            TOKEN975=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN975);



            // AST REWRITE
            // elements: 210, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 659:15: -> ^( 'UH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:659:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_210.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:662:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal976=null;
        Token TOKEN977=null;

        Object string_literal976_tree=null;
        Object TOKEN977_tree=null;
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:662:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:662:4: 'VB' TOKEN
            {
            string_literal976=(Token)match(input,211,FOLLOW_211_in_vb5848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_211.add(string_literal976);

            TOKEN977=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN977);



            // AST REWRITE
            // elements: 211, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 662:15: -> ^( 'VB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:662:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_211.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:664:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal978=null;
        Token TOKEN979=null;

        Object string_literal978_tree=null;
        Object TOKEN979_tree=null;
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:664:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:664:5: 'VBP' TOKEN
            {
            string_literal978=(Token)match(input,212,FOLLOW_212_in_vbp5864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_212.add(string_literal978);

            TOKEN979=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN979);



            // AST REWRITE
            // elements: TOKEN, 212
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 664:17: -> ^( 'VBP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:664:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_212.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:667:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal980=null;
        Token TOKEN981=null;

        Object string_literal980_tree=null;
        Object TOKEN981_tree=null;
        RewriteRuleTokenStream stream_213=new RewriteRuleTokenStream(adaptor,"token 213");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:667:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:667:5: 'VBD' TOKEN
            {
            string_literal980=(Token)match(input,213,FOLLOW_213_in_vbd5881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_213.add(string_literal980);

            TOKEN981=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN981);



            // AST REWRITE
            // elements: 213, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 667:17: -> ^( 'VBD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:667:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_213.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:670:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal982=null;
        Token TOKEN983=null;

        Object string_literal982_tree=null;
        Object TOKEN983_tree=null;
        RewriteRuleTokenStream stream_214=new RewriteRuleTokenStream(adaptor,"token 214");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:670:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:670:5: 'VBG' TOKEN
            {
            string_literal982=(Token)match(input,214,FOLLOW_214_in_vbg5898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_214.add(string_literal982);

            TOKEN983=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN983);



            // AST REWRITE
            // elements: 214, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 670:17: -> ^( 'VBG' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:670:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_214.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:673:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal984=null;
        Token TOKEN985=null;

        Object string_literal984_tree=null;
        Object TOKEN985_tree=null;
        RewriteRuleTokenStream stream_215=new RewriteRuleTokenStream(adaptor,"token 215");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:673:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:673:5: 'VBN' TOKEN
            {
            string_literal984=(Token)match(input,215,FOLLOW_215_in_vbn5915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_215.add(string_literal984);

            TOKEN985=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN985);



            // AST REWRITE
            // elements: TOKEN, 215
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:17: -> ^( 'VBN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:673:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_215.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:676:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal986=null;
        Token TOKEN987=null;

        Object string_literal986_tree=null;
        Object TOKEN987_tree=null;
        RewriteRuleTokenStream stream_216=new RewriteRuleTokenStream(adaptor,"token 216");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:676:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:676:5: 'VBZ' TOKEN
            {
            string_literal986=(Token)match(input,216,FOLLOW_216_in_vbz5932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_216.add(string_literal986);

            TOKEN987=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN987);



            // AST REWRITE
            // elements: TOKEN, 216
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:17: -> ^( 'VBZ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:676:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_216.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:679:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal988=null;
        Token TOKEN989=null;

        Object string_literal988_tree=null;
        Object TOKEN989_tree=null;
        RewriteRuleTokenStream stream_217=new RewriteRuleTokenStream(adaptor,"token 217");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:679:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:679:5: 'WDT' TOKEN
            {
            string_literal988=(Token)match(input,217,FOLLOW_217_in_wdt5949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_217.add(string_literal988);

            TOKEN989=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN989);



            // AST REWRITE
            // elements: TOKEN, 217
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 679:17: -> ^( 'WDT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:679:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_217.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:682:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal990=null;
        Token TOKEN991=null;

        Object string_literal990_tree=null;
        Object TOKEN991_tree=null;
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:682:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:682:9: 'WP$' TOKEN
            {
            string_literal990=(Token)match(input,218,FOLLOW_218_in_wp_poss5966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_218.add(string_literal990);

            TOKEN991=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN991);



            // AST REWRITE
            // elements: TOKEN, 218
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 682:21: -> ^( 'WP$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:682:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_218.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:686:1: wpo : 'WPO' TOKEN -> ^( 'WPO' TOKEN ) ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal992=null;
        Token TOKEN993=null;

        Object string_literal992_tree=null;
        Object TOKEN993_tree=null;
        RewriteRuleTokenStream stream_219=new RewriteRuleTokenStream(adaptor,"token 219");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:686:4: ( 'WPO' TOKEN -> ^( 'WPO' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:686:5: 'WPO' TOKEN
            {
            string_literal992=(Token)match(input,219,FOLLOW_219_in_wpo5984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_219.add(string_literal992);

            TOKEN993=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo5986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN993);



            // AST REWRITE
            // elements: TOKEN, 219
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 686:17: -> ^( 'WPO' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:686:20: ^( 'WPO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_219.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:689:1: wps : 'WPS' TOKEN -> ^( 'WPS' TOKEN ) ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal994=null;
        Token TOKEN995=null;

        Object string_literal994_tree=null;
        Object TOKEN995_tree=null;
        RewriteRuleTokenStream stream_220=new RewriteRuleTokenStream(adaptor,"token 220");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:689:4: ( 'WPS' TOKEN -> ^( 'WPS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:689:5: 'WPS' TOKEN
            {
            string_literal994=(Token)match(input,220,FOLLOW_220_in_wps6001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_220.add(string_literal994);

            TOKEN995=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps6003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN995);



            // AST REWRITE
            // elements: 220, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 689:17: -> ^( 'WPS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:689:20: ^( 'WPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_220.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:692:1: wql : 'WQL' TOKEN -> ^( 'WQL' TOKEN ) ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal996=null;
        Token TOKEN997=null;

        Object string_literal996_tree=null;
        Object TOKEN997_tree=null;
        RewriteRuleTokenStream stream_221=new RewriteRuleTokenStream(adaptor,"token 221");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:692:4: ( 'WQL' TOKEN -> ^( 'WQL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:692:5: 'WQL' TOKEN
            {
            string_literal996=(Token)match(input,221,FOLLOW_221_in_wql6018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_221.add(string_literal996);

            TOKEN997=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql6020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN997);



            // AST REWRITE
            // elements: 221, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:17: -> ^( 'WQL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:692:20: ^( 'WQL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_221.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:695:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal998=null;
        Token TOKEN999=null;

        Object string_literal998_tree=null;
        Object TOKEN999_tree=null;
        RewriteRuleTokenStream stream_222=new RewriteRuleTokenStream(adaptor,"token 222");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:695:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:695:5: 'WRB' TOKEN
            {
            string_literal998=(Token)match(input,222,FOLLOW_222_in_wrb6035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_222.add(string_literal998);

            TOKEN999=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb6037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN999);



            // AST REWRITE
            // elements: 222, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 695:17: -> ^( 'WRB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:695:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_222.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:697:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal1000=null;
        Token TOKEN1001=null;

        Object string_literal1000_tree=null;
        Object TOKEN1001_tree=null;
        RewriteRuleTokenStream stream_223=new RewriteRuleTokenStream(adaptor,"token 223");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:697:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:697:5: 'PDT' TOKEN
            {
            string_literal1000=(Token)match(input,223,FOLLOW_223_in_pdt6051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_223.add(string_literal1000);

            TOKEN1001=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt6053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1001);



            // AST REWRITE
            // elements: 223, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 697:17: -> ^( 'PDT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:697:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_223.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:14: ( sentenceStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker303);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:32: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker305);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:54: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:54: comma
        {
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker313);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:22: ( nounphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker326);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:33: ( verbphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker328);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:44: ( prepphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker330);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:55: ( prepphraseAfter )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker332);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:74: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred10_ChemicalChunker337);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:81: ( colon )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred11_ChemicalChunker339);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:91: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:91: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred12_ChemicalChunker345);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:103: ( rbconj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:63:103: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred13_ChemicalChunker347);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:5: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred14_ChemicalChunker380);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:8: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred15_ChemicalChunker382);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred16_ChemicalChunker
    public final void synpred16_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:13: ( tmunicode )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:13: tmunicode
        {
        pushFollow(FOLLOW_tmunicode_in_synpred16_ChemicalChunker384);
        tmunicode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:23: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred17_ChemicalChunker386);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:34: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:34: dt
        {
        pushFollow(FOLLOW_dt_in_synpred19_ChemicalChunker390);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:43: ( oscarcd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:43: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred21_ChemicalChunker394);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:51: ( oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:51: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred22_ChemicalChunker396);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred23_ChemicalChunker
    public final void synpred23_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:59: ( oscarrn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:59: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred23_ChemicalChunker398);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_ChemicalChunker

    // $ANTLR start synpred24_ChemicalChunker
    public final void synpred24_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:67: ( oscaront )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:67: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred24_ChemicalChunker400);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_ChemicalChunker

    // $ANTLR start synpred25_ChemicalChunker
    public final void synpred25_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:76: ( brackets )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:76: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred25_ChemicalChunker402);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_ChemicalChunker

    // $ANTLR start synpred26_ChemicalChunker
    public final void synpred26_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:85: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:85: sym
        {
        pushFollow(FOLLOW_sym_in_synpred26_ChemicalChunker404);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:102: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:102: number
        {
        pushFollow(FOLLOW_number_in_synpred30_ChemicalChunker412);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:109: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred31_ChemicalChunker414);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:115: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:70:115: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred32_ChemicalChunker416);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:78:4: ( nounphraseStructure1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:78:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred34_ChemicalChunker455);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:11: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred36_ChemicalChunker489);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:15: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred37_ChemicalChunker492);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:25: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred38_ChemicalChunker497);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:40: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:40: noun
        {
        pushFollow(FOLLOW_noun_in_synpred39_ChemicalChunker499);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:45: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:45: number
        {
        pushFollow(FOLLOW_number_in_synpred40_ChemicalChunker501);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:52: ( ratio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:52: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred41_ChemicalChunker503);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:64: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred42_ChemicalChunker511);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred43_ChemicalChunker
    public final void synpred43_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:77: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:77: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred43_ChemicalChunker514);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_ChemicalChunker

    // $ANTLR start synpred44_ChemicalChunker
    public final void synpred44_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:86: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:86: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred44_ChemicalChunker518);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:101: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:101: noun
        {
        pushFollow(FOLLOW_noun_in_synpred45_ChemicalChunker520);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred46_ChemicalChunker
    public final void synpred46_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:106: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:106: number
        {
        pushFollow(FOLLOW_number_in_synpred46_ChemicalChunker522);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_ChemicalChunker

    // $ANTLR start synpred47_ChemicalChunker
    public final void synpred47_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:64: ( conjunction )*
        loop168:
        do {
            int alt168=2;
            alt168 = dfa168.predict(input);
            switch (alt168) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred47_ChemicalChunker511);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop168;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:77: ( advAdj )*
        loop169:
        do {
            int alt169=2;
            alt169 = dfa169.predict(input);
            switch (alt169) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred47_ChemicalChunker514);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop169;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:85: ( dissolvePhrase | noun | number | ratio )
        int alt170=4;
        alt170 = dfa170.predict(input);
        switch (alt170) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:86: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred47_ChemicalChunker518);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:101: noun
                {
                pushFollow(FOLLOW_noun_in_synpred47_ChemicalChunker520);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:106: number
                {
                pushFollow(FOLLOW_number_in_synpred47_ChemicalChunker522);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:113: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred47_ChemicalChunker524);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred47_ChemicalChunker

    // $ANTLR start synpred49_ChemicalChunker
    public final void synpred49_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:155: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:155: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred49_ChemicalChunker540);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_ChemicalChunker

    // $ANTLR start synpred50_ChemicalChunker
    public final void synpred50_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:126: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:126: ( prepphraseOf | prepphraseIN )
        int alt171=2;
        switch ( input.LA(1) ) {
        case 54:
            {
            alt171=1;
            }
            break;
        case 48:
            {
            alt171=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 171, 0, input);

            throw nvae;
        }

        switch (alt171) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:127: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred50_ChemicalChunker534);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:141: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred50_ChemicalChunker537);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:155: ( dissolvePhrase )?
        int alt172=2;
        switch ( input.LA(1) ) {
            case 36:
            case 37:
            case 38:
            case 39:
            case 43:
            case 44:
            case 65:
            case 81:
            case 129:
            case 137:
            case 153:
            case 171:
            case 172:
            case 173:
            case 174:
            case 182:
                {
                alt172=1;
                }
                break;
        }

        switch (alt172) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred50_ChemicalChunker540);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred50_ChemicalChunker

    // $ANTLR start synpred51_ChemicalChunker
    public final void synpred51_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:5: ( dissolveStructure1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:5: dissolveStructure1
        {
        pushFollow(FOLLOW_dissolveStructure1_in_synpred51_ChemicalChunker555);
        dissolveStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_ChemicalChunker

    // $ANTLR start synpred52_ChemicalChunker
    public final void synpred52_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:24: ( dissolveStructure2 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:84:24: dissolveStructure2
        {
        pushFollow(FOLLOW_dissolveStructure2_in_synpred52_ChemicalChunker557);
        dissolveStructure2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_ChemicalChunker

    // $ANTLR start synpred53_ChemicalChunker
    public final void synpred53_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:8: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:8: adj
        {
        pushFollow(FOLLOW_adj_in_synpred53_ChemicalChunker587);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_ChemicalChunker

    // $ANTLR start synpred55_ChemicalChunker
    public final void synpred55_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:19: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:19: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred55_ChemicalChunker594);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_ChemicalChunker

    // $ANTLR start synpred57_ChemicalChunker
    public final void synpred57_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:58: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:58: adj
        {
        pushFollow(FOLLOW_adj_in_synpred57_ChemicalChunker605);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_ChemicalChunker

    // $ANTLR start synpred59_ChemicalChunker
    public final void synpred59_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:69: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:69: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred59_ChemicalChunker612);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_ChemicalChunker

    // $ANTLR start synpred62_ChemicalChunker
    public final void synpred62_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:4: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred62_ChemicalChunker635);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_ChemicalChunker

    // $ANTLR start synpred64_ChemicalChunker
    public final void synpred64_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:15: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:15: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred64_ChemicalChunker642);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_ChemicalChunker

    // $ANTLR start synpred66_ChemicalChunker
    public final void synpred66_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:54: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:54: adj
        {
        pushFollow(FOLLOW_adj_in_synpred66_ChemicalChunker653);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_ChemicalChunker

    // $ANTLR start synpred68_ChemicalChunker
    public final void synpred68_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:65: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:65: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred68_ChemicalChunker660);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_ChemicalChunker

    // $ANTLR start synpred69_ChemicalChunker
    public final void synpred69_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:92: ( conjunction molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:92: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred69_ChemicalChunker666);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred69_ChemicalChunker668);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_ChemicalChunker

    // $ANTLR start synpred70_ChemicalChunker
    public final void synpred70_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:42: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred70_ChemicalChunker648);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:47: ( dtTHE )?
        int alt178=2;
        switch ( input.LA(1) ) {
            case 159:
                {
                alt178=1;
                }
                break;
        }

        switch (alt178) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred70_ChemicalChunker650);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:54: ( adj )?
        int alt179=2;
        alt179 = dfa179.predict(input);
        switch (alt179) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred70_ChemicalChunker653);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:59: ( nnp )?
        int alt180=2;
        switch ( input.LA(1) ) {
            case 182:
                {
                alt180=1;
                }
                break;
        }

        switch (alt180) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred70_ChemicalChunker656);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:64: ( molecule | unnamedmolecule )
        int alt181=2;
        alt181 = dfa181.predict(input);
        switch (alt181) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:65: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred70_ChemicalChunker660);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:74: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred70_ChemicalChunker662);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:91: ( conjunction molecule )*
        loop182:
        do {
            int alt182=2;
            switch ( input.LA(1) ) {
            case 129:
            case 152:
                {
                alt182=1;
                }
                break;

            }

            switch (alt182) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:92: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred70_ChemicalChunker666);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred70_ChemicalChunker668);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop182;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred70_ChemicalChunker

    // $ANTLR start synpred72_ChemicalChunker
    public final void synpred72_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:14: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:14: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred72_ChemicalChunker688);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_ChemicalChunker

    // $ANTLR start synpred73_ChemicalChunker
    public final void synpred73_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:23: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:23: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred73_ChemicalChunker690);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_ChemicalChunker

    // $ANTLR start synpred75_ChemicalChunker
    public final void synpred75_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:66: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:66: adj
        {
        pushFollow(FOLLOW_adj_in_synpred75_ChemicalChunker701);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_ChemicalChunker

    // $ANTLR start synpred77_ChemicalChunker
    public final void synpred77_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:77: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:77: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred77_ChemicalChunker708);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_ChemicalChunker

    // $ANTLR start synpred78_ChemicalChunker
    public final void synpred78_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:104: ( conjunction molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:104: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred78_ChemicalChunker714);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred78_ChemicalChunker716);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred78_ChemicalChunker

    // $ANTLR start synpred79_ChemicalChunker
    public final void synpred79_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:54: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred79_ChemicalChunker696);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:59: ( dtTHE )?
        int alt183=2;
        switch ( input.LA(1) ) {
            case 159:
                {
                alt183=1;
                }
                break;
        }

        switch (alt183) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred79_ChemicalChunker698);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:66: ( adj )?
        int alt184=2;
        alt184 = dfa184.predict(input);
        switch (alt184) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred79_ChemicalChunker701);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:71: ( nnp )?
        int alt185=2;
        switch ( input.LA(1) ) {
            case 182:
                {
                alt185=1;
                }
                break;
        }

        switch (alt185) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred79_ChemicalChunker704);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:76: ( molecule | unnamedmolecule )
        int alt186=2;
        alt186 = dfa186.predict(input);
        switch (alt186) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:77: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred79_ChemicalChunker708);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:86: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred79_ChemicalChunker710);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:103: ( conjunction molecule )*
        loop187:
        do {
            int alt187=2;
            switch ( input.LA(1) ) {
            case 129:
            case 152:
                {
                alt187=1;
                }
                break;

            }

            switch (alt187) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:104: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred79_ChemicalChunker714);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred79_ChemicalChunker716);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop187;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred79_ChemicalChunker

    // $ANTLR start synpred82_ChemicalChunker
    public final void synpred82_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:28: ( to )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:28: to
        {
        pushFollow(FOLLOW_to_in_synpred82_ChemicalChunker768);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_ChemicalChunker

    // $ANTLR start synpred83_ChemicalChunker
    public final void synpred83_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:32: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred83_ChemicalChunker771);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:71: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred89_ChemicalChunker790);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:77: ( md )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:77: md
        {
        pushFollow(FOLLOW_md_in_synpred90_ChemicalChunker793);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:81: ( adv )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred91_ChemicalChunker796);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:86: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred92_ChemicalChunker799);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:91: ( neg )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred93_ChemicalChunker802);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:49: ( md )*
        loop188:
        do {
            int alt188=2;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt188=1;
                }
                break;

            }

            switch (alt188) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred94_ChemicalChunker778);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop188;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:53: ( rbconj )?
        int alt189=2;
        switch ( input.LA(1) ) {
            case 203:
                {
                alt189=1;
                }
                break;
        }

        switch (alt189) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred94_ChemicalChunker781);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:61: ( adv )*
        loop190:
        do {
            int alt190=2;
            switch ( input.LA(1) ) {
            case 201:
            case 202:
            case 204:
            case 205:
            case 207:
                {
                alt190=1;
                }
                break;

            }

            switch (alt190) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred94_ChemicalChunker784);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop190;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:66: ( adj )?
        int alt191=2;
        switch ( input.LA(1) ) {
            case 37:
            case 38:
            case 43:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt191=1;
                }
                break;
        }

        switch (alt191) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred94_ChemicalChunker787);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:71: ( verb )+
        int cnt192=0;
        loop192:
        do {
            int alt192=2;
            switch ( input.LA(1) ) {
            case 82:
            case 83:
            case 84:
            case 85:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 98:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 107:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 125:
            case 126:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
                {
                alt192=1;
                }
                break;

            }

            switch (alt192) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred94_ChemicalChunker790);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt192 >= 1 ) break loop192;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(192, input);
                    throw eee;
            }
            cnt192++;
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:77: ( md )*
        loop193:
        do {
            int alt193=2;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt193=1;
                }
                break;

            }

            switch (alt193) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred94_ChemicalChunker793);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop193;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:81: ( adv )*
        loop194:
        do {
            int alt194=2;
            switch ( input.LA(1) ) {
            case 201:
            case 202:
            case 204:
            case 205:
            case 207:
                {
                alt194=1;
                }
                break;

            }

            switch (alt194) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred94_ChemicalChunker796);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop194;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:86: ( adj )?
        int alt195=2;
        switch ( input.LA(1) ) {
            case 37:
            case 38:
            case 43:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt195=1;
                }
                break;
        }

        switch (alt195) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred94_ChemicalChunker799);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:91: ( neg )?
        int alt196=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt196=1;
                }
                break;
        }

        switch (alt196) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred94_ChemicalChunker802);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:99: ( inoff )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred95_ChemicalChunker808);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:107: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:107: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:107: ( cc )?
        int alt197=2;
        switch ( input.LA(1) ) {
            case 152:
                {
                alt197=1;
                }
                break;
        }

        switch (alt197) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred98_ChemicalChunker812);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:111: ( comma )?
        int alt198=2;
        switch ( input.LA(1) ) {
            case 129:
                {
                alt198=1;
                }
                break;
        }

        switch (alt198) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred98_ChemicalChunker815);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred98_ChemicalChunker818);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:58: ( degassMultiVerb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred108_ChemicalChunker848);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:183: ( vbdegass )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred121_ChemicalChunker874);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred143_ChemicalChunker
    public final void synpred143_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:22: ( wpo )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred143_ChemicalChunker947);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:26: ( wpo )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred144_ChemicalChunker949);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred149_ChemicalChunker
    public final void synpred149_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:24: ( dash nounStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred149_ChemicalChunker970);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred149_ChemicalChunker972);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:31: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred152_ChemicalChunker987);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred153_ChemicalChunker
    public final void synpred153_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:40: ( cycles )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred153_ChemicalChunker989);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_ChemicalChunker

    // $ANTLR start synpred154_ChemicalChunker
    public final void synpred154_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:47: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred154_ChemicalChunker991);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_ChemicalChunker

    // $ANTLR start synpred155_ChemicalChunker
    public final void synpred155_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:56: ( apparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred155_ChemicalChunker993);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_ChemicalChunker

    // $ANTLR start synpred156_ChemicalChunker
    public final void synpred156_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:66: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred156_ChemicalChunker995);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_ChemicalChunker

    // $ANTLR start synpred157_ChemicalChunker
    public final void synpred157_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:74: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred157_ChemicalChunker997);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_ChemicalChunker

    // $ANTLR start synpred159_ChemicalChunker
    public final void synpred159_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:98: ( nnstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred159_ChemicalChunker1001);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_ChemicalChunker

    // $ANTLR start synpred160_ChemicalChunker
    public final void synpred160_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:106: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:106: nn
        {
        pushFollow(FOLLOW_nn_in_synpred160_ChemicalChunker1003);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_ChemicalChunker

    // $ANTLR start synpred163_ChemicalChunker
    public final void synpred163_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:117: ( nnadd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:117: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred163_ChemicalChunker1009);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_ChemicalChunker

    // $ANTLR start synpred166_ChemicalChunker
    public final void synpred166_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:151: ( oscarcpr )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:151: oscarcpr
        {
        pushFollow(FOLLOW_oscarcpr_in_synpred166_ChemicalChunker1015);
        oscarcpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:160: ( range )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:160: range
        {
        pushFollow(FOLLOW_range_in_synpred167_ChemicalChunker1017);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred168_ChemicalChunker
    public final void synpred168_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:166: ( amount )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:166: amount
        {
        pushFollow(FOLLOW_amount_in_synpred168_ChemicalChunker1019);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred168_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:208: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:208: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred173_ChemicalChunker1029);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:217: ( nnchementity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:217: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred174_ChemicalChunker1031);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:230: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:230: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred175_ChemicalChunker1033);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:286: ( nnpressure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:286: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred181_ChemicalChunker1045);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:377: ( wdt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:377: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred190_ChemicalChunker1063);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:381: ( wp_poss )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:381: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred191_ChemicalChunker1065);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:389: ( wpo )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:389: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred192_ChemicalChunker1067);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:393: ( wps )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:393: wps
        {
        pushFollow(FOLLOW_wps_in_synpred193_ChemicalChunker1069);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:445: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:445: number
        {
        pushFollow(FOLLOW_number_in_synpred199_ChemicalChunker1081);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:452: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:112:452: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred200_ChemicalChunker1083);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:10: ( numberratio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:117:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred214_ChemicalChunker1176);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred215_ChemicalChunker
    public final void synpred215_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:20: ( colon oscarcd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:20: colon oscarcd
        {
        pushFollow(FOLLOW_colon_in_synpred215_ChemicalChunker1204);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcd_in_synpred215_ChemicalChunker1206);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_ChemicalChunker

    // $ANTLR start synpred216_ChemicalChunker
    public final void synpred216_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:34: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:34: cd
        {
        pushFollow(FOLLOW_cd_in_synpred216_ChemicalChunker1208);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_ChemicalChunker

    // $ANTLR start synpred217_ChemicalChunker
    public final void synpred217_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:120:12: ( colon noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:120:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred217_ChemicalChunker1225);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred217_ChemicalChunker1227);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:20: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred230_ChemicalChunker1424);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:23: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred231_ChemicalChunker1426);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:28: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred232_ChemicalChunker1428);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:31: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:31: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred233_ChemicalChunker1430);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred236_ChemicalChunker
    public final void synpred236_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:57: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:57: stop
        {
        pushFollow(FOLLOW_stop_in_synpred236_ChemicalChunker1436);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_ChemicalChunker

    // $ANTLR start synpred237_ChemicalChunker
    public final void synpred237_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:62: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:62: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred237_ChemicalChunker1438);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:76: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:76: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred238_ChemicalChunker1440);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:85: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:85: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred239_ChemicalChunker1442);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:106: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:106: sym
        {
        pushFollow(FOLLOW_sym_in_synpred241_ChemicalChunker1446);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred242_ChemicalChunker
    public final void synpred242_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:110: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:110: cd
        {
        pushFollow(FOLLOW_cd_in_synpred242_ChemicalChunker1448);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_ChemicalChunker

    // $ANTLR start synpred243_ChemicalChunker
    public final void synpred243_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:113: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:113: noun
        {
        pushFollow(FOLLOW_noun_in_synpred243_ChemicalChunker1450);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:118: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:118: inof
        {
        pushFollow(FOLLOW_inof_in_synpred244_ChemicalChunker1452);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:123: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:123: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred245_ChemicalChunker1454);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:129: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:129: cd
        {
        pushFollow(FOLLOW_cd_in_synpred246_ChemicalChunker1456);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred247_ChemicalChunker
    public final void synpred247_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:132: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:132: comma
        {
        pushFollow(FOLLOW_comma_in_synpred247_ChemicalChunker1458);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:138: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:138: adj
        {
        pushFollow(FOLLOW_adj_in_synpred248_ChemicalChunker1460);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:155: ( minimixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:155: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred250_ChemicalChunker1468);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:167: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:167: fw
        {
        pushFollow(FOLLOW_fw_in_synpred251_ChemicalChunker1470);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:170: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:170: verb
        {
        pushFollow(FOLLOW_verb_in_synpred252_ChemicalChunker1472);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:175: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:175: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred253_ChemicalChunker1474);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:188: ( nnyield )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:188: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred254_ChemicalChunker1476);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:209: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:209: stop
        {
        pushFollow(FOLLOW_stop_in_synpred257_ChemicalChunker1482);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:214: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:214: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred258_ChemicalChunker1484);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:228: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:228: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred259_ChemicalChunker1486);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:237: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:237: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred260_ChemicalChunker1488);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:258: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:258: sym
        {
        pushFollow(FOLLOW_sym_in_synpred262_ChemicalChunker1492);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:262: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:262: cd
        {
        pushFollow(FOLLOW_cd_in_synpred263_ChemicalChunker1494);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:265: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:265: noun
        {
        pushFollow(FOLLOW_noun_in_synpred264_ChemicalChunker1496);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:270: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:270: inof
        {
        pushFollow(FOLLOW_inof_in_synpred265_ChemicalChunker1498);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:275: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:275: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred266_ChemicalChunker1500);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:281: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:281: cd
        {
        pushFollow(FOLLOW_cd_in_synpred267_ChemicalChunker1502);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:284: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:284: comma
        {
        pushFollow(FOLLOW_comma_in_synpred268_ChemicalChunker1504);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:290: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:290: adj
        {
        pushFollow(FOLLOW_adj_in_synpred269_ChemicalChunker1506);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:300: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:300: stop
        {
        pushFollow(FOLLOW_stop_in_synpred271_ChemicalChunker1510);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:24: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:24: fw
        {
        pushFollow(FOLLOW_fw_in_synpred273_ChemicalChunker1571);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:27: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:27: nn
        {
        pushFollow(FOLLOW_nn_in_synpred274_ChemicalChunker1573);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:30: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:30: verb
        {
        pushFollow(FOLLOW_verb_in_synpred275_ChemicalChunker1575);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:35: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:35: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred276_ChemicalChunker1577);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:61: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:61: stop
        {
        pushFollow(FOLLOW_stop_in_synpred279_ChemicalChunker1583);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:66: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:66: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred280_ChemicalChunker1585);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:80: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:80: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred281_ChemicalChunker1587);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:89: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:89: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred282_ChemicalChunker1589);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:110: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:110: sym
        {
        pushFollow(FOLLOW_sym_in_synpred284_ChemicalChunker1593);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:114: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:114: cd
        {
        pushFollow(FOLLOW_cd_in_synpred285_ChemicalChunker1595);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:117: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:117: noun
        {
        pushFollow(FOLLOW_noun_in_synpred286_ChemicalChunker1597);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:122: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:122: inof
        {
        pushFollow(FOLLOW_inof_in_synpred287_ChemicalChunker1599);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:127: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:127: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred288_ChemicalChunker1601);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:133: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:133: cd
        {
        pushFollow(FOLLOW_cd_in_synpred289_ChemicalChunker1603);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:136: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:136: comma
        {
        pushFollow(FOLLOW_comma_in_synpred290_ChemicalChunker1605);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:142: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:142: adj
        {
        pushFollow(FOLLOW_adj_in_synpred291_ChemicalChunker1607);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:159: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:159: fw
        {
        pushFollow(FOLLOW_fw_in_synpred293_ChemicalChunker1615);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:162: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:162: verb
        {
        pushFollow(FOLLOW_verb_in_synpred294_ChemicalChunker1617);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:167: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:167: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred295_ChemicalChunker1619);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:180: ( nnyield )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:180: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred296_ChemicalChunker1621);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:201: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:201: stop
        {
        pushFollow(FOLLOW_stop_in_synpred299_ChemicalChunker1627);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:206: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:206: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred300_ChemicalChunker1629);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:220: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:220: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred301_ChemicalChunker1631);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:229: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:229: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred302_ChemicalChunker1633);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:250: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:250: sym
        {
        pushFollow(FOLLOW_sym_in_synpred304_ChemicalChunker1637);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:254: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:254: cd
        {
        pushFollow(FOLLOW_cd_in_synpred305_ChemicalChunker1639);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:257: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:257: noun
        {
        pushFollow(FOLLOW_noun_in_synpred306_ChemicalChunker1641);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:262: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:262: inof
        {
        pushFollow(FOLLOW_inof_in_synpred307_ChemicalChunker1643);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:267: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:267: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred308_ChemicalChunker1645);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:273: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:273: cd
        {
        pushFollow(FOLLOW_cd_in_synpred309_ChemicalChunker1647);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:276: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:276: comma
        {
        pushFollow(FOLLOW_comma_in_synpred310_ChemicalChunker1649);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:282: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:282: adj
        {
        pushFollow(FOLLOW_adj_in_synpred311_ChemicalChunker1651);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:292: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:292: stop
        {
        pushFollow(FOLLOW_stop_in_synpred313_ChemicalChunker1655);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred325_ChemicalChunker1710);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred326_ChemicalChunker1712);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred327_ChemicalChunker1714);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred328_ChemicalChunker1716);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred329_ChemicalChunker
    public final void synpred329_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:75: ( prepphraseRole )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:151:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred329_ChemicalChunker1718);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred329_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred333_ChemicalChunker1819);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:35: ( nntime )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred338_ChemicalChunker1835);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:16: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred341_ChemicalChunker1923);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred342_ChemicalChunker
    public final void synpred342_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:33: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred342_ChemicalChunker1928);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_ChemicalChunker

    // $ANTLR start synpred376_ChemicalChunker
    public final void synpred376_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:5: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred376_ChemicalChunker2041);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_ChemicalChunker

    // $ANTLR start synpred381_ChemicalChunker
    public final void synpred381_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:36: ( nntemp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred381_ChemicalChunker2056);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:15: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred389_ChemicalChunker2257);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:15: ( ( conjunction )* apparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:15: ( conjunction )* apparatus
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:15: ( conjunction )*
        loop200:
        do {
            int alt200=2;
            alt200 = dfa200.predict(input);
            switch (alt200) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred390_ChemicalChunker2257);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop200;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred390_ChemicalChunker2260);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:22: ( nnApp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred393_ChemicalChunker2278);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:4: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred394_ChemicalChunker2306);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred395_ChemicalChunker
    public final void synpred395_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:18: ( dash nnapparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:202:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred395_ChemicalChunker2310);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred395_ChemicalChunker2312);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:8: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred396_ChemicalChunker2326);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:17: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred397_ChemicalChunker2328);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:21: ( nnpressure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred398_ChemicalChunker2330);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:32: ( nnadd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred399_ChemicalChunker2332);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:38: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred400_ChemicalChunker2334);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:47: ( nnchementity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred401_ChemicalChunker2336);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:60: ( nnstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred402_ChemicalChunker2338);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:68: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred403_ChemicalChunker2340);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred406_ChemicalChunker
    public final void synpred406_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:43: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred406_ChemicalChunker2366);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:25: ( measurementtypes )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred407_ChemicalChunker2378);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:24: ( oscarCompound1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:24: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred413_ChemicalChunker2429);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:54: ( oscarCompound3 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:54: oscarCompound3
        {
        pushFollow(FOLLOW_oscarCompound3_in_synpred415_ChemicalChunker2433);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:93: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:93: adj
        {
        pushFollow(FOLLOW_adj_in_synpred417_ChemicalChunker2440);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:98: ( reference )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:98: reference
        {
        pushFollow(FOLLOW_reference_in_synpred418_ChemicalChunker2443);
        reference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred419_ChemicalChunker
    public final void synpred419_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred419_ChemicalChunker2518);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_ChemicalChunker

    // $ANTLR start synpred420_ChemicalChunker
    public final void synpred420_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:14: ( dash )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:14: dash
        {
        pushFollow(FOLLOW_dash_in_synpred420_ChemicalChunker2546);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:14: ( dash oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:14: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred422_ChemicalChunker2565);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred422_ChemicalChunker2567);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:30: ( dash )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:223:30: dash
        {
        pushFollow(FOLLOW_dash_in_synpred423_ChemicalChunker2572);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred424_ChemicalChunker2586);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred425_ChemicalChunker
    public final void synpred425_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:13: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred425_ChemicalChunker2588);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred425_ChemicalChunker

    // $ANTLR start synpred426_ChemicalChunker
    public final void synpred426_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:42: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:42: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred426_ChemicalChunker2596);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred426_ChemicalChunker

    // $ANTLR start synpred427_ChemicalChunker
    public final void synpred427_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred427_ChemicalChunker2607);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_ChemicalChunker

    // $ANTLR start synpred428_ChemicalChunker
    public final void synpred428_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:13: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred428_ChemicalChunker2609);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred428_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:23: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred429_ChemicalChunker2613);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred430_ChemicalChunker
    public final void synpred430_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:40: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred430_ChemicalChunker2618);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred430_ChemicalChunker

    // $ANTLR start synpred431_ChemicalChunker
    public final void synpred431_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:49: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred431_ChemicalChunker2620);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_ChemicalChunker

    // $ANTLR start synpred432_ChemicalChunker
    public final void synpred432_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:58: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred432_ChemicalChunker2622);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_ChemicalChunker

    // $ANTLR start synpred433_ChemicalChunker
    public final void synpred433_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:235:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred433_ChemicalChunker2636);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred433_ChemicalChunker

    // $ANTLR start synpred435_ChemicalChunker
    public final void synpred435_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:18: ( moleculeamount3 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:18: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred435_ChemicalChunker2658);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred435_ChemicalChunker

    // $ANTLR start synpred436_ChemicalChunker
    public final void synpred436_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:34: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:34: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred436_ChemicalChunker2660);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_ChemicalChunker

    // $ANTLR start synpred440_ChemicalChunker
    public final void synpred440_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:26: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:26: citation
        {
        pushFollow(FOLLOW_citation_in_synpred440_ChemicalChunker2746);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred440_ChemicalChunker

    // $ANTLR start synpred441_ChemicalChunker
    public final void synpred441_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:35: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:35: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred441_ChemicalChunker2748);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_ChemicalChunker

    // $ANTLR start synpred442_ChemicalChunker
    public final void synpred442_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:44: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:247:44: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred442_ChemicalChunker2750);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred442_ChemicalChunker

    // $ANTLR start synpred443_ChemicalChunker
    public final void synpred443_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:18: ( jj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred443_ChemicalChunker2771);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred443_ChemicalChunker

    // $ANTLR start synpred444_ChemicalChunker
    public final void synpred444_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:18: ( ( jj )? noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:18: ( jj )? noun
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:18: ( jj )?
        int alt201=2;
        switch ( input.LA(1) ) {
            case 171:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA201_3 = input.LA(3);

                        if ( (synpred443_ChemicalChunker()) ) {
                            alt201=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt201) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred444_ChemicalChunker2771);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred444_ChemicalChunker2774);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred444_ChemicalChunker

    // $ANTLR start synpred445_ChemicalChunker
    public final void synpred445_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred445_ChemicalChunker2787);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred445_ChemicalChunker

    // $ANTLR start synpred446_ChemicalChunker
    public final void synpred446_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:31: ( oscarcd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:31: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred446_ChemicalChunker2815);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred446_ChemicalChunker

    // $ANTLR start synpred447_ChemicalChunker
    public final void synpred447_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:41: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:41: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred447_ChemicalChunker2819);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred447_ChemicalChunker

    // $ANTLR start synpred448_ChemicalChunker
    public final void synpred448_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:50: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:50: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred448_ChemicalChunker2821);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred448_ChemicalChunker

    // $ANTLR start synpred450_ChemicalChunker
    public final void synpred450_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:27: ( unnamedmoleculeamount1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:27: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred450_ChemicalChunker2837);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred450_ChemicalChunker

    // $ANTLR start synpred451_ChemicalChunker
    public final void synpred451_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:52: ( unnamedmoleculeamount2 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:52: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred451_ChemicalChunker2841);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred451_ChemicalChunker

    // $ANTLR start synpred452_ChemicalChunker
    public final void synpred452_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:77: ( unnamedmoleculeamount3 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:77: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred452_ChemicalChunker2845);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred452_ChemicalChunker

    // $ANTLR start synpred457_ChemicalChunker
    public final void synpred457_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred457_ChemicalChunker2949);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred457_ChemicalChunker2952);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred457_ChemicalChunker

    // $ANTLR start synpred462_ChemicalChunker
    public final void synpred462_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:9: ( lrb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred462_ChemicalChunker3000);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred462_ChemicalChunker

    // $ANTLR start synpred463_ChemicalChunker
    public final void synpred463_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:13: ( rrb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred463_ChemicalChunker3002);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred463_ChemicalChunker

    // $ANTLR start synpred464_ChemicalChunker
    public final void synpred464_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:17: ( lsqb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred464_ChemicalChunker3004);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred464_ChemicalChunker

    // $ANTLR start synpred465_ChemicalChunker
    public final void synpred465_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:22: ( rsqb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred465_ChemicalChunker3006);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred465_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred464_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred464_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred433_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred462_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred462_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred451_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred451_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred447_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred447_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred465_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred465_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred440_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred440_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred452_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred452_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred463_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred463_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred430_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred428_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred425_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred425_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred446_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred446_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred443_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred443_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred450_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred450_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred444_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred444_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred457_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred457_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred448_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred448_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA200 dfa200 = new DFA200(this);
    static final String DFA2_eotS =
        "\u008b\uffff";
    static final String DFA2_eofS =
        "\1\2\u008a\uffff";
    static final String DFA2_minS =
        "\1\44\1\0\1\uffff\u0086\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00df\1\0\1\uffff\u0086\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\u0086\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\171\1\uffff\1\70\1\u0084\1\125\1\136\1\175\1\13\1\153"+
        "\1\144\1\u0081\1\162\1\131\1\132\1\56\1\141\1\64\1\146\1\53\1\20"+
        "\1\167\1\50\1\41\1\75\1\143\1\166\1\163\1\102\1\57\1\u0083\1\130"+
        "\1\150\1\61\1\4\1\6\1\165\1\45\1\27\1\46\1\5\1\34\1\110\1\113\1"+
        "\54\1\52\1\10\1\23\1\142\1\172\1\111\1\25\1\174\1\0\1\160\1\117"+
        "\1\16\1\26\1\161\1\170\1\123\1\66\1\104\1\u0085\1\2\1\155\1\100"+
        "\1\103\1\107\1\154\1\u0086\1\156\1\134\1\36\1\151\1\11\1\177\1\72"+
        "\1\176\1\137\1\17\1\31\1\12\1\47\1\65\1\152\1\33\1\101\1\112\1\121"+
        "\1\42\1\u0082\1\71\1\76\1\63\1\55\1\21\1\43\1\u0080\1\14\1\105\1"+
        "\127\1\122\1\44\1\133\1\15\1\3\1\22\1\37\1\60\1\67\1\73\1\116\1"+
        "\126\1\157\1\164\1\1\1\35\1\51\1\62\1\140\1\147\1\106\1\120\1\74"+
        "\1\24\1\40\1\7\1\173\1\124\1\114\1\77\1\115\1\32\1\145\1\135\1\30"+
        "\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\7\1\15\1\17\1\10\1\75\1\47\1\uffff\1\16\1\36\1\115\1\116"+
            "\1\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120"+
            "\1\121\1\130\1\127\1\125\1\44\1\24\1\45\1\uffff\1\6\1\55\1\46"+
            "\1\50\1\64\1\23\1\51\1\52\1\53\1\54\1\20\1\56\1\57\1\60\1\61"+
            "\1\62\1\22\1\144\1\u0084\1\145\1\150\1\21\1\73\1\152\1\151\1"+
            "\153\1\154\1\155\1\156\1\157\1\160\1\161\1\26\1\162\1\63\1\163"+
            "\1\147\1\164\1\165\1\76\1\166\1\77\1\167\1\100\1\170\1\171\1"+
            "\146\1\172\1\173\1\101\1\174\1\65\1\175\1\176\1\177\1\102\1"+
            "\u0080\1\43\1\72\1\u0081\1\u0082\1\u0083\1\41\1\u0088\1\1\1"+
            "\uffff\1\u0085\1\uffff\1\2\1\uffff\1\74\1\u0087\1\4\1\u0086"+
            "\16\uffff\1\5\4\uffff\1\3\1\27\3\uffff\1\110\1\103\1\104\4\uffff"+
            "\1\113\1\11\1\12\1\13\1\14\1\134\1\uffff\1\25\1\uffff\1\42\2"+
            "\uffff\1\35\13\uffff\1\37\1\40\5\uffff\1\30\1\31\1\135\1\32"+
            "\1\34\1\uffff\1\33\1\105\1\112\1\uffff\1\136\1\137\1\141\1\140"+
            "\1\143\1\142\1\66\1\67\1\70\1\71\1\106\1\107\1\111",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 61:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\u008a\uffff";
    static final String DFA4_eofS =
        "\1\15\u0089\uffff";
    static final String DFA4_minS =
        "\1\44\14\0\1\uffff\170\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00df\14\0\1\uffff\170\0\4\uffff";
    static final String DFA4_acceptS =
        "\15\uffff\1\5\170\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\147\1\54\1\15\1\134\1\102\1\120\1\142\1\27\1\106\1\173"+
        "\1\130\1\50\1\uffff\1\46\1\144\1\6\1\125\1\0\1\122\1\160\1\47\1"+
        "\14\1\23\1\155\1\55\1\53\1\154\1\63\1\21\1\36\1\127\1\112\1\172"+
        "\1\143\1\10\1\131\1\115\1\177\1\113\1\u0081\1\124\1\12\1\176\1\157"+
        "\1\75\1\171\1\52\1\20\1\174\1\161\1\121\1\164\1\72\1\140\1\123\1"+
        "\16\1\25\1\126\1\74\1\165\1\116\1\32\1\132\1\156\1\166\1\167\1\170"+
        "\1\51\1\60\1\57\1\34\1\162\1\135\1\175\1\104\1\43\1\105\1\33\1\3"+
        "\1\44\1\76\1\141\1\30\1\61\1\152\1\100\1\111\1\56\1\22\1\1\1\24"+
        "\1\107\1\101\1\u0082\1\114\1\133\1\137\1\70\1\45\1\31\1\65\1\26"+
        "\1\35\1\42\1\u0080\1\110\1\163\1\146\1\17\1\13\1\71\1\64\1\40\1"+
        "\66\1\4\1\153\1\u0083\1\103\1\41\1\73\1\11\1\150\1\151\1\77\1\67"+
        "\1\62\1\37\1\7\1\145\1\136\1\117\1\5\1\2\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\24\1\12\1\14\1\25\1\76\1\50\1\uffff\1\13\1\37\1\116\1\117"+
            "\1\115\1\123\1\124\1\133\1\134\1\120\1\132\1\125\1\127\1\121"+
            "\1\122\1\131\1\130\1\126\1\45\1\32\1\46\1\uffff\1\23\1\56\1"+
            "\47\1\51\1\65\1\31\1\52\1\53\1\54\1\55\1\26\1\57\1\60\1\61\1"+
            "\62\1\63\1\30\1\144\1\u0084\1\145\1\150\1\27\1\74\1\152\1\151"+
            "\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\34\1\162\1\64\1"+
            "\163\1\147\1\164\1\165\1\77\1\166\1\100\1\167\1\101\1\170\1"+
            "\171\1\146\1\172\1\173\1\102\1\174\1\66\1\175\1\176\1\177\1"+
            "\103\1\u0080\1\44\1\73\1\u0081\1\u0082\1\u0083\1\42\1\15\1\16"+
            "\1\uffff\1\u0085\1\uffff\1\15\1\uffff\1\75\1\15\1\21\1\15\15"+
            "\uffff\1\15\1\22\4\uffff\1\20\1\35\3\uffff\1\111\1\104\1\105"+
            "\4\uffff\1\114\1\6\1\7\1\10\1\11\1\135\1\uffff\1\33\1\uffff"+
            "\1\43\2\uffff\1\36\13\uffff\1\40\1\41\5\uffff\1\1\1\2\1\17\1"+
            "\3\1\5\1\uffff\1\4\1\106\1\113\1\uffff\1\136\1\137\1\141\1\140"+
            "\1\143\1\142\1\67\1\70\1\71\1\72\1\107\1\110\1\112",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 63:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_133 = input.LA(1);

                         
                        int index4_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_133);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_132 = input.LA(1);

                         
                        int index4_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_132);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\36\uffff";
    static final String DFA5_eofS =
        "\1\1\35\uffff";
    static final String DFA5_minS =
        "\1\44\1\uffff\15\43\15\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00df\1\uffff\15\43\15\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\32\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\17\uffff\1\10\1\11\1\3\1\6\1\12\1\7\1\13\1\0\1\1\1\2\1\14\1\4\1"+
        "\5\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\24\1\1\uffff\77\1\1\16\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff"+
            "\3\1\4\uffff\1\1\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\2\1\5\uffff\1\11\1\12\1\1\1\13\1\15\1"+
            "\uffff\1\14\2\1\1\uffff\15\1",
            "",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 63:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\u0093\uffff";
    static final String DFA7_eofS =
        "\u0093\uffff";
    static final String DFA7_minS =
        "\1\44\1\0\2\uffff\3\0\1\uffff\13\0\12\uffff\1\0\3\uffff\1\0\24\uffff"+
        "\2\0\6\uffff\1\0\124\uffff";
    static final String DFA7_maxS =
        "\1\u00df\1\0\2\uffff\3\0\1\uffff\13\0\12\uffff\1\0\3\uffff\1\0\24"+
        "\uffff\2\0\6\uffff\1\0\124\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\2\100\uffff\1\4\46\uffff\1\5\21\uffff\1\7\1\14\1\uffff"+
        "\1\16\1\17\1\20\1\23\4\uffff\1\24\1\1\1\22\1\21\1\10\1\12\1\11\1"+
        "\6\1\3\1\25\1\13\1\15";
    static final String DFA7_specialS =
        "\1\uffff\1\0\2\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\12\uffff\1\17\3\uffff\1\20\24\uffff"+
        "\1\21\1\22\6\uffff\1\23\124\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\10\1\16\1\20\1\11\1\67\1\41\1\uffff\1\17\1\2\20\152\3\2\1"+
            "\uffff\20\2\1\21\4\103\2\2\11\103\1\2\1\103\1\2\4\103\1\2\1"+
            "\103\1\2\1\103\1\2\5\103\1\2\1\103\1\2\3\103\1\2\1\103\1\35"+
            "\1\2\3\103\1\2\1\177\1\5\1\uffff\1\u0081\3\uffff\1\66\1\175"+
            "\1\4\1\175\16\uffff\1\6\4\uffff\1\22\1\174\3\uffff\1\2\1\1\1"+
            "\2\4\uffff\1\152\1\12\1\13\1\14\1\15\1\u0080\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\13\uffff\2\2\5\uffff\2\u0082\1\u0087\2\u0082"+
            "\1\uffff\1\u0082\1\76\1\152\1\uffff\6\103\7\2",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "70:4: ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred25_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_15 = input.LA(1);

                         
                        int index7_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_16 = input.LA(1);

                         
                        int index7_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred23_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_17 = input.LA(1);

                         
                        int index7_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index7_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_18 = input.LA(1);

                         
                        int index7_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index7_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_29 = input.LA(1);

                         
                        int index7_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index7_29);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA7_33 = input.LA(1);

                         
                        int index7_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred16_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index7_33);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA7_54 = input.LA(1);

                         
                        int index7_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred25_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 144;}

                         
                        input.seek(index7_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA7_55 = input.LA(1);

                         
                        int index7_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred24_ChemicalChunker()) ) {s = 145;}

                         
                        input.seek(index7_55);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA7_62 = input.LA(1);

                         
                        int index7_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 146;}

                         
                        input.seek(index7_62);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\112\uffff";
    static final String DFA8_eofS =
        "\112\uffff";
    static final String DFA8_minS =
        "\1\44\25\0\64\uffff";
    static final String DFA8_maxS =
        "\1\u00df\25\0\64\uffff";
    static final String DFA8_acceptS =
        "\26\uffff\1\2\62\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\64\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\5\1\13\1\15\1\6\2\26\1\uffff\1\14\1\26\20\uffff\1\26\1\23"+
            "\1\26\1\uffff\1\4\4\26\1\22\4\26\1\16\5\26\1\21\4\uffff\1\17"+
            "\1\26\11\uffff\1\25\1\uffff\1\26\4\uffff\1\26\1\uffff\1\26\1"+
            "\uffff\1\26\5\uffff\1\26\1\uffff\1\26\3\uffff\1\26\1\uffff\2"+
            "\26\3\uffff\1\26\1\uffff\1\20\5\uffff\1\26\1\uffff\1\2\17\uffff"+
            "\1\3\4\uffff\1\1\1\26\3\uffff\3\26\5\uffff\1\7\1\10\1\11\1\12"+
            "\2\uffff\1\24\1\uffff\1\26\2\uffff\1\26\13\uffff\2\26\5\uffff"+
            "\2\26\1\uffff\2\26\1\uffff\2\26\10\uffff\7\26",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "77:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA8_20 = input.LA(1);

                         
                        int index8_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA8_21 = input.LA(1);

                         
                        int index8_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\21\uffff";
    static final String DFA11_eofS =
        "\21\uffff";
    static final String DFA11_minS =
        "\1\44\1\uffff\7\43\1\uffff\7\0";
    static final String DFA11_maxS =
        "\1\u00df\1\uffff\7\43\1\uffff\7\0";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA11_specialS =
        "\12\uffff\1\0\1\1\1\4\1\2\1\6\1\5\1\3}>";
    static final String[] DFA11_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\1\1\20\uffff\3\1\1\uffff\21\1"+
            "\4\uffff\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1"+
            "\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 82:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_16 = input.LA(1);

                         
                        int index11_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_15 = input.LA(1);

                         
                        int index11_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\110\uffff";
    static final String DFA12_eofS =
        "\1\1\107\uffff";
    static final String DFA12_minS =
        "\1\44\1\uffff\102\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00df\1\uffff\102\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\102\uffff\1\1\1\2\1\4\1\3";
    static final String DFA12_specialS =
        "\2\uffff\1\4\1\44\1\41\1\11\1\77\1\23\1\15\1\13\1\72\1\30\1\17\1"+
        "\100\1\52\1\3\1\54\1\21\1\40\1\71\1\20\1\45\1\70\1\16\1\47\1\22"+
        "\1\65\1\53\1\35\1\24\1\36\1\42\1\12\1\33\1\10\1\7\1\51\1\73\1\25"+
        "\1\43\1\63\1\34\1\66\1\50\1\46\1\2\1\26\1\61\1\67\1\55\1\74\1\5"+
        "\1\6\1\32\1\101\1\60\1\1\1\57\1\76\1\62\1\37\1\27\1\0\1\64\1\56"+
        "\1\75\1\31\1\14\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\16\1\7\1\11\1\17\1\67\1\41\1\uffff\1\10\1\21\20\1\1\36\1"+
            "\30\1\37\1\uffff\1\15\1\47\1\40\1\42\1\56\1\27\1\43\1\44\1\45"+
            "\1\46\1\25\1\50\1\51\1\52\1\53\1\54\1\20\4\1\1\26\1\65\11\1"+
            "\1\32\1\1\1\55\4\1\1\70\1\1\1\71\1\1\1\72\5\1\1\73\1\1\1\57"+
            "\3\1\1\74\1\1\1\35\1\64\3\1\1\33\1\1\1\2\1\uffff\4\1\1\66\1"+
            "\1\1\12\1\1\15\uffff\1\1\1\14\4\uffff\1\24\1\1\3\uffff\1\102"+
            "\1\75\1\76\4\uffff\1\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\31\1\uffff"+
            "\1\34\2\uffff\1\13\13\uffff\1\22\1\23\5\uffff\5\1\1\uffff\1"+
            "\1\1\77\1\1\1\uffff\6\1\1\60\1\61\1\62\1\63\1\100\1\101\1\103",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 82:24: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_67);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred41_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA16_eotS =
        "\113\uffff";
    static final String DFA16_eofS =
        "\1\1\112\uffff";
    static final String DFA16_minS =
        "\1\44\1\uffff\110\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00df\1\uffff\110\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\110\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\74\1\61\1\43\1\26\1\102\1\12\1\55\1\32\1\21\1\107\1\51"+
        "\1\5\1\30\1\100\1\52\1\25\1\13\1\53\1\104\1\7\1\63\1\73\1\6\1\10"+
        "\1\27\1\16\1\56\1\4\1\105\1\54\1\15\1\3\1\101\1\64\1\41\1\66\1\65"+
        "\1\76\1\37\1\44\1\106\1\17\1\40\1\20\1\24\1\103\1\57\1\35\1\71\1"+
        "\33\1\75\1\50\1\62\1\36\1\42\1\31\1\60\1\2\1\34\1\14\1\0\1\11\1"+
        "\47\1\72\1\70\1\77\1\46\1\23\1\67\1\22\1\1\1\45\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\24\1\13\1\15\1\25\1\75\1\47\1\uffff\1\14\1\36\20\1\1\44\1"+
            "\32\1\45\1\uffff\1\23\1\55\1\46\1\50\1\64\1\31\1\51\1\52\1\53"+
            "\1\54\1\26\1\56\1\57\1\60\1\61\1\62\1\30\4\1\1\27\1\73\11\1"+
            "\1\34\1\1\1\63\4\1\1\76\1\1\1\77\1\1\1\100\5\1\1\101\1\1\1\65"+
            "\3\1\1\102\1\1\1\43\1\72\3\1\1\41\1\1\1\17\1\uffff\4\1\1\74"+
            "\1\1\1\21\1\1\15\uffff\1\16\1\22\4\uffff\1\20\1\1\3\uffff\1"+
            "\110\1\103\1\104\4\uffff\1\1\1\7\1\10\1\11\1\12\1\1\1\uffff"+
            "\1\33\1\uffff\1\42\2\uffff\1\35\13\uffff\1\37\1\40\5\uffff\1"+
            "\2\1\3\1\1\1\4\1\6\1\uffff\1\5\1\105\1\1\1\uffff\6\1\1\66\1"+
            "\67\1\70\1\71\1\106\1\107\1\111",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 82:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_72 = input.LA(1);

                         
                        int index16_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_72);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA16_71 = input.LA(1);

                         
                        int index16_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_71);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA16_73 = input.LA(1);

                         
                        int index16_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_73);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA16_70 = input.LA(1);

                         
                        int index16_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_70);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\111\uffff";
    static final String DFA13_eofS =
        "\111\uffff";
    static final String DFA13_minS =
        "\1\44\22\uffff\1\0\65\uffff";
    static final String DFA13_maxS =
        "\1\u00df\22\uffff\1\0\65\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\106\uffff\1\1";
    static final String DFA13_specialS =
        "\23\uffff\1\0\65\uffff}>";
    static final String[] DFA13_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\3\1\1\uffff\21\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\23\5\uffff\1\1\1\uffff\1\1\16\uffff\1\110\1\1\4\uffff\1\1"+
            "\4\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\2\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 82:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_19 = input.LA(1);

                         
                        int index13_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\21\uffff";
    static final String DFA14_eofS =
        "\21\uffff";
    static final String DFA14_minS =
        "\1\44\1\uffff\7\43\1\uffff\7\0";
    static final String DFA14_maxS =
        "\1\u00df\1\uffff\7\43\1\uffff\7\0";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA14_specialS =
        "\12\uffff\1\1\1\3\1\4\1\0\1\6\1\5\1\2}>";
    static final String[] DFA14_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\1\1\20\uffff\3\1\1\uffff\21\1"+
            "\4\uffff\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1"+
            "\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 82:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\107\uffff";
    static final String DFA15_eofS =
        "\107\uffff";
    static final String DFA15_minS =
        "\1\44\102\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00df\102\0\4\uffff";
    static final String DFA15_acceptS =
        "\103\uffff\1\1\1\2\1\4\1\3";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\14\1\6\1\10\1\15\1\66\1\40\1\uffff\1\7\1\20\20\uffff\1\35"+
            "\1\27\1\36\1\uffff\1\13\1\46\1\37\1\41\1\55\1\26\1\42\1\43\1"+
            "\44\1\45\1\24\1\47\1\50\1\51\1\52\1\53\1\17\4\uffff\1\25\1\64"+
            "\11\uffff\1\31\1\uffff\1\54\4\uffff\1\67\1\uffff\1\70\1\uffff"+
            "\1\71\5\uffff\1\72\1\uffff\1\56\3\uffff\1\73\1\uffff\1\34\1"+
            "\63\3\uffff\1\32\1\uffff\1\16\5\uffff\1\65\1\uffff\1\1\17\uffff"+
            "\1\12\4\uffff\1\23\4\uffff\1\101\1\74\1\75\5\uffff\1\2\1\3\1"+
            "\4\1\5\2\uffff\1\30\1\uffff\1\33\2\uffff\1\11\13\uffff\1\21"+
            "\1\22\14\uffff\1\76\10\uffff\1\57\1\60\1\61\1\62\1\77\1\100"+
            "\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "82:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred46_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred46_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred46_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA15_66 = input.LA(1);

                         
                        int index15_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\23\uffff";
    static final String DFA18_eofS =
        "\1\21\22\uffff";
    static final String DFA18_minS =
        "\1\44\20\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00df\20\0\2\uffff";
    static final String DFA18_acceptS =
        "\21\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\5\1\7\1\6\1\3\1\15\1\0\1\17\1\1\1\13\1\4\1\12\1\14\1"+
        "\10\1\11\1\16\1\2\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\14\1\6\1\10\1\15\2\21\1\uffff\1\7\1\20\23\21\1\uffff\1\13"+
            "\17\21\1\17\57\21\1\16\1\uffff\6\21\1\1\1\21\15\uffff\1\21\1"+
            "\12\4\uffff\2\21\3\uffff\3\21\4\uffff\1\21\1\2\1\3\1\4\1\5\1"+
            "\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\11\13\uffff\2\21\5\uffff"+
            "\5\21\1\uffff\3\21\1\uffff\15\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "82:155: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\23\uffff";
    static final String DFA20_eofS =
        "\23\uffff";
    static final String DFA20_minS =
        "\1\44\11\0\11\uffff";
    static final String DFA20_maxS =
        "\1\u00b6\11\0\11\uffff";
    static final String DFA20_acceptS =
        "\12\uffff\1\2\6\uffff\1\1\1\3";
    static final String DFA20_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\11\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\12\1\6\1\10\1\12\3\uffff\1\7\1\12\24\uffff\1\12\17\uffff"+
            "\1\12\57\uffff\1\12\7\uffff\1\1\17\uffff\1\12\21\uffff\1\2\1"+
            "\3\1\4\1\5\7\uffff\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "84:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_2 = input.LA(1);

                         
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_6 = input.LA(1);

                         
                        int index20_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA21_eotS =
        "\21\uffff";
    static final String DFA21_eofS =
        "\21\uffff";
    static final String DFA21_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u00b6\7\43\1\uffff\7\0\1\uffff";
    static final String DFA21_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA21_specialS =
        "\11\uffff\1\6\1\5\1\4\1\2\1\1\1\3\1\0\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff\1"+
            "\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1"+
            "\2\1\3\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "87:8: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA23_eotS =
        "\20\uffff";
    static final String DFA23_eofS =
        "\20\uffff";
    static final String DFA23_minS =
        "\1\44\6\0\11\uffff";
    static final String DFA23_maxS =
        "\1\u00ae\6\0\11\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "87:18: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA23_5 = input.LA(1);

                         
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA23_6 = input.LA(1);

                         
                        int index23_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA25_eotS =
        "\21\uffff";
    static final String DFA25_eofS =
        "\21\uffff";
    static final String DFA25_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA25_maxS =
        "\1\u00b6\7\43\1\uffff\7\0\1\uffff";
    static final String DFA25_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA25_specialS =
        "\11\uffff\1\2\1\1\1\6\1\0\1\4\1\5\1\3\1\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff\1"+
            "\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1"+
            "\2\1\3\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "87:58: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\20\uffff";
    static final String DFA27_eofS =
        "\20\uffff";
    static final String DFA27_minS =
        "\1\44\6\0\11\uffff";
    static final String DFA27_maxS =
        "\1\u00ae\6\0\11\uffff";
    static final String DFA27_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "87:68: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA27_5 = input.LA(1);

                         
                        int index27_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA27_6 = input.LA(1);

                         
                        int index27_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\21\uffff";
    static final String DFA30_eofS =
        "\21\uffff";
    static final String DFA30_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA30_maxS =
        "\1\u00b6\7\43\1\uffff\7\0\1\uffff";
    static final String DFA30_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA30_specialS =
        "\11\uffff\1\6\1\0\1\1\1\5\1\4\1\2\1\3\1\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff\1"+
            "\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1"+
            "\2\1\3\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "89:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_10 = input.LA(1);

                         
                        int index30_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_11 = input.LA(1);

                         
                        int index30_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_14 = input.LA(1);

                         
                        int index30_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_15 = input.LA(1);

                         
                        int index30_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA30_13 = input.LA(1);

                         
                        int index30_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA30_12 = input.LA(1);

                         
                        int index30_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA30_9 = input.LA(1);

                         
                        int index30_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\20\uffff";
    static final String DFA32_eofS =
        "\20\uffff";
    static final String DFA32_minS =
        "\1\44\6\0\11\uffff";
    static final String DFA32_maxS =
        "\1\u00ae\6\0\11\uffff";
    static final String DFA32_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA32_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "89:14: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_2 = input.LA(1);

                         
                        int index32_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_4 = input.LA(1);

                         
                        int index32_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_6 = input.LA(1);

                         
                        int index32_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA34_eotS =
        "\21\uffff";
    static final String DFA34_eofS =
        "\21\uffff";
    static final String DFA34_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA34_maxS =
        "\1\u00b6\7\43\1\uffff\7\0\1\uffff";
    static final String DFA34_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA34_specialS =
        "\11\uffff\1\5\1\0\1\6\1\3\1\2\1\4\1\1\1\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff\1"+
            "\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1"+
            "\2\1\3\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "89:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_10 = input.LA(1);

                         
                        int index34_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_15 = input.LA(1);

                         
                        int index34_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_13 = input.LA(1);

                         
                        int index34_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_12 = input.LA(1);

                         
                        int index34_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_14 = input.LA(1);

                         
                        int index34_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA34_11 = input.LA(1);

                         
                        int index34_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\20\uffff";
    static final String DFA36_eofS =
        "\20\uffff";
    static final String DFA36_minS =
        "\1\44\6\0\11\uffff";
    static final String DFA36_maxS =
        "\1\u00ae\6\0\11\uffff";
    static final String DFA36_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA36_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "89:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\21\uffff";
    static final String DFA40_eofS =
        "\21\uffff";
    static final String DFA40_minS =
        "\1\44\6\0\12\uffff";
    static final String DFA40_maxS =
        "\1\u00ae\6\0\12\uffff";
    static final String DFA40_acceptS =
        "\7\uffff\1\1\7\uffff\1\2\1\3";
    static final String DFA40_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\12\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\4\uffff\1\20\12\uffff"+
            "\1\7\57\uffff\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "92:13: ( molecule | unnamedmolecule | nnchementity )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred73_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred73_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred73_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred73_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred73_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred73_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\21\uffff";
    static final String DFA42_eofS =
        "\21\uffff";
    static final String DFA42_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b6\7\43\1\uffff\7\0\1\uffff";
    static final String DFA42_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA42_specialS =
        "\11\uffff\1\3\1\0\1\2\1\4\1\6\1\1\1\5\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff\1"+
            "\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1"+
            "\2\1\3\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "92:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_14 = input.LA(1);

                         
                        int index42_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_15 = input.LA(1);

                         
                        int index42_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA44_eotS =
        "\20\uffff";
    static final String DFA44_eofS =
        "\20\uffff";
    static final String DFA44_minS =
        "\1\44\6\0\11\uffff";
    static final String DFA44_maxS =
        "\1\u00ae\6\0\11\uffff";
    static final String DFA44_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA44_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "92:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA61_eotS =
        "\71\uffff";
    static final String DFA61_eofS =
        "\1\1\70\uffff";
    static final String DFA61_minS =
        "\1\44\1\uffff\66\0\1\uffff";
    static final String DFA61_maxS =
        "\1\u00df\1\uffff\66\0\1\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\2\66\uffff\1\1";
    static final String DFA61_specialS =
        "\2\uffff\1\25\1\62\1\16\1\35\1\4\1\11\1\57\1\23\1\36\1\41\1\21\1"+
        "\54\1\45\1\53\1\26\1\7\1\65\1\32\1\51\1\2\1\6\1\40\1\0\1\55\1\46"+
        "\1\17\1\5\1\63\1\31\1\24\1\3\1\60\1\42\1\22\1\12\1\50\1\1\1\37\1"+
        "\20\1\10\1\47\1\27\1\43\1\15\1\34\1\64\1\30\1\44\1\56\1\14\1\61"+
        "\1\13\1\33\1\52\1\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\1\13\1\15\3\1\1\uffff\1\14\24\1\1\uffff\21\1\1\27\1\67"+
            "\1\30\1\33\2\1\1\35\1\34\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
            "\1\1\1\45\1\1\1\46\1\32\1\47\1\50\1\1\1\51\1\1\1\52\1\1\1\53"+
            "\1\54\1\31\1\55\1\56\1\1\1\57\1\1\1\60\1\61\1\62\1\1\1\63\1"+
            "\17\1\1\1\64\1\65\1\66\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4"+
            "\1\15\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\1\1\1\7\1\10"+
            "\1\11\1\12\1\20\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\2\1\5\uffff\1\2\1\3\1\16\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1"+
            "\21\1\22\1\24\1\23\1\26\1\25\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()+ loopback of 103:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_24 = input.LA(1);

                         
                        int index61_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_24);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_38 = input.LA(1);

                         
                        int index61_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_38);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_21 = input.LA(1);

                         
                        int index61_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_32 = input.LA(1);

                         
                        int index61_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_32);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_6 = input.LA(1);

                         
                        int index61_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA61_28 = input.LA(1);

                         
                        int index61_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_28);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA61_22 = input.LA(1);

                         
                        int index61_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA61_17 = input.LA(1);

                         
                        int index61_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA61_41 = input.LA(1);

                         
                        int index61_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA61_7 = input.LA(1);

                         
                        int index61_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA61_36 = input.LA(1);

                         
                        int index61_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_36);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA61_53 = input.LA(1);

                         
                        int index61_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA61_51 = input.LA(1);

                         
                        int index61_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA61_45 = input.LA(1);

                         
                        int index61_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA61_4 = input.LA(1);

                         
                        int index61_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_4);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA61_27 = input.LA(1);

                         
                        int index61_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_27);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA61_40 = input.LA(1);

                         
                        int index61_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_40);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA61_12 = input.LA(1);

                         
                        int index61_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_12);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA61_35 = input.LA(1);

                         
                        int index61_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_35);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA61_9 = input.LA(1);

                         
                        int index61_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_9);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA61_31 = input.LA(1);

                         
                        int index61_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_31);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA61_2 = input.LA(1);

                         
                        int index61_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_2);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA61_16 = input.LA(1);

                         
                        int index61_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_16);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA61_43 = input.LA(1);

                         
                        int index61_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_43);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA61_48 = input.LA(1);

                         
                        int index61_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_48);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA61_30 = input.LA(1);

                         
                        int index61_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_30);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA61_19 = input.LA(1);

                         
                        int index61_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_19);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA61_54 = input.LA(1);

                         
                        int index61_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_54);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA61_46 = input.LA(1);

                         
                        int index61_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_46);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA61_5 = input.LA(1);

                         
                        int index61_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_5);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA61_10 = input.LA(1);

                         
                        int index61_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_10);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA61_39 = input.LA(1);

                         
                        int index61_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_39);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA61_23 = input.LA(1);

                         
                        int index61_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_23);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA61_11 = input.LA(1);

                         
                        int index61_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_11);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA61_34 = input.LA(1);

                         
                        int index61_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA61_44 = input.LA(1);

                         
                        int index61_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_44);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA61_49 = input.LA(1);

                         
                        int index61_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_49);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA61_14 = input.LA(1);

                         
                        int index61_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_14);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA61_26 = input.LA(1);

                         
                        int index61_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_26);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA61_42 = input.LA(1);

                         
                        int index61_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA61_37 = input.LA(1);

                         
                        int index61_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_37);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA61_20 = input.LA(1);

                         
                        int index61_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_20);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA61_55 = input.LA(1);

                         
                        int index61_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_55);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA61_15 = input.LA(1);

                         
                        int index61_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_15);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA61_13 = input.LA(1);

                         
                        int index61_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_13);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA61_25 = input.LA(1);

                         
                        int index61_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_25);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA61_50 = input.LA(1);

                         
                        int index61_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_50);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA61_8 = input.LA(1);

                         
                        int index61_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_8);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA61_33 = input.LA(1);

                         
                        int index61_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_33);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA61_52 = input.LA(1);

                         
                        int index61_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA61_3 = input.LA(1);

                         
                        int index61_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_3);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA61_29 = input.LA(1);

                         
                        int index61_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_29);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA61_47 = input.LA(1);

                         
                        int index61_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_47);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA61_18 = input.LA(1);

                         
                        int index61_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\53\uffff";
    static final String DFA56_eofS =
        "\1\1\52\uffff";
    static final String DFA56_minS =
        "\1\44\1\uffff\50\0\1\uffff";
    static final String DFA56_maxS =
        "\1\u00df\1\uffff\50\0\1\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA56_specialS =
        "\2\uffff\1\7\1\32\1\12\1\2\1\27\1\4\1\34\1\24\1\45\1\14\1\15\1\21"+
        "\1\25\1\40\1\1\1\33\1\11\1\43\1\3\1\31\1\5\1\10\1\13\1\0\1\26\1"+
        "\42\1\46\1\23\1\44\1\37\1\16\1\35\1\36\1\22\1\41\1\6\1\47\1\17\1"+
        "\30\1\20\1\uffff}>";
    static final String[] DFA56_transitionS = {
            "\6\1\1\uffff\25\1\1\uffff\21\1\1\11\1\51\1\12\1\15\2\1\1\17"+
            "\1\16\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1"+
            "\14\1\31\1\32\1\1\1\33\1\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40"+
            "\1\1\1\41\1\1\1\42\1\43\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50"+
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff"+
            "\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1"+
            "\6\1\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()+ loopback of 103:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_25 = input.LA(1);

                         
                        int index56_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_25);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_5 = input.LA(1);

                         
                        int index56_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_7 = input.LA(1);

                         
                        int index56_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_37 = input.LA(1);

                         
                        int index56_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_37);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_2 = input.LA(1);

                         
                        int index56_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_4 = input.LA(1);

                         
                        int index56_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA56_32 = input.LA(1);

                         
                        int index56_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA56_39 = input.LA(1);

                         
                        int index56_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_39);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA56_41 = input.LA(1);

                         
                        int index56_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_41);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA56_35 = input.LA(1);

                         
                        int index56_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_35);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA56_29 = input.LA(1);

                         
                        int index56_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA56_26 = input.LA(1);

                         
                        int index56_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_26);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA56_6 = input.LA(1);

                         
                        int index56_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_6);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA56_40 = input.LA(1);

                         
                        int index56_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_40);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA56_3 = input.LA(1);

                         
                        int index56_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_3);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA56_8 = input.LA(1);

                         
                        int index56_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA56_33 = input.LA(1);

                         
                        int index56_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_33);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA56_34 = input.LA(1);

                         
                        int index56_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_34);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA56_31 = input.LA(1);

                         
                        int index56_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA56_36 = input.LA(1);

                         
                        int index56_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA56_27 = input.LA(1);

                         
                        int index56_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_27);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA56_30 = input.LA(1);

                         
                        int index56_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_30);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA56_28 = input.LA(1);

                         
                        int index56_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_28);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA56_38 = input.LA(1);

                         
                        int index56_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_38);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\15\uffff";
    static final String DFA58_eofS =
        "\1\1\14\uffff";
    static final String DFA58_minS =
        "\1\44\1\uffff\5\43\5\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00df\1\uffff\5\43\5\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA58_specialS =
        "\7\uffff\1\4\1\2\1\0\1\1\1\3\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\6\1\1\uffff\25\1\1\uffff\101\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\1\2\1\3\1"+
            "\1\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 103:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_9 = input.LA(1);

                         
                        int index58_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_10 = input.LA(1);

                         
                        int index58_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_8 = input.LA(1);

                         
                        int index58_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA58_11 = input.LA(1);

                         
                        int index58_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA58_7 = input.LA(1);

                         
                        int index58_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\21\uffff";
    static final String DFA59_eofS =
        "\1\10\20\uffff";
    static final String DFA59_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA59_maxS =
        "\1\u00df\7\43\1\uffff\7\0\1\uffff";
    static final String DFA59_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA59_specialS =
        "\11\uffff\1\5\1\6\1\2\1\4\1\3\1\1\1\0\1\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\10\1\5\1\7\3\10\1\uffff\1\6\24\10\1\uffff\101\10\1\uffff"+
            "\1\10\1\uffff\1\10\1\uffff\4\10\15\uffff\2\10\4\uffff\2\10\3"+
            "\uffff\3\10\4\uffff\1\10\1\1\1\2\1\3\1\4\1\10\1\uffff\1\10\1"+
            "\uffff\1\10\2\uffff\1\10\13\uffff\2\10\5\uffff\5\10\1\uffff"+
            "\3\10\1\uffff\15\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "103:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_15 = input.LA(1);

                         
                        int index59_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_14 = input.LA(1);

                         
                        int index59_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_11 = input.LA(1);

                         
                        int index59_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_13 = input.LA(1);

                         
                        int index59_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_12 = input.LA(1);

                         
                        int index59_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_9 = input.LA(1);

                         
                        int index59_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_10 = input.LA(1);

                         
                        int index59_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA65_eotS =
        "\u008c\uffff";
    static final String DFA65_eofS =
        "\1\15\u008b\uffff";
    static final String DFA65_minS =
        "\1\44\14\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\23\uffff\1\0\3\uffff"+
        "\1\0\40\uffff\22\0\50\uffff\1\0\3\uffff";
    static final String DFA65_maxS =
        "\1\u00df\14\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\23\uffff\1\0\3"+
        "\uffff\1\0\40\uffff\22\0\50\uffff\1\0\3\uffff";
    static final String DFA65_acceptS =
        "\15\uffff\1\2\175\uffff\1\1";
    static final String DFA65_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\14\1\15\3\uffff\1\16\1\uffff\1\17\23\uffff\1\20\3\uffff\1\21"+
        "\40\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\50\uffff\1\44\3\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\15\1\12\1\14\3\15\1\uffff\1\13\1\15\1\121\1\122\1\120\1\126"+
            "\1\127\1\136\1\137\1\123\1\135\1\130\1\132\1\124\1\125\1\134"+
            "\1\133\1\131\2\15\1\51\1\uffff\6\15\1\55\71\15\1\17\1\uffff"+
            "\1\u0088\1\uffff\1\15\1\uffff\4\15\15\uffff\1\16\1\25\4\uffff"+
            "\1\23\1\15\3\uffff\3\15\4\uffff\1\117\1\6\1\7\1\10\1\11\1\15"+
            "\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\13\uffff\2\15\5\uffff"+
            "\1\1\1\2\1\15\1\3\1\5\1\uffff\1\4\1\15\1\116\1\uffff\15\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 103:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_1 = input.LA(1);

                         
                        int index65_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_2 = input.LA(1);

                         
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_3 = input.LA(1);

                         
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_4 = input.LA(1);

                         
                        int index65_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA65_5 = input.LA(1);

                         
                        int index65_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA65_6 = input.LA(1);

                         
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA65_7 = input.LA(1);

                         
                        int index65_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA65_8 = input.LA(1);

                         
                        int index65_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA65_10 = input.LA(1);

                         
                        int index65_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA65_11 = input.LA(1);

                         
                        int index65_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA65_12 = input.LA(1);

                         
                        int index65_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA65_14 = input.LA(1);

                         
                        int index65_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA65_15 = input.LA(1);

                         
                        int index65_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA65_19 = input.LA(1);

                         
                        int index65_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA65_21 = input.LA(1);

                         
                        int index65_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA65_41 = input.LA(1);

                         
                        int index65_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_41);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA65_45 = input.LA(1);

                         
                        int index65_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_45);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA65_78 = input.LA(1);

                         
                        int index65_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_78);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA65_79 = input.LA(1);

                         
                        int index65_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_79);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA65_80 = input.LA(1);

                         
                        int index65_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_80);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA65_81 = input.LA(1);

                         
                        int index65_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_81);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA65_82 = input.LA(1);

                         
                        int index65_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_82);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA65_83 = input.LA(1);

                         
                        int index65_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_83);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA65_84 = input.LA(1);

                         
                        int index65_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_84);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA65_85 = input.LA(1);

                         
                        int index65_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_85);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA65_86 = input.LA(1);

                         
                        int index65_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_86);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA65_87 = input.LA(1);

                         
                        int index65_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_87);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA65_88 = input.LA(1);

                         
                        int index65_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_88);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA65_89 = input.LA(1);

                         
                        int index65_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_89);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA65_90 = input.LA(1);

                         
                        int index65_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_90);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA65_91 = input.LA(1);

                         
                        int index65_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_91);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA65_92 = input.LA(1);

                         
                        int index65_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_92);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA65_93 = input.LA(1);

                         
                        int index65_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_93);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA65_94 = input.LA(1);

                         
                        int index65_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_94);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA65_95 = input.LA(1);

                         
                        int index65_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_95);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA65_136 = input.LA(1);

                         
                        int index65_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 139;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_136);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA66_eotS =
        "\60\uffff";
    static final String DFA66_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA66_minS =
        "\1\122\11\uffff\1\43\36\uffff\1\44\1\uffff\1\43\1\44\1\43\1\0\1"+
        "\uffff";
    static final String DFA66_maxS =
        "\1\u00d8\11\uffff\1\43\36\uffff\1\u00df\1\uffff\1\43\1\u00df\1\43"+
        "\1\0\1\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA66_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\124\uffff\1\1\1\2\1\4\1\3\1\6\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\6\52\1\uffff\25\52\1\uffff\101\52\1\uffff\10\52\15\uffff\1"+
            "\53\1\52\4\uffff\2\52\3\uffff\3\52\4\uffff\6\52\1\uffff\1\52"+
            "\1\uffff\1\52\2\uffff\1\52\13\uffff\2\52\5\uffff\5\52\1\uffff"+
            "\3\52\1\uffff\15\52",
            "",
            "\1\54",
            "\6\52\1\uffff\25\52\1\uffff\34\52\1\55\44\52\1\uffff\1\52\1"+
            "\uffff\1\52\1\uffff\4\52\15\uffff\2\52\4\uffff\2\52\3\uffff"+
            "\3\52\4\uffff\6\52\1\uffff\1\52\1\uffff\1\52\2\uffff\1\52\13"+
            "\uffff\2\52\5\uffff\5\52\1\uffff\3\52\1\uffff\15\52",
            "\1\56",
            "\1\uffff",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "104:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_46 = input.LA(1);

                         
                        int index66_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred121_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index66_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA68_eotS =
        "\14\uffff";
    static final String DFA68_eofS =
        "\14\uffff";
    static final String DFA68_minS =
        "\1\u00a3\2\uffff\1\43\5\uffff\1\0\2\uffff";
    static final String DFA68_maxS =
        "\1\u00df\2\uffff\1\43\5\uffff\1\0\2\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA68_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\7\65\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "109:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA68_9 = input.LA(1);

                         
                        int index68_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred144_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index68_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA70_eotS =
        "\127\uffff";
    static final String DFA70_eofS =
        "\127\uffff";
    static final String DFA70_minS =
        "\1\44\2\uffff\16\0\1\uffff\5\0\30\uffff\4\0\44\uffff";
    static final String DFA70_maxS =
        "\1\u00df\2\uffff\16\0\1\uffff\5\0\30\uffff\4\0\44\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\1\1\2\16\uffff\1\6\6\uffff\1\10\1\11\1\14\1\15\1\17\1"+
        "\20\1\24\1\25\1\26\1\27\1\33\1\34\1\35\1\36\1\37\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\1\47\1\50\4\uffff\1\55\1\56\1\57\1\60\1\61\1\64"+
        "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\3\uffff\1\3\1\5\1\7\1\30\1\63"+
        "\1\4\1\22\1\23\1\32\1\62\1\21\1\40\1\16\1\31\1\12\1\13\1\51\1\52"+
        "\1\53\1\54";
    static final String DFA70_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\30\uffff\1\23\1\24\1\25\1"+
        "\26\44\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\7\1\15\1\17\1\10\1\66\1\40\1\uffff\1\16\1\30\20\uffff\1\35"+
            "\1\25\1\36\1\uffff\1\6\1\46\1\37\1\41\1\55\1\24\1\42\1\43\1"+
            "\44\1\45\1\22\1\47\1\50\1\51\1\52\1\53\1\20\4\uffff\1\23\1\64"+
            "\11\uffff\1\21\1\uffff\1\54\4\uffff\1\67\1\uffff\1\70\1\uffff"+
            "\1\71\5\uffff\1\72\1\uffff\1\56\3\uffff\1\73\1\uffff\1\34\1"+
            "\63\3\uffff\1\31\1\uffff\1\4\5\uffff\1\65\1\uffff\1\3\17\uffff"+
            "\1\5\4\uffff\1\21\4\uffff\1\77\1\74\1\75\5\uffff\1\11\1\12\1"+
            "\13\1\14\2\uffff\1\26\1\uffff\1\32\2\uffff\1\33\13\uffff\1\1"+
            "\1\2\14\uffff\1\76\10\uffff\1\57\1\60\1\61\1\62\3\77",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "112:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_3 = input.LA(1);

                         
                        int index70_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred157_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_4 = input.LA(1);

                         
                        int index70_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred157_ChemicalChunker()) ) {s = 24;}

                         
                        input.seek(index70_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA70_5 = input.LA(1);

                         
                        int index70_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred157_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred167_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred168_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 75;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index70_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA70_6 = input.LA(1);

                         
                        int index70_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred157_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index70_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA70_7 = input.LA(1);

                         
                        int index70_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred157_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred167_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 75;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index70_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA70_8 = input.LA(1);

                         
                        int index70_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred157_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 77;}

                        else if ( (synpred167_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 75;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index70_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA70_9 = input.LA(1);

                         
                        int index70_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA70_10 = input.LA(1);

                         
                        int index70_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA70_11 = input.LA(1);

                         
                        int index70_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA70_12 = input.LA(1);

                         
                        int index70_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA70_13 = input.LA(1);

                         
                        int index70_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_13);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA70_14 = input.LA(1);

                         
                        int index70_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA70_15 = input.LA(1);

                         
                        int index70_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA70_16 = input.LA(1);

                         
                        int index70_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA70_18 = input.LA(1);

                         
                        int index70_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index70_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA70_19 = input.LA(1);

                         
                        int index70_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred163_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index70_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA70_20 = input.LA(1);

                         
                        int index70_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index70_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA70_21 = input.LA(1);

                         
                        int index70_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred159_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index70_21);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA70_22 = input.LA(1);

                         
                        int index70_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred160_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index70_22);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA70_47 = input.LA(1);

                         
                        int index70_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_ChemicalChunker()) ) {s = 83;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index70_47);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA70_48 = input.LA(1);

                         
                        int index70_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 84;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index70_48);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA70_49 = input.LA(1);

                         
                        int index70_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_ChemicalChunker()) ) {s = 85;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index70_49);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA70_50 = input.LA(1);

                         
                        int index70_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 86;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index70_50);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA75_eotS =
        "\13\uffff";
    static final String DFA75_eofS =
        "\13\uffff";
    static final String DFA75_minS =
        "\1\44\1\43\1\uffff\1\45\2\43\1\0\1\44\1\uffff\1\43\1\0";
    static final String DFA75_maxS =
        "\1\u00df\1\43\1\uffff\1\u00b1\2\43\1\0\1\u00df\1\uffff\1\43\1\0";
    static final String DFA75_acceptS =
        "\2\uffff\1\2\5\uffff\1\1\2\uffff";
    static final String DFA75_specialS =
        "\6\uffff\1\1\3\uffff\1\0}>";
    static final String[] DFA75_transitionS = {
            "\6\2\1\uffff\2\2\20\uffff\3\2\1\uffff\21\2\4\uffff\2\2\11\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\17\uffff\1\1\4\uffff\1\2\4\uffff"+
            "\3\2\5\uffff\4\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff"+
            "\2\2\14\uffff\1\2\10\uffff\7\2",
            "\1\3",
            "",
            "\2\2\3\uffff\2\2\24\uffff\3\2\2\uffff\1\2\11\uffff\1\2\60\uffff"+
            "\1\5\3\uffff\1\2\1\uffff\1\2\22\uffff\1\4\21\uffff\4\2\2\uffff"+
            "\1\2",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\11\5\2\1\uffff\2\2\20\uffff\3\2\1\uffff\21\2\4\uffff\2\2"+
            "\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff\1"+
            "\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\17\uffff\1\2\4\uffff"+
            "\1\2\4\uffff\3\2\5\uffff\4\2\2\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\13\uffff\2\2\14\uffff\1\2\10\uffff\7\2",
            "",
            "\1\12",
            "\1\uffff"
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "117:9: ( numberratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA76_eotS =
        "\12\uffff";
    static final String DFA76_eofS =
        "\1\1\4\uffff\1\1\4\uffff";
    static final String DFA76_minS =
        "\1\44\1\uffff\2\43\1\0\1\44\1\uffff\1\43\1\0\1\uffff";
    static final String DFA76_maxS =
        "\1\u00df\1\uffff\2\43\1\0\1\u00df\1\uffff\1\43\1\0\1\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\3\4\uffff\1\2\2\uffff\1\1";
    static final String DFA76_specialS =
        "\4\uffff\1\1\3\uffff\1\0\1\uffff}>";
    static final String[] DFA76_transitionS = {
            "\6\1\1\uffff\25\1\1\uffff\77\1\1\3\1\1\1\uffff\10\1\15\uffff"+
            "\1\1\1\2\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff"+
            "\15\1",
            "",
            "\1\4",
            "\1\5",
            "\1\uffff",
            "\1\7\5\1\1\uffff\25\1\1\uffff\101\1\1\uffff\10\1\15\uffff\2"+
            "\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1"+
            "\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff"+
            "\15\1",
            "",
            "\1\10",
            "\1\uffff",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()+ loopback of 118:19: ( colon oscarcd | cd )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA76_4 = input.LA(1);

                         
                        int index76_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\u008f\uffff";
    static final String DFA84_eofS =
        "\u008f\uffff";
    static final String DFA84_minS =
        "\1\44\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\14\0\1\uffff\1\0\57\uffff"+
        "\1\0\40\uffff";
    static final String DFA84_maxS =
        "\1\u00df\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\14\0\1\uffff\1\0\57"+
        "\uffff\1\0\40\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\2\54\uffff\1\5\1\6\14\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\3\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA84_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\57\uffff\1\24\40\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\55\1\66\1\70\1\56\2\77\1\uffff\1\67\1\74\11\157\1\156\6\157"+
            "\3\77\1\uffff\1\54\17\77\1\71\4\2\2\77\11\2\1\77\1\2\1\77\4"+
            "\2\1\77\1\2\1\77\1\2\1\77\5\2\1\77\1\2\1\77\3\2\1\77\1\2\1\45"+
            "\1\77\3\2\1\77\1\u0080\1\73\2\uffff\1\75\1\61\1\60\1\77\1\uffff"+
            "\1\72\17\uffff\1\53\4\uffff\1\77\4\uffff\1\77\1\1\1\77\4\uffff"+
            "\1\157\1\62\1\63\1\64\1\65\1\57\1\uffff\1\52\1\uffff\1\77\2"+
            "\uffff\1\77\13\uffff\2\77\14\uffff\1\76\1\157\1\uffff\6\2\7"+
            "\77",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "138:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_37 = input.LA(1);

                         
                        int index84_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_37);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_42 = input.LA(1);

                         
                        int index84_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_42);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_43 = input.LA(1);

                         
                        int index84_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index84_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA84_44 = input.LA(1);

                         
                        int index84_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA84_45 = input.LA(1);

                         
                        int index84_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA84_46 = input.LA(1);

                         
                        int index84_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA84_49 = input.LA(1);

                         
                        int index84_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index84_49);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA84_50 = input.LA(1);

                         
                        int index84_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA84_51 = input.LA(1);

                         
                        int index84_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_51);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA84_52 = input.LA(1);

                         
                        int index84_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_52);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA84_53 = input.LA(1);

                         
                        int index84_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA84_54 = input.LA(1);

                         
                        int index84_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA84_55 = input.LA(1);

                         
                        int index84_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_55);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA84_56 = input.LA(1);

                         
                        int index84_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA84_57 = input.LA(1);

                         
                        int index84_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_57);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA84_58 = input.LA(1);

                         
                        int index84_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA84_59 = input.LA(1);

                         
                        int index84_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_59);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA84_60 = input.LA(1);

                         
                        int index84_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_60);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA84_62 = input.LA(1);

                         
                        int index84_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index84_62);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA84_110 = input.LA(1);

                         
                        int index84_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred245_ChemicalChunker()) ) {s = 111;}

                         
                        input.seek(index84_110);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA85_eotS =
        "\u0091\uffff";
    static final String DFA85_eofS =
        "\u0091\uffff";
    static final String DFA85_minS =
        "\1\44\1\uffff\3\0\43\uffff\1\0\4\uffff\5\0\2\uffff\12\0\1\uffff"+
        "\1\0\57\uffff\1\0\41\uffff";
    static final String DFA85_maxS =
        "\1\u00df\1\uffff\3\0\43\uffff\1\0\4\uffff\5\0\2\uffff\12\0\1\uffff"+
        "\1\0\57\uffff\1\0\41\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\27\3\uffff\1\3\54\uffff\1\6\1\7\12\uffff\1\14\1\uffff"+
        "\1\17\57\uffff\1\21\20\uffff\1\25\1\1\1\12\1\13\1\23\1\11\1\2\1"+
        "\4\1\16\1\22\1\5\1\10\1\26\1\24\1\15\1\20";
    static final String DFA85_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\57\uffff\1\24\41\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\57\1\71\1\73\1\60\2\100\1\uffff\1\72\1\75\11\160\1\157\6"+
            "\160\3\100\1\uffff\1\56\17\100\1\74\4\5\2\100\11\5\1\100\1\5"+
            "\1\100\4\5\1\100\1\5\1\100\1\5\1\100\5\5\1\100\1\5\1\100\3\5"+
            "\1\100\1\5\1\50\1\100\3\5\1\61\1\u0081\1\2\2\uffff\1\76\1\64"+
            "\1\63\1\100\1\uffff\1\3\1\1\16\uffff\1\55\4\uffff\1\100\4\uffff"+
            "\1\100\1\4\1\100\4\uffff\1\160\1\65\1\66\1\67\1\70\1\62\1\uffff"+
            "\1\100\1\uffff\1\100\2\uffff\1\100\13\uffff\2\100\14\uffff\1"+
            "\77\1\160\1\uffff\6\5\7\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "()+ loopback of 138:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_2 = input.LA(1);

                         
                        int index85_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred260_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index85_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA85_3 = input.LA(1);

                         
                        int index85_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred260_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA85_4 = input.LA(1);

                         
                        int index85_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA85_40 = input.LA(1);

                         
                        int index85_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_40);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA85_45 = input.LA(1);

                         
                        int index85_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred260_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred267_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index85_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA85_46 = input.LA(1);

                         
                        int index85_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred260_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_46);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA85_47 = input.LA(1);

                         
                        int index85_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred260_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA85_48 = input.LA(1);

                         
                        int index85_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred260_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA85_49 = input.LA(1);

                         
                        int index85_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA85_52 = input.LA(1);

                         
                        int index85_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred271_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_52);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA85_53 = input.LA(1);

                         
                        int index85_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_53);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA85_54 = input.LA(1);

                         
                        int index85_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_54);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA85_55 = input.LA(1);

                         
                        int index85_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA85_56 = input.LA(1);

                         
                        int index85_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA85_57 = input.LA(1);

                         
                        int index85_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_57);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA85_58 = input.LA(1);

                         
                        int index85_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_58);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA85_59 = input.LA(1);

                         
                        int index85_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_59);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA85_60 = input.LA(1);

                         
                        int index85_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_60);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA85_61 = input.LA(1);

                         
                        int index85_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_61);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA85_63 = input.LA(1);

                         
                        int index85_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index85_63);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA85_111 = input.LA(1);

                         
                        int index85_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred266_ChemicalChunker()) ) {s = 112;}

                         
                        input.seek(index85_111);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\u008f\uffff";
    static final String DFA87_eofS =
        "\u008f\uffff";
    static final String DFA87_minS =
        "\1\44\2\0\43\uffff\1\0\4\uffff\4\0\2\uffff\14\0\1\uffff\1\0\57\uffff"+
        "\1\0\40\uffff";
    static final String DFA87_maxS =
        "\1\u00df\2\0\43\uffff\1\0\4\uffff\4\0\2\uffff\14\0\1\uffff\1\0\57"+
        "\uffff\1\0\40\uffff";
    static final String DFA87_acceptS =
        "\3\uffff\1\3\53\uffff\1\5\1\6\14\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\2\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA87_specialS =
        "\1\uffff\1\0\1\1\43\uffff\1\2\4\uffff\1\3\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\57\uffff\1\24\40\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\55\1\66\1\70\1\56\2\77\1\uffff\1\67\1\74\11\157\1\156\6\157"+
            "\3\77\1\uffff\1\54\17\77\1\71\4\3\2\77\11\3\1\77\1\3\1\77\4"+
            "\3\1\77\1\3\1\77\1\3\1\77\5\3\1\77\1\3\1\77\3\3\1\77\1\3\1\46"+
            "\1\77\3\3\1\77\1\u0080\1\73\2\uffff\1\75\1\61\1\57\1\77\1\uffff"+
            "\1\72\17\uffff\1\53\4\uffff\1\77\4\uffff\1\77\1\1\1\77\4\uffff"+
            "\1\157\1\62\1\63\1\64\1\65\1\60\1\uffff\1\2\1\uffff\1\77\2\uffff"+
            "\1\77\13\uffff\2\77\14\uffff\1\76\1\157\1\uffff\6\3\7\77",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "143:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_1 = input.LA(1);

                         
                        int index87_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA87_2 = input.LA(1);

                         
                        int index87_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA87_38 = input.LA(1);

                         
                        int index87_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_38);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA87_43 = input.LA(1);

                         
                        int index87_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index87_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA87_44 = input.LA(1);

                         
                        int index87_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA87_45 = input.LA(1);

                         
                        int index87_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA87_46 = input.LA(1);

                         
                        int index87_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA87_49 = input.LA(1);

                         
                        int index87_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index87_49);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA87_50 = input.LA(1);

                         
                        int index87_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA87_51 = input.LA(1);

                         
                        int index87_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_51);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA87_52 = input.LA(1);

                         
                        int index87_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_52);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA87_53 = input.LA(1);

                         
                        int index87_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA87_54 = input.LA(1);

                         
                        int index87_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA87_55 = input.LA(1);

                         
                        int index87_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_55);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA87_56 = input.LA(1);

                         
                        int index87_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA87_57 = input.LA(1);

                         
                        int index87_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_57);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA87_58 = input.LA(1);

                         
                        int index87_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA87_59 = input.LA(1);

                         
                        int index87_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_59);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA87_60 = input.LA(1);

                         
                        int index87_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_60);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA87_62 = input.LA(1);

                         
                        int index87_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index87_62);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA87_110 = input.LA(1);

                         
                        int index87_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 111;}

                         
                        input.seek(index87_110);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA88_eotS =
        "\u0090\uffff";
    static final String DFA88_eofS =
        "\1\1\u008f\uffff";
    static final String DFA88_minS =
        "\1\44\1\uffff\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\14\0\1\uffff"+
        "\1\0\57\uffff\1\0\40\uffff";
    static final String DFA88_maxS =
        "\1\u00df\1\uffff\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\14\0\1\uffff"+
        "\1\0\57\uffff\1\0\40\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\26\1\uffff\1\2\54\uffff\1\5\1\6\14\uffff\1\13\1\uffff"+
        "\1\16\57\uffff\1\20\20\uffff\1\24\1\1\1\3\1\11\1\12\1\15\1\21\1"+
        "\4\1\7\1\25\1\10\1\23\1\22\1\14\1\17";
    static final String DFA88_specialS =
        "\2\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\57\uffff\1\24\40\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\55\1\67\1\71\1\56\2\100\1\uffff\1\70\1\75\11\160\1\157\6"+
            "\160\3\100\1\uffff\1\54\17\100\1\72\4\3\2\100\11\3\1\100\1\3"+
            "\1\100\4\3\1\100\1\3\1\100\1\3\1\100\5\3\1\100\1\3\1\100\3\3"+
            "\1\100\1\3\1\46\1\100\3\3\1\57\1\u0081\1\74\2\uffff\1\76\1\62"+
            "\1\60\1\100\1\uffff\1\73\17\uffff\1\53\4\uffff\1\100\4\uffff"+
            "\1\100\1\2\1\100\4\uffff\1\160\1\63\1\64\1\65\1\66\1\61\1\uffff"+
            "\1\100\1\uffff\1\100\2\uffff\1\100\13\uffff\2\100\14\uffff\1"+
            "\77\1\160\1\uffff\6\3\7\100",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "()+ loopback of 143:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA88_38 = input.LA(1);

                         
                        int index88_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_38);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA88_43 = input.LA(1);

                         
                        int index88_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index88_43);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA88_44 = input.LA(1);

                         
                        int index88_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_44);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA88_45 = input.LA(1);

                         
                        int index88_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA88_46 = input.LA(1);

                         
                        int index88_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_46);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA88_47 = input.LA(1);

                         
                        int index88_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA88_50 = input.LA(1);

                         
                        int index88_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index88_50);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA88_51 = input.LA(1);

                         
                        int index88_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_51);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA88_52 = input.LA(1);

                         
                        int index88_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_52);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA88_53 = input.LA(1);

                         
                        int index88_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_53);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA88_54 = input.LA(1);

                         
                        int index88_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_54);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA88_55 = input.LA(1);

                         
                        int index88_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA88_56 = input.LA(1);

                         
                        int index88_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA88_57 = input.LA(1);

                         
                        int index88_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_57);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA88_58 = input.LA(1);

                         
                        int index88_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_58);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA88_59 = input.LA(1);

                         
                        int index88_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_59);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA88_60 = input.LA(1);

                         
                        int index88_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_60);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA88_61 = input.LA(1);

                         
                        int index88_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_61);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA88_63 = input.LA(1);

                         
                        int index88_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index88_63);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA88_111 = input.LA(1);

                         
                        int index88_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 112;}

                         
                        input.seek(index88_111);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\47\uffff";
    static final String DFA92_eofS =
        "\47\uffff";
    static final String DFA92_minS =
        "\1\45\40\0\6\uffff";
    static final String DFA92_maxS =
        "\1\u00d1\40\0\6\uffff";
    static final String DFA92_acceptS =
        "\41\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\6\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\13\1\15\4\uffff\1\14\1\uffff\1\20\1\21\1\17\1\25\1\26\1\34"+
            "\1\35\1\22\1\33\1\27\1\31\1\23\1\24\1\1\1\32\1\30\2\uffff\1"+
            "\41\7\uffff\1\42\121\uffff\1\40\4\uffff\1\37\13\uffff\1\16\1"+
            "\7\1\10\1\11\1\12\32\uffff\1\2\1\3\1\uffff\1\4\1\6\1\uffff\1"+
            "\5\1\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "151:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 35;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA92_5 = input.LA(1);

                         
                        int index92_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA92_6 = input.LA(1);

                         
                        int index92_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA92_7 = input.LA(1);

                         
                        int index92_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA92_8 = input.LA(1);

                         
                        int index92_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA92_9 = input.LA(1);

                         
                        int index92_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA92_10 = input.LA(1);

                         
                        int index92_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA92_11 = input.LA(1);

                         
                        int index92_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA92_12 = input.LA(1);

                         
                        int index92_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA92_13 = input.LA(1);

                         
                        int index92_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA92_14 = input.LA(1);

                         
                        int index92_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA92_15 = input.LA(1);

                         
                        int index92_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred329_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA92_17 = input.LA(1);

                         
                        int index92_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA92_18 = input.LA(1);

                         
                        int index92_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA92_19 = input.LA(1);

                         
                        int index92_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA92_20 = input.LA(1);

                         
                        int index92_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA92_21 = input.LA(1);

                         
                        int index92_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 38;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA92_22 = input.LA(1);

                         
                        int index92_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA92_23 = input.LA(1);

                         
                        int index92_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA92_24 = input.LA(1);

                         
                        int index92_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA92_25 = input.LA(1);

                         
                        int index92_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA92_26 = input.LA(1);

                         
                        int index92_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA92_27 = input.LA(1);

                         
                        int index92_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA92_28 = input.LA(1);

                         
                        int index92_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA92_29 = input.LA(1);

                         
                        int index92_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA92_30 = input.LA(1);

                         
                        int index92_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA92_31 = input.LA(1);

                         
                        int index92_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA92_32 = input.LA(1);

                         
                        int index92_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA96_eotS =
        "\33\uffff";
    static final String DFA96_eofS =
        "\33\uffff";
    static final String DFA96_minS =
        "\1\45\1\uffff\14\43\14\0\1\uffff";
    static final String DFA96_maxS =
        "\1\u00d1\1\uffff\14\43\14\0\1\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\2\30\uffff\1\1";
    static final String DFA96_specialS =
        "\16\uffff\1\2\1\7\1\0\1\1\1\6\1\11\1\10\1\5\1\13\1\12\1\3\1\4\1"+
        "\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\13\1\15\4\uffff\1\14\1\uffff\20\1\2\uffff\1\1\131\uffff\1"+
            "\1\4\uffff\1\1\13\uffff\1\1\1\7\1\10\1\11\1\12\32\uffff\1\2"+
            "\1\3\1\uffff\1\4\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "()* loopback of 163:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_16 = input.LA(1);

                         
                        int index96_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA96_17 = input.LA(1);

                         
                        int index96_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA96_14 = input.LA(1);

                         
                        int index96_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA96_24 = input.LA(1);

                         
                        int index96_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_24);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA96_25 = input.LA(1);

                         
                        int index96_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_25);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA96_21 = input.LA(1);

                         
                        int index96_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA96_18 = input.LA(1);

                         
                        int index96_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA96_15 = input.LA(1);

                         
                        int index96_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA96_20 = input.LA(1);

                         
                        int index96_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA96_19 = input.LA(1);

                         
                        int index96_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA96_23 = input.LA(1);

                         
                        int index96_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA96_22 = input.LA(1);

                         
                        int index96_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA104_eotS =
        "\21\uffff";
    static final String DFA104_eofS =
        "\21\uffff";
    static final String DFA104_minS =
        "\1\44\1\uffff\7\43\1\uffff\7\0";
    static final String DFA104_maxS =
        "\1\u00cf\1\uffff\7\43\1\uffff\7\0";
    static final String DFA104_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA104_specialS =
        "\12\uffff\1\6\1\5\1\1\1\4\1\3\1\2\1\0}>";
    static final String[] DFA104_transitionS = {
            "\1\1\1\6\1\10\1\1\3\uffff\1\7\25\uffff\1\1\17\uffff\1\1\57\uffff"+
            "\1\1\7\uffff\1\1\17\uffff\1\1\21\uffff\1\2\1\3\1\4\1\5\32\uffff"+
            "\2\11\1\uffff\2\11\1\uffff\1\11",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()* loopback of 173:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_16 = input.LA(1);

                         
                        int index104_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA104_12 = input.LA(1);

                         
                        int index104_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA104_15 = input.LA(1);

                         
                        int index104_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA104_14 = input.LA(1);

                         
                        int index104_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA104_13 = input.LA(1);

                         
                        int index104_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA104_11 = input.LA(1);

                         
                        int index104_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA104_10 = input.LA(1);

                         
                        int index104_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\33\uffff";
    static final String DFA108_eofS =
        "\33\uffff";
    static final String DFA108_minS =
        "\1\45\14\43\1\uffff\14\0\1\uffff";
    static final String DFA108_maxS =
        "\1\u00d1\14\43\1\uffff\14\0\1\uffff";
    static final String DFA108_acceptS =
        "\15\uffff\1\2\14\uffff\1\1";
    static final String DFA108_specialS =
        "\16\uffff\1\2\1\6\1\1\1\3\1\7\1\11\1\12\1\5\1\13\1\0\1\4\1\10\1"+
        "\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\12\1\14\4\uffff\1\13\1\uffff\20\15\12\uffff\1\15\121\uffff"+
            "\1\15\4\uffff\1\15\13\uffff\1\15\1\6\1\7\1\10\1\11\32\uffff"+
            "\1\1\1\2\1\uffff\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "181:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_23 = input.LA(1);

                         
                        int index108_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_23);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA108_16 = input.LA(1);

                         
                        int index108_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA108_14 = input.LA(1);

                         
                        int index108_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA108_17 = input.LA(1);

                         
                        int index108_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA108_24 = input.LA(1);

                         
                        int index108_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA108_21 = input.LA(1);

                         
                        int index108_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA108_15 = input.LA(1);

                         
                        int index108_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA108_18 = input.LA(1);

                         
                        int index108_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_18);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA108_25 = input.LA(1);

                         
                        int index108_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA108_19 = input.LA(1);

                         
                        int index108_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA108_20 = input.LA(1);

                         
                        int index108_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA108_22 = input.LA(1);

                         
                        int index108_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\u008e\uffff";
    static final String DFA122_eofS =
        "\1\1\u008d\uffff";
    static final String DFA122_minS =
        "\1\44\5\uffff\7\0\1\uffff\2\0\3\uffff\15\0\156\uffff";
    static final String DFA122_maxS =
        "\1\u00df\5\uffff\7\0\1\uffff\2\0\3\uffff\15\0\156\uffff";
    static final String DFA122_acceptS =
        "\1\uffff\1\2\u008b\uffff\1\1";
    static final String DFA122_specialS =
        "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\1\10\3\uffff\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\156\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\27\1\12\1\14\1\30\2\1\1\uffff\1\13\22\1\1\35\1\1\1\uffff"+
            "\1\26\4\1\1\34\4\1\1\31\5\1\1\33\4\1\1\32\12\1\1\37\37\1\1\17"+
            "\1\uffff\6\1\1\24\1\1\15\uffff\1\16\1\25\4\uffff\1\23\1\1\3"+
            "\uffff\3\1\4\uffff\1\1\1\6\1\7\1\10\1\11\1\1\1\uffff\1\36\1"+
            "\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1"+
            "\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "()* loopback of 197:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_6 = input.LA(1);

                         
                        int index122_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA122_7 = input.LA(1);

                         
                        int index122_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA122_8 = input.LA(1);

                         
                        int index122_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA122_9 = input.LA(1);

                         
                        int index122_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA122_10 = input.LA(1);

                         
                        int index122_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA122_11 = input.LA(1);

                         
                        int index122_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA122_12 = input.LA(1);

                         
                        int index122_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA122_14 = input.LA(1);

                         
                        int index122_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA122_15 = input.LA(1);

                         
                        int index122_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA122_19 = input.LA(1);

                         
                        int index122_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA122_20 = input.LA(1);

                         
                        int index122_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA122_21 = input.LA(1);

                         
                        int index122_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA122_22 = input.LA(1);

                         
                        int index122_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA122_23 = input.LA(1);

                         
                        int index122_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA122_24 = input.LA(1);

                         
                        int index122_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA122_25 = input.LA(1);

                         
                        int index122_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA122_26 = input.LA(1);

                         
                        int index122_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA122_27 = input.LA(1);

                         
                        int index122_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA122_28 = input.LA(1);

                         
                        int index122_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA122_29 = input.LA(1);

                         
                        int index122_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA122_30 = input.LA(1);

                         
                        int index122_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA122_31 = input.LA(1);

                         
                        int index122_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA121_eotS =
        "\27\uffff";
    static final String DFA121_eofS =
        "\27\uffff";
    static final String DFA121_minS =
        "\1\44\17\uffff\1\0\6\uffff";
    static final String DFA121_maxS =
        "\1\u00b1\17\uffff\1\0\6\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA121_specialS =
        "\20\uffff\1\0\6\uffff}>";
    static final String[] DFA121_transitionS = {
            "\4\1\3\uffff\1\1\22\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\1\1\5\uffff\1\1\4\uffff\1\1\12\uffff\1\1\37\uffff\1\20\7\uffff"+
            "\1\1\16\uffff\1\26\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 197:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_16 = input.LA(1);

                         
                        int index121_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA128_eotS =
        "\35\uffff";
    static final String DFA128_eofS =
        "\1\1\34\uffff";
    static final String DFA128_minS =
        "\1\44\1\uffff\23\0\10\uffff";
    static final String DFA128_maxS =
        "\1\u00b1\1\uffff\23\0\10\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\11\23\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA128_specialS =
        "\2\uffff\1\12\1\21\1\10\1\15\1\5\1\17\1\0\1\3\1\16\1\13\1\14\1\7"+
        "\1\6\1\22\1\20\1\4\1\1\1\11\1\2\10\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\5\1\13\1\15\1\6\3\uffff\1\14\22\uffff\1\23\2\uffff\1\4\4"+
            "\uffff\1\22\4\uffff\1\16\5\uffff\1\21\4\uffff\1\17\12\uffff"+
            "\1\1\37\uffff\1\20\7\uffff\1\2\17\uffff\1\3\21\uffff\1\7\1\10"+
            "\1\11\1\12\2\uffff\1\24",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()+ loopback of 204:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_8 = input.LA(1);

                         
                        int index128_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA128_18 = input.LA(1);

                         
                        int index128_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA128_20 = input.LA(1);

                         
                        int index128_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA128_9 = input.LA(1);

                         
                        int index128_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA128_17 = input.LA(1);

                         
                        int index128_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA128_6 = input.LA(1);

                         
                        int index128_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA128_14 = input.LA(1);

                         
                        int index128_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA128_13 = input.LA(1);

                         
                        int index128_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA128_4 = input.LA(1);

                         
                        int index128_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA128_19 = input.LA(1);

                         
                        int index128_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA128_2 = input.LA(1);

                         
                        int index128_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_2);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA128_11 = input.LA(1);

                         
                        int index128_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA128_12 = input.LA(1);

                         
                        int index128_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA128_5 = input.LA(1);

                         
                        int index128_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_5);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA128_10 = input.LA(1);

                         
                        int index128_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_10);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA128_7 = input.LA(1);

                         
                        int index128_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_7);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA128_16 = input.LA(1);

                         
                        int index128_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA128_3 = input.LA(1);

                         
                        int index128_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_3);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA128_15 = input.LA(1);

                         
                        int index128_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\u008e\uffff";
    static final String DFA132_eofS =
        "\1\5\u008d\uffff";
    static final String DFA132_minS =
        "\1\44\4\0\u0089\uffff";
    static final String DFA132_maxS =
        "\1\u00df\4\0\u0089\uffff";
    static final String DFA132_acceptS =
        "\5\uffff\1\2\u0087\uffff\1\1";
    static final String DFA132_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u0089\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\3\2\5\1\4\2\5\1\uffff\25\5\1\uffff\1\2\100\5\1\uffff\10\5"+
            "\15\uffff\1\5\1\1\4\uffff\2\5\3\uffff\3\5\4\uffff\6\5\1\uffff"+
            "\1\5\1\uffff\1\5\2\uffff\1\5\13\uffff\2\5\5\uffff\5\5\1\uffff"+
            "\3\5\1\uffff\15\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "207:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_2 = input.LA(1);

                         
                        int index132_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA132_4 = input.LA(1);

                         
                        int index132_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\12\uffff";
    static final String DFA133_eofS =
        "\12\uffff";
    static final String DFA133_minS =
        "\1\44\1\43\2\uffff\1\100\1\uffff\1\43\2\uffff\1\100";
    static final String DFA133_maxS =
        "\1\u0099\1\43\2\uffff\1\u00b1\1\uffff\1\43\2\uffff\1\u0099";
    static final String DFA133_acceptS =
        "\2\uffff\1\1\1\4\1\uffff\1\2\1\uffff\1\3\1\5\1\uffff";
    static final String DFA133_specialS =
        "\12\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\2\uffff\1\3\31\uffff\1\2\127\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\7\1\2\1\5\2\uffff\1\10\100\uffff\1\3\22\uffff\1\6\27\uffff"+
            "\1\3",
            "",
            "\1\11",
            "",
            "",
            "\1\7\1\2\1\5\2\uffff\1\10\123\uffff\1\6"
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "208:1: measurementtypes : ( molar | amount | mass | percent | volume );";
        }
    }
    static final String DFA135_eotS =
        "\14\uffff";
    static final String DFA135_eofS =
        "\3\uffff\1\5\10\uffff";
    static final String DFA135_minS =
        "\1\121\1\43\1\uffff\1\44\1\43\1\uffff\1\43\1\uffff\1\0\1\121\2\uffff";
    static final String DFA135_maxS =
        "\1\u0089\1\43\1\uffff\1\u00df\1\43\1\uffff\1\43\1\uffff\1\0\1\121"+
        "\2\uffff";
    static final String DFA135_acceptS =
        "\2\uffff\1\4\2\uffff\1\5\1\uffff\1\3\2\uffff\1\1\1\2";
    static final String DFA135_specialS =
        "\10\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\1\67\uffff\1\2",
            "\1\3",
            "",
            "\6\5\1\uffff\25\5\1\uffff\20\5\1\4\60\5\1\7\1\5\1\6\6\5\15"+
            "\uffff\2\5\4\uffff\2\5\3\uffff\3\5\4\uffff\6\5\1\uffff\1\5\1"+
            "\uffff\1\5\2\uffff\1\5\13\uffff\2\5\5\uffff\5\5\1\uffff\3\5"+
            "\1\uffff\15\5",
            "\1\10",
            "",
            "\1\11",
            "",
            "\1\uffff",
            "\1\13",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "212:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_9 = input.LA(1);

                         
                        int index135_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA135_9==81) ) {s = 11;}

                        else if ( (synpred415_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index135_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_8 = input.LA(1);

                         
                        int index135_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index135_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\21\uffff";
    static final String DFA136_eofS =
        "\1\10\20\uffff";
    static final String DFA136_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA136_maxS =
        "\1\u00df\7\43\1\uffff\7\0\1\uffff";
    static final String DFA136_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA136_specialS =
        "\11\uffff\1\2\1\1\1\3\1\0\1\6\1\4\1\5\1\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\10\1\5\1\7\3\10\1\uffff\1\6\24\10\1\uffff\101\10\1\uffff"+
            "\10\10\15\uffff\2\10\4\uffff\2\10\3\uffff\3\10\4\uffff\1\10"+
            "\1\1\1\2\1\3\1\4\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10"+
            "\13\uffff\2\10\5\uffff\5\10\1\uffff\3\10\1\uffff\15\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "212:93: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_12 = input.LA(1);

                         
                        int index136_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_10 = input.LA(1);

                         
                        int index136_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA136_9 = input.LA(1);

                         
                        int index136_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA136_11 = input.LA(1);

                         
                        int index136_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA136_14 = input.LA(1);

                         
                        int index136_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA136_15 = input.LA(1);

                         
                        int index136_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA136_13 = input.LA(1);

                         
                        int index136_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\u008e\uffff";
    static final String DFA143_eofS =
        "\1\4\u008d\uffff";
    static final String DFA143_minS =
        "\1\44\3\0\u008a\uffff";
    static final String DFA143_maxS =
        "\1\u00df\3\0\u008a\uffff";
    static final String DFA143_acceptS =
        "\4\uffff\1\2\u0088\uffff\1\1";
    static final String DFA143_specialS =
        "\1\uffff\1\0\1\1\1\2\u008a\uffff}>";
    static final String[] DFA143_transitionS = {
            "\6\4\1\uffff\25\4\1\uffff\100\4\1\3\1\uffff\6\4\1\2\1\4\15\uffff"+
            "\1\4\1\1\4\uffff\2\4\3\uffff\3\4\4\uffff\6\4\1\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\4\13\uffff\2\4\5\uffff\5\4\1\uffff\3\4\1\uffff"+
            "\15\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "228:42: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred426_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred426_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred426_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\17\uffff";
    static final String DFA144_eofS =
        "\17\uffff";
    static final String DFA144_minS =
        "\1\44\10\uffff\2\0\4\uffff";
    static final String DFA144_maxS =
        "\1\u00ae\10\uffff\2\0\4\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\3\11\uffff\1\1\2\uffff\1\2";
    static final String DFA144_specialS =
        "\11\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\13\2\1\1\13\3\uffff\1\1\25\uffff\1\13\17\uffff\1\1\57\uffff"+
            "\1\16\7\uffff\1\11\17\uffff\1\12\21\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 231:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred427_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred428_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred427_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred428_ChemicalChunker()) ) {s = 14;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA145_eotS =
        "\14\uffff";
    static final String DFA145_eofS =
        "\1\2\13\uffff";
    static final String DFA145_minS =
        "\1\44\1\0\1\uffff\10\0\1\uffff";
    static final String DFA145_maxS =
        "\1\u00df\1\0\1\uffff\10\0\1\uffff";
    static final String DFA145_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA145_specialS =
        "\1\uffff\1\4\1\uffff\1\0\1\1\1\10\1\3\1\5\1\2\1\6\1\7\1\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\2\1\7\1\11\3\2\1\uffff\1\10\24\2\1\uffff\20\2\1\12\60\2\1"+
            "\uffff\6\2\1\1\1\2\15\uffff\2\2\4\uffff\2\2\3\uffff\3\2\4\uffff"+
            "\1\2\1\3\1\4\1\5\1\6\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2"+
            "\13\uffff\2\2\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()+ loopback of 231:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_3 = input.LA(1);

                         
                        int index145_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA145_4 = input.LA(1);

                         
                        int index145_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA145_8 = input.LA(1);

                         
                        int index145_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA145_6 = input.LA(1);

                         
                        int index145_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA145_7 = input.LA(1);

                         
                        int index145_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA145_9 = input.LA(1);

                         
                        int index145_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA145_10 = input.LA(1);

                         
                        int index145_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA145_5 = input.LA(1);

                         
                        int index145_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\u0090\uffff";
    static final String DFA146_eofS =
        "\1\1\u008f\uffff";
    static final String DFA146_minS =
        "\1\44\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\171\uffff";
    static final String DFA146_maxS =
        "\1\u00df\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\171\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\4\u008b\uffff\1\1\1\3\1\2";
    static final String DFA146_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\171\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\25\2\1\1\26\2\1\1\uffff\25\1\1\uffff\1\24\77\1\1\3\1\uffff"+
            "\6\1\1\21\1\1\15\uffff\1\1\1\23\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "()* loopback of 231:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred431_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_19 = input.LA(1);

                         
                        int index146_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred431_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_20 = input.LA(1);

                         
                        int index146_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred431_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_21 = input.LA(1);

                         
                        int index146_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred431_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_22 = input.LA(1);

                         
                        int index146_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred431_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA149_eotS =
        "\21\uffff";
    static final String DFA149_eofS =
        "\21\uffff";
    static final String DFA149_minS =
        "\1\44\6\0\12\uffff";
    static final String DFA149_maxS =
        "\1\u00ae\6\0\12\uffff";
    static final String DFA149_acceptS =
        "\7\uffff\1\3\7\uffff\1\1\1\2";
    static final String DFA149_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\12\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\25\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "236:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_1 = input.LA(1);

                         
                        int index149_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index149_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_4 = input.LA(1);

                         
                        int index149_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index149_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_5 = input.LA(1);

                         
                        int index149_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index149_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_6 = input.LA(1);

                         
                        int index149_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index149_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\u0090\uffff";
    static final String DFA153_eofS =
        "\1\1\u008f\uffff";
    static final String DFA153_minS =
        "\1\44\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\171\uffff";
    static final String DFA153_maxS =
        "\1\u00df\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\171\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\4\u008b\uffff\1\1\1\3\1\2";
    static final String DFA153_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\171\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\25\2\1\1\26\2\1\1\uffff\25\1\1\uffff\1\24\77\1\1\3\1\uffff"+
            "\6\1\1\21\1\1\15\uffff\1\1\1\23\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 247:25: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_3 = input.LA(1);

                         
                        int index153_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred440_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_17 = input.LA(1);

                         
                        int index153_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred440_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred441_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA153_19 = input.LA(1);

                         
                        int index153_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA153_20 = input.LA(1);

                         
                        int index153_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA153_21 = input.LA(1);

                         
                        int index153_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA153_22 = input.LA(1);

                         
                        int index153_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\105\uffff";
    static final String DFA155_eofS =
        "\1\1\104\uffff";
    static final String DFA155_minS =
        "\1\44\1\uffff\102\0\1\uffff";
    static final String DFA155_maxS =
        "\1\u00df\1\uffff\102\0\1\uffff";
    static final String DFA155_acceptS =
        "\1\uffff\1\2\102\uffff\1\1";
    static final String DFA155_specialS =
        "\2\uffff\1\16\1\42\1\54\1\2\1\41\1\43\1\35\1\65\1\55\1\23\1\45\1"+
        "\61\1\75\1\11\1\76\1\1\1\70\1\21\1\12\1\53\1\4\1\67\1\40\1\72\1"+
        "\6\1\63\1\56\1\74\1\0\1\31\1\52\1\46\1\17\1\36\1\30\1\3\1\60\1\44"+
        "\1\47\1\101\1\26\1\51\1\15\1\37\1\57\1\24\1\33\1\7\1\32\1\77\1\22"+
        "\1\34\1\71\1\25\1\20\1\66\1\5\1\10\1\73\1\64\1\100\1\62\1\50\1\14"+
        "\1\27\1\13\1\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\16\1\7\1\11\1\17\1\67\1\41\1\uffff\1\10\1\21\20\1\1\36\1"+
            "\30\1\37\1\uffff\1\15\1\47\1\40\1\42\1\56\1\27\1\43\1\44\1\45"+
            "\1\46\1\25\1\50\1\51\1\52\1\53\1\54\1\20\4\1\1\26\1\65\11\1"+
            "\1\32\1\1\1\55\4\1\1\70\1\1\1\71\1\1\1\72\5\1\1\73\1\1\1\57"+
            "\3\1\1\74\1\1\1\35\1\64\3\1\1\33\1\1\1\2\1\uffff\4\1\1\66\1"+
            "\1\1\12\1\1\15\uffff\1\1\1\14\4\uffff\1\24\1\1\3\uffff\1\102"+
            "\1\75\1\76\4\uffff\1\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\31\1\uffff"+
            "\1\34\2\uffff\1\13\13\uffff\1\22\1\23\5\uffff\5\1\1\uffff\1"+
            "\1\1\77\1\1\1\uffff\6\1\1\60\1\61\1\62\1\63\1\100\1\101\1\103",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "()+ loopback of 253:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_30 = input.LA(1);

                         
                        int index155_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_17 = input.LA(1);

                         
                        int index155_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA155_5 = input.LA(1);

                         
                        int index155_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA155_37 = input.LA(1);

                         
                        int index155_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_37);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA155_22 = input.LA(1);

                         
                        int index155_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA155_58 = input.LA(1);

                         
                        int index155_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_58);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA155_26 = input.LA(1);

                         
                        int index155_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_26);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA155_49 = input.LA(1);

                         
                        int index155_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_49);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA155_59 = input.LA(1);

                         
                        int index155_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_59);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA155_15 = input.LA(1);

                         
                        int index155_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA155_20 = input.LA(1);

                         
                        int index155_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA155_67 = input.LA(1);

                         
                        int index155_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_67);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA155_65 = input.LA(1);

                         
                        int index155_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_65);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA155_44 = input.LA(1);

                         
                        int index155_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA155_2 = input.LA(1);

                         
                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA155_34 = input.LA(1);

                         
                        int index155_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_34);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA155_56 = input.LA(1);

                         
                        int index155_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA155_19 = input.LA(1);

                         
                        int index155_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA155_52 = input.LA(1);

                         
                        int index155_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_52);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA155_11 = input.LA(1);

                         
                        int index155_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_11);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA155_47 = input.LA(1);

                         
                        int index155_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_47);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA155_55 = input.LA(1);

                         
                        int index155_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_55);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA155_42 = input.LA(1);

                         
                        int index155_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_42);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA155_66 = input.LA(1);

                         
                        int index155_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_66);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA155_36 = input.LA(1);

                         
                        int index155_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_36);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA155_31 = input.LA(1);

                         
                        int index155_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA155_50 = input.LA(1);

                         
                        int index155_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_50);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA155_48 = input.LA(1);

                         
                        int index155_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_48);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA155_53 = input.LA(1);

                         
                        int index155_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_53);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA155_8 = input.LA(1);

                         
                        int index155_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_8);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA155_35 = input.LA(1);

                         
                        int index155_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_35);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA155_45 = input.LA(1);

                         
                        int index155_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_45);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA155_24 = input.LA(1);

                         
                        int index155_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_24);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA155_6 = input.LA(1);

                         
                        int index155_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_6);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA155_7 = input.LA(1);

                         
                        int index155_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_7);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA155_39 = input.LA(1);

                         
                        int index155_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA155_12 = input.LA(1);

                         
                        int index155_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_12);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA155_33 = input.LA(1);

                         
                        int index155_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_33);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA155_40 = input.LA(1);

                         
                        int index155_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA155_64 = input.LA(1);

                         
                        int index155_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_64);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA155_43 = input.LA(1);

                         
                        int index155_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA155_32 = input.LA(1);

                         
                        int index155_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_32);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA155_21 = input.LA(1);

                         
                        int index155_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_21);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA155_4 = input.LA(1);

                         
                        int index155_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_4);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA155_10 = input.LA(1);

                         
                        int index155_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_10);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA155_28 = input.LA(1);

                         
                        int index155_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_28);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA155_46 = input.LA(1);

                         
                        int index155_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_46);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA155_38 = input.LA(1);

                         
                        int index155_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_38);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA155_13 = input.LA(1);

                         
                        int index155_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_13);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA155_63 = input.LA(1);

                         
                        int index155_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_63);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA155_27 = input.LA(1);

                         
                        int index155_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_27);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA155_61 = input.LA(1);

                         
                        int index155_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_61);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA155_9 = input.LA(1);

                         
                        int index155_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_9);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA155_57 = input.LA(1);

                         
                        int index155_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA155_23 = input.LA(1);

                         
                        int index155_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_23);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA155_18 = input.LA(1);

                         
                        int index155_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_18);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA155_54 = input.LA(1);

                         
                        int index155_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_54);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA155_25 = input.LA(1);

                         
                        int index155_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_25);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA155_60 = input.LA(1);

                         
                        int index155_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA155_29 = input.LA(1);

                         
                        int index155_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_29);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA155_14 = input.LA(1);

                         
                        int index155_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_14);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA155_16 = input.LA(1);

                         
                        int index155_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_16);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA155_51 = input.LA(1);

                         
                        int index155_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_51);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA155_62 = input.LA(1);

                         
                        int index155_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_62);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA155_41 = input.LA(1);

                         
                        int index155_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred444_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\u008f\uffff";
    static final String DFA158_eofS =
        "\1\1\u008e\uffff";
    static final String DFA158_minS =
        "\1\44\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\170\uffff";
    static final String DFA158_maxS =
        "\1\u00df\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\170\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\3\u008b\uffff\1\2\1\1";
    static final String DFA158_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\170\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\25\2\1\1\26\2\1\1\uffff\25\1\1\uffff\1\24\77\1\1\3\1\uffff"+
            "\6\1\1\21\1\1\15\uffff\1\1\1\23\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 260:40: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_3 = input.LA(1);

                         
                        int index158_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred448_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA158_17 = input.LA(1);

                         
                        int index158_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred448_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA158_19 = input.LA(1);

                         
                        int index158_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred448_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA158_20 = input.LA(1);

                         
                        int index158_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA158_21 = input.LA(1);

                         
                        int index158_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA158_22 = input.LA(1);

                         
                        int index158_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\13\uffff";
    static final String DFA159_eofS =
        "\13\uffff";
    static final String DFA159_minS =
        "\1\44\1\uffff\5\0\4\uffff";
    static final String DFA159_maxS =
        "\1\u0099\1\uffff\5\0\4\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\1\5\uffff\1\5\1\2\1\3\1\4";
    static final String DFA159_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\4\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\5\2\uffff\1\6\4\uffff\1\1\24\uffff\1\4\77\uffff\1\7\7\uffff"+
            "\1\2\17\uffff\1\3",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "263:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_2 = input.LA(1);

                         
                        int index159_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred450_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred451_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred452_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index159_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_3 = input.LA(1);

                         
                        int index159_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred450_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred452_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index159_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_4 = input.LA(1);

                         
                        int index159_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred450_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred452_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index159_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_5 = input.LA(1);

                         
                        int index159_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred450_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred451_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred452_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index159_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_6 = input.LA(1);

                         
                        int index159_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred450_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred452_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index159_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\u008e\uffff";
    static final String DFA164_eofS =
        "\1\1\u008d\uffff";
    static final String DFA164_minS =
        "\1\44\1\uffff\1\0\u008b\uffff";
    static final String DFA164_maxS =
        "\1\u00df\1\uffff\1\0\u008b\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\2\u008b\uffff\1\1";
    static final String DFA164_specialS =
        "\2\uffff\1\0\u008b\uffff}>";
    static final String[] DFA164_transitionS = {
            "\6\1\1\uffff\25\1\1\uffff\100\1\1\2\1\uffff\10\1\15\uffff\2"+
            "\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1"+
            "\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff"+
            "\15\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "()* loopback of 273:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_2 = input.LA(1);

                         
                        int index164_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred457_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA167_eotS =
        "\12\uffff";
    static final String DFA167_eofS =
        "\1\1\11\uffff";
    static final String DFA167_minS =
        "\1\44\1\uffff\4\0\4\uffff";
    static final String DFA167_maxS =
        "\1\u00df\1\uffff\4\0\4\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\3\1\2\1\4";
    static final String DFA167_specialS =
        "\2\uffff\1\1\1\3\1\2\1\0\4\uffff}>";
    static final String[] DFA167_transitionS = {
            "\6\1\1\uffff\25\1\1\uffff\101\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\3\1\5\1\2\1\4\16\uffff\1\1\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "()+ loopback of 277:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_5 = input.LA(1);

                         
                        int index167_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA167_2 = input.LA(1);

                         
                        int index167_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred462_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA167_4 = input.LA(1);

                         
                        int index167_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred463_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA167_3 = input.LA(1);

                         
                        int index167_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred464_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\111\uffff";
    static final String DFA168_eofS =
        "\111\uffff";
    static final String DFA168_minS =
        "\1\44\22\uffff\1\0\65\uffff";
    static final String DFA168_maxS =
        "\1\u00df\22\uffff\1\0\65\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\2\106\uffff\1\1";
    static final String DFA168_specialS =
        "\23\uffff\1\0\65\uffff}>";
    static final String[] DFA168_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\3\1\1\uffff\21\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\23\5\uffff\1\1\1\uffff\1\1\16\uffff\1\110\1\1\4\uffff\1\1"+
            "\4\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\2\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "()* loopback of 82:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_19 = input.LA(1);

                         
                        int index168_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index168_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA169_eotS =
        "\21\uffff";
    static final String DFA169_eofS =
        "\21\uffff";
    static final String DFA169_minS =
        "\1\44\1\uffff\7\43\1\uffff\7\0";
    static final String DFA169_maxS =
        "\1\u00df\1\uffff\7\43\1\uffff\7\0";
    static final String DFA169_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA169_specialS =
        "\12\uffff\1\1\1\2\1\3\1\6\1\4\1\5\1\0}>";
    static final String[] DFA169_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\1\1\20\uffff\3\1\1\uffff\21\1"+
            "\4\uffff\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1"+
            "\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "()* loopback of 82:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_16 = input.LA(1);

                         
                        int index169_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA169_10 = input.LA(1);

                         
                        int index169_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA169_11 = input.LA(1);

                         
                        int index169_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA169_12 = input.LA(1);

                         
                        int index169_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA169_14 = input.LA(1);

                         
                        int index169_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA169_15 = input.LA(1);

                         
                        int index169_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA169_13 = input.LA(1);

                         
                        int index169_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA170_eotS =
        "\107\uffff";
    static final String DFA170_eofS =
        "\107\uffff";
    static final String DFA170_minS =
        "\1\44\102\0\4\uffff";
    static final String DFA170_maxS =
        "\1\u00df\102\0\4\uffff";
    static final String DFA170_acceptS =
        "\103\uffff\1\1\1\2\1\4\1\3";
    static final String DFA170_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\4\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\14\1\6\1\10\1\15\1\66\1\40\1\uffff\1\7\1\20\20\uffff\1\35"+
            "\1\27\1\36\1\uffff\1\13\1\46\1\37\1\41\1\55\1\26\1\42\1\43\1"+
            "\44\1\45\1\24\1\47\1\50\1\51\1\52\1\53\1\17\4\uffff\1\25\1\64"+
            "\11\uffff\1\31\1\uffff\1\54\4\uffff\1\67\1\uffff\1\70\1\uffff"+
            "\1\71\5\uffff\1\72\1\uffff\1\56\3\uffff\1\73\1\uffff\1\34\1"+
            "\63\3\uffff\1\32\1\uffff\1\16\5\uffff\1\65\1\uffff\1\1\17\uffff"+
            "\1\12\4\uffff\1\23\4\uffff\1\101\1\74\1\75\5\uffff\1\2\1\3\1"+
            "\4\1\5\2\uffff\1\30\1\uffff\1\33\2\uffff\1\11\13\uffff\1\21"+
            "\1\22\14\uffff\1\76\10\uffff\1\57\1\60\1\61\1\62\1\77\1\100"+
            "\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "82:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_1 = input.LA(1);

                         
                        int index170_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_2 = input.LA(1);

                         
                        int index170_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_3 = input.LA(1);

                         
                        int index170_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_4 = input.LA(1);

                         
                        int index170_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA170_5 = input.LA(1);

                         
                        int index170_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA170_6 = input.LA(1);

                         
                        int index170_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA170_7 = input.LA(1);

                         
                        int index170_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA170_8 = input.LA(1);

                         
                        int index170_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA170_9 = input.LA(1);

                         
                        int index170_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA170_10 = input.LA(1);

                         
                        int index170_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred46_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA170_11 = input.LA(1);

                         
                        int index170_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA170_12 = input.LA(1);

                         
                        int index170_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred46_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA170_13 = input.LA(1);

                         
                        int index170_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred46_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA170_14 = input.LA(1);

                         
                        int index170_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA170_15 = input.LA(1);

                         
                        int index170_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA170_16 = input.LA(1);

                         
                        int index170_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA170_17 = input.LA(1);

                         
                        int index170_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA170_18 = input.LA(1);

                         
                        int index170_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA170_19 = input.LA(1);

                         
                        int index170_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA170_20 = input.LA(1);

                         
                        int index170_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA170_21 = input.LA(1);

                         
                        int index170_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA170_22 = input.LA(1);

                         
                        int index170_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA170_23 = input.LA(1);

                         
                        int index170_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA170_24 = input.LA(1);

                         
                        int index170_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA170_25 = input.LA(1);

                         
                        int index170_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA170_26 = input.LA(1);

                         
                        int index170_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA170_27 = input.LA(1);

                         
                        int index170_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA170_28 = input.LA(1);

                         
                        int index170_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA170_29 = input.LA(1);

                         
                        int index170_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA170_30 = input.LA(1);

                         
                        int index170_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA170_31 = input.LA(1);

                         
                        int index170_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA170_32 = input.LA(1);

                         
                        int index170_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA170_33 = input.LA(1);

                         
                        int index170_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA170_34 = input.LA(1);

                         
                        int index170_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA170_35 = input.LA(1);

                         
                        int index170_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA170_36 = input.LA(1);

                         
                        int index170_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA170_37 = input.LA(1);

                         
                        int index170_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA170_38 = input.LA(1);

                         
                        int index170_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA170_39 = input.LA(1);

                         
                        int index170_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA170_40 = input.LA(1);

                         
                        int index170_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA170_41 = input.LA(1);

                         
                        int index170_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA170_42 = input.LA(1);

                         
                        int index170_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA170_43 = input.LA(1);

                         
                        int index170_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA170_44 = input.LA(1);

                         
                        int index170_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA170_45 = input.LA(1);

                         
                        int index170_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA170_46 = input.LA(1);

                         
                        int index170_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA170_47 = input.LA(1);

                         
                        int index170_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA170_48 = input.LA(1);

                         
                        int index170_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA170_49 = input.LA(1);

                         
                        int index170_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA170_50 = input.LA(1);

                         
                        int index170_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA170_51 = input.LA(1);

                         
                        int index170_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA170_52 = input.LA(1);

                         
                        int index170_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA170_53 = input.LA(1);

                         
                        int index170_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA170_54 = input.LA(1);

                         
                        int index170_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA170_55 = input.LA(1);

                         
                        int index170_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA170_56 = input.LA(1);

                         
                        int index170_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA170_57 = input.LA(1);

                         
                        int index170_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA170_58 = input.LA(1);

                         
                        int index170_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA170_59 = input.LA(1);

                         
                        int index170_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA170_60 = input.LA(1);

                         
                        int index170_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA170_61 = input.LA(1);

                         
                        int index170_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA170_62 = input.LA(1);

                         
                        int index170_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA170_63 = input.LA(1);

                         
                        int index170_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA170_64 = input.LA(1);

                         
                        int index170_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA170_65 = input.LA(1);

                         
                        int index170_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA170_66 = input.LA(1);

                         
                        int index170_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index170_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA179_eotS =
        "\21\uffff";
    static final String DFA179_eofS =
        "\21\uffff";
    static final String DFA179_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA179_maxS =
        "\1\u00b6\7\43\1\uffff\7\0\1\uffff";
    static final String DFA179_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA179_specialS =
        "\11\uffff\1\1\1\6\1\2\1\5\1\4\1\0\1\3\1\uffff}>";
    static final String[] DFA179_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff\1"+
            "\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1"+
            "\2\1\3\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA179_eot = DFA.unpackEncodedString(DFA179_eotS);
    static final short[] DFA179_eof = DFA.unpackEncodedString(DFA179_eofS);
    static final char[] DFA179_min = DFA.unpackEncodedStringToUnsignedChars(DFA179_minS);
    static final char[] DFA179_max = DFA.unpackEncodedStringToUnsignedChars(DFA179_maxS);
    static final short[] DFA179_accept = DFA.unpackEncodedString(DFA179_acceptS);
    static final short[] DFA179_special = DFA.unpackEncodedString(DFA179_specialS);
    static final short[][] DFA179_transition;

    static {
        int numStates = DFA179_transitionS.length;
        DFA179_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA179_transition[i] = DFA.unpackEncodedString(DFA179_transitionS[i]);
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = DFA179_eot;
            this.eof = DFA179_eof;
            this.min = DFA179_min;
            this.max = DFA179_max;
            this.accept = DFA179_accept;
            this.special = DFA179_special;
            this.transition = DFA179_transition;
        }
        public String getDescription() {
            return "89:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_14 = input.LA(1);

                         
                        int index179_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA179_9 = input.LA(1);

                         
                        int index179_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA179_11 = input.LA(1);

                         
                        int index179_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA179_15 = input.LA(1);

                         
                        int index179_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA179_13 = input.LA(1);

                         
                        int index179_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA179_12 = input.LA(1);

                         
                        int index179_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA179_10 = input.LA(1);

                         
                        int index179_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA181_eotS =
        "\20\uffff";
    static final String DFA181_eofS =
        "\20\uffff";
    static final String DFA181_minS =
        "\1\44\6\0\11\uffff";
    static final String DFA181_maxS =
        "\1\u00ae\6\0\11\uffff";
    static final String DFA181_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA181_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "89:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_1 = input.LA(1);

                         
                        int index181_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA181_2 = input.LA(1);

                         
                        int index181_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA181_3 = input.LA(1);

                         
                        int index181_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA181_4 = input.LA(1);

                         
                        int index181_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA181_5 = input.LA(1);

                         
                        int index181_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA181_6 = input.LA(1);

                         
                        int index181_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA184_eotS =
        "\21\uffff";
    static final String DFA184_eofS =
        "\21\uffff";
    static final String DFA184_minS =
        "\1\44\7\43\1\uffff\7\0\1\uffff";
    static final String DFA184_maxS =
        "\1\u00b6\7\43\1\uffff\7\0\1\uffff";
    static final String DFA184_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA184_specialS =
        "\11\uffff\1\1\1\0\1\4\1\2\1\6\1\3\1\5\1\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff\1"+
            "\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1"+
            "\2\1\3\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "92:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_10 = input.LA(1);

                         
                        int index184_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA184_9 = input.LA(1);

                         
                        int index184_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA184_12 = input.LA(1);

                         
                        int index184_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA184_14 = input.LA(1);

                         
                        int index184_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA184_11 = input.LA(1);

                         
                        int index184_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA184_15 = input.LA(1);

                         
                        int index184_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA184_13 = input.LA(1);

                         
                        int index184_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA186_eotS =
        "\20\uffff";
    static final String DFA186_eofS =
        "\20\uffff";
    static final String DFA186_minS =
        "\1\44\6\0\11\uffff";
    static final String DFA186_maxS =
        "\1\u00ae\6\0\11\uffff";
    static final String DFA186_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA186_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA186_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\1\17\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "92:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_1 = input.LA(1);

                         
                        int index186_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index186_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA186_2 = input.LA(1);

                         
                        int index186_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index186_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA186_3 = input.LA(1);

                         
                        int index186_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index186_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA186_4 = input.LA(1);

                         
                        int index186_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index186_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA186_5 = input.LA(1);

                         
                        int index186_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index186_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA186_6 = input.LA(1);

                         
                        int index186_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index186_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA200_eotS =
        "\27\uffff";
    static final String DFA200_eofS =
        "\27\uffff";
    static final String DFA200_minS =
        "\1\44\17\uffff\1\0\6\uffff";
    static final String DFA200_maxS =
        "\1\u00b1\17\uffff\1\0\6\uffff";
    static final String DFA200_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA200_specialS =
        "\20\uffff\1\0\6\uffff}>";
    static final String[] DFA200_transitionS = {
            "\4\1\3\uffff\1\1\22\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\1\1\5\uffff\1\1\4\uffff\1\1\12\uffff\1\1\37\uffff\1\20\7\uffff"+
            "\1\1\16\uffff\1\26\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_eotS);
    static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_eofS);
    static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_minS);
    static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_maxS);
    static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_acceptS);
    static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_specialS);
    static final short[][] DFA200_transition;

    static {
        int numStates = DFA200_transitionS.length;
        DFA200_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA200_transition[i] = DFA.unpackEncodedString(DFA200_transitionS[i]);
        }
    }

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = DFA200_eot;
            this.eof = DFA200_eof;
            this.min = DFA200_min;
            this.max = DFA200_max;
            this.accept = DFA200_accept;
            this.special = DFA200_special;
            this.transition = DFA200_transition;
        }
        public String getDescription() {
            return "()* loopback of 197:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_16 = input.LA(1);

                         
                        int index200_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document282 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38C200078BL,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_sentenceStructure_in_sentences303 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38C20007ABL,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences305 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38C20007ABL,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_comma_in_sentences313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_stop_in_sentences315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure326 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38C300028BL,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure328 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38C300028BL,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure330 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38C300028BL,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure332 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38C300028BL,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure337 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780001000003L,0x000000000000BE00L});
    public static final BitSet FOLLOW_colon_in_sentenceStructure339 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780001000003L,0x000000000000BE00L});
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tmunicode_in_unmatchedTokens384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_unmatchedTokens392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_unmatchedTokens416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_unmatchedTokens418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_unmatchedTokens420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2486 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C2000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2489 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C2000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2492 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C2000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2497 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2499 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2501 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2503 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2511 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2514 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C2000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2518 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2520 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2522 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2524 = new BitSet(new long[]{0xE0411BF000000002L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2534 = new BitSet(new long[]{0x004118F000000002L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2537 = new BitSet(new long[]{0x004118F000000002L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2540 = new BitSet(new long[]{0x0041000000000002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_dissolvePhrase555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_dissolvePhrase557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure3_in_dissolvePhrase559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_dissolveStructure1585 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1587 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1590 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1594 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1596 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure1600 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780082000202L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure1602 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1605 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1608 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1612 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000000L,0x0000000001000402L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1614 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000000L,0x0000000001000402L});
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure1618 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1620 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000000L,0x0000000001000402L});
    public static final BitSet FOLLOW_rrb_in_dissolveStructure1626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2635 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2638 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2642 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2644 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure2648 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780082000202L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure2650 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2653 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2656 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2660 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2662 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure2666 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2668 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure3682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3685 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020042L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3688 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3690 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure3692 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure3696 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780082000202L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure3698 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure3701 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3704 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3708 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3710 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure3714 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3716 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_cc_in_conjunction733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_verbphraseStructure765 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure768 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure771 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure774 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure778 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure781 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure784 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure787 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure790 = new BitSet(new long[]{0x9FFFE86000000002L,0x76EBEAF5FF3C0080L,0x0000FC004300000AL,0x0000000001FABE00L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure793 = new BitSet(new long[]{0x9FFFE86000000002L,0x76EBEAF5FF3C0080L,0x0000FC004300000AL,0x0000000001FABE00L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure796 = new BitSet(new long[]{0x9FFFE86000000002L,0x76EBEAF5FF3C0080L,0x0000FC004300000AL,0x0000000001FABE00L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure799 = new BitSet(new long[]{0x9FFFE86000000002L,0x76EBEAF5FF3C0080L,0x0000FC004300000AL,0x0000000001FABE00L});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure802 = new BitSet(new long[]{0x9FFFE86000000002L,0x76EBEAF5FF3C0080L,0x0000FC004300000AL,0x0000000001FABE00L});
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure808 = new BitSet(new long[]{0x9FFFE86000000002L,0x0000000000000080L,0x00007C004300000AL,0x000000000002B600L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure812 = new BitSet(new long[]{0x9FFFE86000000000L,0x0000000000000080L,0x00007C004200000AL,0x000000000002B600L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure815 = new BitSet(new long[]{0x9FFFE86000000000L,0x0000000000000080L,0x00007C0042000008L,0x000000000002B600L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure818 = new BitSet(new long[]{0x9FFFE86000000002L,0x0000000000000080L,0x00007C004300000AL,0x000000000002B600L});
    public static final BitSet FOLLOW_vb_in_verb830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbimmerse_in_verb846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_degassMultiVerb_in_verb848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdilute_in_verb854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_cc_in_degassMultiVerb922 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_number935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounStructure_in_noun967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dash_in_noun970 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_nounStructure_in_noun972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_prp_in_nounStructure983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_poss_in_nounStructure985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_nounStructure987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_nounStructure989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_nounStructure991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_nounStructure993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_nounStructure995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_nounStructure999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_nounStructure1001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_nounStructure1003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_nounStructure1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_nounStructure1007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_nounStructure1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_nounStructure1013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_nounStructure1015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_nounStructure1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_nounStructure1019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_nounStructure1021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure1023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tmunicode_in_nounStructure1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_nounStructure1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_nounStructure1029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_nounStructure1031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_nounStructure1033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_nounStructure1035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_nounStructure1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_nounStructure1041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_nounStructure1043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_nounStructure1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_nounStructure1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_nounStructure1059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_nounStructure1063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_nounStructure1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_nounStructure1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_nounStructure1069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_nounStructure1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_nounStructure1077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nndry_in_nounStructure1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_nounStructure1081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure1083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_nounStructure1085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_nounStructure1091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_nounStructure1093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_nounStructure1095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_nounStructure1097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_nounStructure1099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_range1105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dash_in_range1107 = new BitSet(new long[]{0x0000009000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_number_in_range1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycleStructure_in_cycles1116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_cycleStructure1133 = new BitSet(new long[]{0x400008F000000000L,0x0000000000428842L,0x0002780002000202L});
    public static final BitSet FOLLOW_dashNN_in_cycleStructure1135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_nncycle_in_cycleStructure1138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dashNN1148 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_nn_in_dashNN1150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_cd_in_dashNN1152 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dash_in_dashNN1156 = new BitSet(new long[]{0x400008F000000000L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_adj_in_dashNN1159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_nn_in_dashNN1161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_cd_in_dashNN1163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_numberratio_in_ratio1176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio1201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_colon_in_numberratio1204 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_oscarcd_in_numberratio1206 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_cd_in_numberratio1208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_noun_in_nounratio1221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_colon_in_nounratio1225 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_noun_in_nounratio1227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_lsqb_in_reference1241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_cd_in_reference1243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_rsqb_in_reference1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure1_in_citation1252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure2_in_citation1254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_citationStructure11276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure11278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_citationStructure11280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_citationStructure21286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_lrb_in_citationStructure21288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure21290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_citationStructure21292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_citationStructure21294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_citationContent1303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_fw_in_citationContent1305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_cd_in_citationContent1307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_nnp_in_citationContent1313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_fw_in_citationContent1315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_cd_in_citationContent1317 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040001003000002L});
    public static final BitSet FOLLOW_mixtureRatio_in_mixture1329 = new BitSet(new long[]{0x0000009000000000L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture1336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture1338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure21367 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure21369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure21371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11379 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure31391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure31394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure31396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mixtureRatio1407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_colon_in_mixtureRatio1409 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_cd_in_mixtureRatio1412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_mixtureRatio1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1424 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_verb_in_mixtureContent1426 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nn_in_mixtureContent1428 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1430 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_md_in_mixtureContent1432 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1434 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1436 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1438 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1440 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1442 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_dash_in_mixtureContent1444 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_sym_in_mixtureContent1446 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1448 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_noun_in_mixtureContent1450 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inof_in_mixtureContent1452 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1454 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1456 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_comma_in_mixtureContent1458 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_adj_in_mixtureContent1460 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_colon_in_mixtureContent1462 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1464 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_minimixture_in_mixtureContent1468 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_fw_in_mixtureContent1470 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_verb_in_mixtureContent1472 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1474 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nnyield_in_mixtureContent1476 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_md_in_mixtureContent1478 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1480 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1482 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1484 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1486 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1488 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_dash_in_mixtureContent1490 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_sym_in_mixtureContent1492 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1494 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_noun_in_mixtureContent1496 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inof_in_mixtureContent1498 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1500 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1502 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_comma_in_mixtureContent1504 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_adj_in_mixtureContent1506 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_colon_in_mixtureContent1508 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1510 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture1523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure21545 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure21547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure21549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure11558 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure11560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure11562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1571 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nn_in_minimixtureContent1573 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1575 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1577 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1579 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_md_in_minimixtureContent1581 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1583 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1585 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1587 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1589 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1591 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1593 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1595 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1597 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1599 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1601 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1603 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1605 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1607 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1609 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1611 = new BitSet(new long[]{0xFFFFFBF000000000L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1615 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1617 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1619 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nnyield_in_minimixtureContent1621 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1623 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_md_in_minimixtureContent1625 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1627 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1629 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1631 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1633 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1635 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1637 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1639 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1641 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1643 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1645 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1647 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1649 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1651 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1653 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1655 = new BitSet(new long[]{0xFFFFFBF000000002L,0xFFFFFFFFFFFFFFFEL,0x004AFC38420002F3L,0x00000000FFFBBE0CL});
    public static final BitSet FOLLOW_jj_in_adj1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj1668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj1670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj1672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj1674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjchem_in_adj1676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj1678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase1706 = new BitSet(new long[]{0x9FFFE86000000000L,0x0000000000000080L,0x00007C0042000008L,0x000000000002B600L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_advAdj1734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_advAdj1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1745 = new BitSet(new long[]{0x9FFFE86000000000L,0x0000000000000080L,0x00007C0042000008L,0x000000000002B600L});
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1748 = new BitSet(new long[]{0xFFFFFBF000000000L,0x8D14150A00C3FFFEL,0x004A7C38C200028AL,0x00000000FE03B60CL});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1778 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C2000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1819 = new BitSet(new long[]{0x9FFFE86000000000L,0x0000000000000000L,0x00007C0042000000L,0x000000000002B600L});
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1822 = new BitSet(new long[]{0x8000086000000000L,0x0000000000000000L,0x0000780042000000L,0x000000000000B600L});
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1826 = new BitSet(new long[]{0x8000086000000000L,0x0000000000000000L,0x0000780002000000L,0x000000000000B600L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1829 = new BitSet(new long[]{0x8000086000000000L,0x0000000000000000L,0x0000780002000000L,0x000000000000B600L});
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1832 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1835 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1847 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_prepphraseRole1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000040000000L});
    public static final BitSet FOLLOW_dt_in_prepphraseRole1872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1917 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780042000202L,0x000000000000B600L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1920 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L,0x000000000000B600L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1923 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L,0x000000000000B600L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inMost1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inMost1941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inMost1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inMost1945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inMost1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inMost1949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inMost1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inMost1953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inMost1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inMost1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inMost1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inMost1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inMost1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inMost1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inMost1967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inMost1969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inMost1971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll2009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll2013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp2020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent2041 = new BitSet(new long[]{0x1FFFE86000000000L,0x0000000000000080L,0x00007C0042000000L,0x000000000002B600L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent2044 = new BitSet(new long[]{0x0000086000000000L,0x0000000000000080L,0x0000780042000000L,0x000000000000B600L});
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent2047 = new BitSet(new long[]{0x0000086000000000L,0x0000000000000080L,0x0000780002000000L,0x000000000000B600L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent2050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000002000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent2053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent2056 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter2069 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter2072 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C2000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter2075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_amount2105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000002000000L});
    public static final BitSet FOLLOW_nnamount_in_amount2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass2129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000000002000000L});
    public static final BitSet FOLLOW_nnmass_in_mass2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_percent2153 = new BitSet(new long[]{0x400008F000000000L,0x0000000000420842L,0x0002780002000242L});
    public static final BitSet FOLLOW_nn_in_percent2155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_nnpercent_in_percent2158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume2181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000002000000L});
    public static final BitSet FOLLOW_nnvol_in_volume2184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar2205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar2208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase2231 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase2233 = new BitSet(new long[]{0xBFFFE86000000000L,0x0000000000000080L,0x00007C0042000008L,0x000000000002B600L});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase2236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase2241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2254 = new BitSet(new long[]{0x400008F000000002L,0x0000000200420842L,0x0002780043000202L});
    public static final BitSet FOLLOW_conjunction_in_multiApparatus2257 = new BitSet(new long[]{0x400008F000000000L,0x0000000200420842L,0x0002780043000202L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2260 = new BitSet(new long[]{0x400008F000000002L,0x0000000200420842L,0x0002780043000202L});
    public static final BitSet FOLLOW_dt_in_apparatus2272 = new BitSet(new long[]{0x400008F000000000L,0x0000000200420842L,0x0002780042000202L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus2275 = new BitSet(new long[]{0x400008F000000000L,0x0000000200420842L,0x0002780042000202L});
    public static final BitSet FOLLOW_nnApp_in_apparatus2278 = new BitSet(new long[]{0x400008F000000002L,0x0000000200420842L,0x0002780042000202L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2306 = new BitSet(new long[]{0x400008F000000002L,0x0000000200420842L,0x0002780042000212L});
    public static final BitSet FOLLOW_dash_in_nnApp2310 = new BitSet(new long[]{0x400008F000000000L,0x0000000200420842L,0x0002780042000202L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_quantity_in_preapparatus2326 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_adj_in_preapparatus2328 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus2330 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus2332 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_molecule_in_preapparatus2334 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus2336 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus2338 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_nn_in_preapparatus2340 = new BitSet(new long[]{0x400008F000000002L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_cd_in_measurements2351 = new BitSet(new long[]{0x400008F000000000L,0x0000000000420842L,0x0002780002000202L});
    public static final BitSet FOLLOW_nn_in_measurements2353 = new BitSet(new long[]{0x0000009000000000L,0x0000000000000002L,0x0000000002000200L});
    public static final BitSet FOLLOW_multiple_in_measurements2358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements2360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_dt_in_measurements2366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_multiple2374 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_cdunicode_in_multiple2376 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000200L});
    public static final BitSet FOLLOW_measurementtypes_in_multiple2378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes2409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes2411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes2413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_oscarCompound2425 = new BitSet(new long[]{0x0000086000000000L,0x0000000000020000L,0x0000780000000200L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound2429 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780000000080L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound2431 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780000000080L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound2433 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780000000080L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound2435 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780000000080L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2437 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780000000080L});
    public static final BitSet FOLLOW_adj_in_oscarCompound2440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_reference_in_oscarCompound2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound42452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound42455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound42457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3Structure_in_oscarCompound32480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2Structure_in_oscarCompound22498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound3Structure2543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_dash_in_oscarCompound3Structure2546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_apost_in_oscarCompound3Structure2548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount12586 = new BitSet(new long[]{0x0040009000000000L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount12588 = new BitSet(new long[]{0x0040009000000000L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_inof_in_moleculeamount12592 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount12594 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount12596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22607 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22609 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount22613 = new BitSet(new long[]{0x000008F000000002L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_citation_in_moleculeamount22618 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22620 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22622 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount32636 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount32638 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount32641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount32643 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount32645 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount32648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount2658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule2685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarcdType2707 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_oscarcd_in_oscarcdType2710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_cd_in_oscarcdType2712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rrb_in_oscarcdType2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount12724 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount12726 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount12729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount12731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount22740 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_oscarcdType_in_unnamedmoleculeamount22742 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount22746 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount22748 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount22750 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32766 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32768 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32771 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32774 = new BitSet(new long[]{0xE0001BF000000002L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount42787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount42789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount42792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount52811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount52813 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount52815 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount52819 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount52821 = new BitSet(new long[]{0x0000009000000002L,0x0000000000000002L,0x0000000002000202L});
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity2880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity12907 = new BitSet(new long[]{0x0000009000000000L,0x0000000000000002L,0x0000000002000200L});
    public static final BitSet FOLLOW_measurements_in_quantity12909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000422L});
    public static final BitSet FOLLOW_comma_in_quantity12912 = new BitSet(new long[]{0x0000009000000000L,0x0000000000000002L,0x0000000002000200L});
    public static final BitSet FOLLOW_measurements_in_quantity12915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000422L});
    public static final BitSet FOLLOW_comma_in_quantity12920 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000422L});
    public static final BitSet FOLLOW_stop_in_quantity12927 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000422L});
    public static final BitSet FOLLOW_rrb_in_quantity12934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity22946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_quantity22949 = new BitSet(new long[]{0x0000009000000000L,0x0000000000000002L,0x0000000002000200L});
    public static final BitSet FOLLOW_measurements_in_quantity22952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_method2967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nn_in_method2969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nnmethod_in_method2973 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets3000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_rrb_in_brackets3002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_lsqb_in_brackets3004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_rsqb_in_brackets3006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_36_in_oscarcd3019 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd3021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_oscarcj3034 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_oscarrn3049 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_oscarcpr3064 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_oscaront3079 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_tmunicode3094 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_cdunicode3109 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_jjchem3124 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_jjchem3126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_jjcomp3139 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_inas3155 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inas3157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_inbefore3170 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_inafter3185 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inafter3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_inin3200 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inin3202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_ininto3215 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ininto3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_inwith3230 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inwith3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_inwithout3245 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout3247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_inby3260 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inby3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_invia3275 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_invia3277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_inof3290 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inof3292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_inon3305 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inon3307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_infor3320 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_infor3322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_infrom3335 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_infrom3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_inunder3350 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inunder3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_inover3365 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inover3367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_inoff3380 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_inoff3382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_nnexample3397 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_nnstate3412 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate3414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_nntime3427 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nntime3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_nnmass3442 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass3444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_nnmolar3457 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_nnamount3472 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount3474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_nnatmosphere3487 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_nneq3502 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nneq3504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnvol3517 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_nnchementity3532 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nntemp3547 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_nnflash3562 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_nngeneral3577 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_nnmethod3592 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_nnpressure3607 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nncolumn3622 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_nnchromatography3637 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnvacuum3652 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_nncycle3667 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle3669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nntimes3682 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_oscarcm3699 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbuse3716 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbchange3731 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange3733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbsubmerge3746 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_vbsubject3761 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_nnadd3778 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd3780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_nnmixture3793 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbdilute3808 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbadd3824 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd3826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbcharge3839 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_vbcontain3854 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbdrop3869 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbfill3884 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_vbsuspend3899 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbtreat3914 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbapparatus3931 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_nnapparatus3946 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_vbconcentrate3963 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_nnconcentrate3978 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate3980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_vbcool3995 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool3997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_vbdegass4012 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_vbdissolve4029 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_vbdry4046 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry4048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_nndry4061 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nndry4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_vbextract4078 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract4080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_nnextract4093 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract4095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_vbfilter4110 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_nnfilter4125 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_vbheat4142 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat4144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_vbincrease4157 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_vbimmerse4174 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_vbpartition4190 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_vbprecipitate4207 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_nnprecipitate4222 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_vbpurify4239 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_nnpurify4254 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_vbquench4271 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench4273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_vbrecover4288 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_vbremove4305 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove4307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_nnremove4320 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove4322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_vbstir4337 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir4339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_vbsynthesize4354 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_nnsynthesize4369 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_vbwait4386 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait4388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_vbwash4403 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash4405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_vbyield4420 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield4422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_nnyield4437 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnyield4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_colon4453 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_colon4455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_comma4468 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_comma4470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_apost4483 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_apost4485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_neg4498 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_neg4500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_dash4513 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dash4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_stop4528 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_stop4530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_nnpercent4543 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_lsqb4558 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb4560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_rsqb4573 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_lrb4589 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_lrb4591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_rrb4604 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rrb4606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_abl4623 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_abl4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_abn4640 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_abn4642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_abx4657 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_abx4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_ap4674 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ap4676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_at4691 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_at4693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_be4708 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_be4710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_bed4725 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_bed4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_bedz4742 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_bedz4744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_beg4759 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_beg4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_bem4776 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_bem4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_ben4793 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ben4795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_ber4810 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ber4812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_bez4827 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_bez4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_cc4844 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_cc4846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_cd4861 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_cd4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_cs4878 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_cs4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_dotok4895 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dotok4897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_dod4912 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dod4914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_doz4929 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_doz4931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_dt4946 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dt4948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_dtTHE4964 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_dti4980 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dti4982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_dts4997 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dts4999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_dtx5014 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_dtx5016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_ex5031 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ex5033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_fw5048 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_fw5050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_fwin5065 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_fwin5067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_hv5082 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_hv5084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_hvd5099 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_hvd5101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_hvg5116 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_hvg5118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_hvn5133 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_hvn5135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_in5150 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_in5152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_jj5167 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_jj5169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_jjr5184 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_jjr5186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_jjs5201 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_jjs5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_jjt5218 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_jjt5220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_md5235 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_md5237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_nc5252 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nc5254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_nn5269 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nn5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_nn_poss5286 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_nns5303 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nns5305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_nns_poss5320 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss5322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_np5337 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_np5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_nnp5355 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nnp5357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_np_poss5373 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss5375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_nps5390 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nps5392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_nps_poss5407 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss5409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_nr5424 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_nr5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_od5441 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_od5443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_pn5458 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_pn5460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_pn_poss5475 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_pp_poss5492 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss5494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_pp_poss_poss5509 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss5511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_ppl5526 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ppl5528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_ppls5543 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ppls5545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_prp5559 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_prp5561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_prp_poss5576 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_ppo5592 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ppo5594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_pps5609 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_pps5611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_ppss5626 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ppss5628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_ql5643 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_ql5645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_qlp5660 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_qlp5662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_rb5677 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rb5679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_rbr5694 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rbr5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_rbconj5711 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_rbt5728 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rbt5730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_rbs5745 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rbs5747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_rn5763 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rn5765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_rp5780 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_rp5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_sym5797 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_sym5799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_to5814 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_to5816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_uh5831 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_uh5833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_vb5848 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vb5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_vbp5864 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbp5866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_vbd5881 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbd5883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_vbg5898 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbg5900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_vbn5915 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbn5917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_vbz5932 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_vbz5934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_wdt5949 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_wdt5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_wp_poss5966 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_wpo5984 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_wpo5986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_wps6001 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_wps6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_wql6018 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_wql6020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_wrb6035 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_wrb6037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_pdt6051 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_TOKEN_in_pdt6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred10_ChemicalChunker337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred11_ChemicalChunker339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred12_ChemicalChunker345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_synpred13_ChemicalChunker347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred14_ChemicalChunker380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred15_ChemicalChunker382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tmunicode_in_synpred16_ChemicalChunker384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred17_ChemicalChunker386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred19_ChemicalChunker390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred21_ChemicalChunker394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred22_ChemicalChunker396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred23_ChemicalChunker398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred24_ChemicalChunker400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred25_ChemicalChunker402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred26_ChemicalChunker404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred30_ChemicalChunker412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred31_ChemicalChunker414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred32_ChemicalChunker416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred34_ChemicalChunker455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred36_ChemicalChunker489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred37_ChemicalChunker492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred38_ChemicalChunker497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred39_ChemicalChunker499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred40_ChemicalChunker501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred41_ChemicalChunker503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred42_ChemicalChunker511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred43_ChemicalChunker514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred44_ChemicalChunker518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred45_ChemicalChunker520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred46_ChemicalChunker522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred47_ChemicalChunker511 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C3000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_advAdj_in_synpred47_ChemicalChunker514 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A7838C2000282L,0x00000000FE01B60CL});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred47_ChemicalChunker518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred47_ChemicalChunker520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred47_ChemicalChunker522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred47_ChemicalChunker524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred49_ChemicalChunker540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred50_ChemicalChunker534 = new BitSet(new long[]{0x000018F000000002L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred50_ChemicalChunker537 = new BitSet(new long[]{0x000018F000000002L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred50_ChemicalChunker540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_synpred51_ChemicalChunker555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_synpred52_ChemicalChunker557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred53_ChemicalChunker587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred55_ChemicalChunker594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred57_ChemicalChunker605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred59_ChemicalChunker612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred62_ChemicalChunker635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred64_ChemicalChunker642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred66_ChemicalChunker653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred68_ChemicalChunker660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred69_ChemicalChunker666 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_synpred69_ChemicalChunker668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred70_ChemicalChunker648 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780082000202L});
    public static final BitSet FOLLOW_dtTHE_in_synpred70_ChemicalChunker650 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_adj_in_synpred70_ChemicalChunker653 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_nnp_in_synpred70_ChemicalChunker656 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_synpred70_ChemicalChunker660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred70_ChemicalChunker662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred70_ChemicalChunker666 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_synpred70_ChemicalChunker668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_molecule_in_synpred72_ChemicalChunker688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred73_ChemicalChunker690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred75_ChemicalChunker701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred77_ChemicalChunker708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred78_ChemicalChunker714 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_synpred78_ChemicalChunker716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred79_ChemicalChunker696 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780082000202L});
    public static final BitSet FOLLOW_dtTHE_in_synpred79_ChemicalChunker698 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_adj_in_synpred79_ChemicalChunker701 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_nnp_in_synpred79_ChemicalChunker704 = new BitSet(new long[]{0x000018F000000000L,0x0000000000020002L,0x0040780002000202L});
    public static final BitSet FOLLOW_molecule_in_synpred79_ChemicalChunker708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred79_ChemicalChunker710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred79_ChemicalChunker714 = new BitSet(new long[]{0x000008F000000000L,0x0000000000020002L,0x0000780002000202L});
    public static final BitSet FOLLOW_molecule_in_synpred79_ChemicalChunker716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_to_in_synpred82_ChemicalChunker768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred83_ChemicalChunker771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred89_ChemicalChunker790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred90_ChemicalChunker793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred91_ChemicalChunker796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred92_ChemicalChunker799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred93_ChemicalChunker802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred94_ChemicalChunker778 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_rbconj_in_synpred94_ChemicalChunker781 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_adv_in_synpred94_ChemicalChunker784 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_adj_in_synpred94_ChemicalChunker787 = new BitSet(new long[]{0x1FFFE86000000000L,0x76EBEAF5FF3C0000L,0x0000FC0040000000L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_verb_in_synpred94_ChemicalChunker790 = new BitSet(new long[]{0x1FFFE86000000002L,0x76EBEAF5FF3C0000L,0x0000FC0040000008L,0x0000000001FABE00L});
    public static final BitSet FOLLOW_md_in_synpred94_ChemicalChunker793 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000F80000000008L,0x000000000000B600L});
    public static final BitSet FOLLOW_adv_in_synpred94_ChemicalChunker796 = new BitSet(new long[]{0x0000086000000002L,0x0000000000000000L,0x0000780000000008L,0x000000000000B600L});
    public static final BitSet FOLLOW_adj_in_synpred94_ChemicalChunker799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_neg_in_synpred94_ChemicalChunker802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_synpred95_ChemicalChunker808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred98_ChemicalChunker812 = new BitSet(new long[]{0x9FFFE86000000000L,0x0000000000000080L,0x00007C004200000AL,0x000000000002B600L});
    public static final BitSet FOLLOW_comma_in_synpred98_ChemicalChunker815 = new BitSet(new long[]{0x9FFFE86000000000L,0x0000000000000080L,0x00007C0042000008L,0x000000000002B600L});
    public static final BitSet FOLLOW_prepphrase_in_synpred98_ChemicalChunker818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred108_ChemicalChunker848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_synpred121_ChemicalChunker874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred143_ChemicalChunker947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred144_ChemicalChunker949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred149_ChemicalChunker970 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_nounStructure_in_synpred149_ChemicalChunker972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred152_ChemicalChunker987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_synpred153_ChemicalChunker989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred154_ChemicalChunker991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred155_ChemicalChunker993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred156_ChemicalChunker995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred157_ChemicalChunker997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred159_ChemicalChunker1001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred160_ChemicalChunker1003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred163_ChemicalChunker1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_synpred166_ChemicalChunker1015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_synpred167_ChemicalChunker1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred168_ChemicalChunker1019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred173_ChemicalChunker1029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred174_ChemicalChunker1031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred175_ChemicalChunker1033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred181_ChemicalChunker1045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred190_ChemicalChunker1063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred191_ChemicalChunker1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred192_ChemicalChunker1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred193_ChemicalChunker1069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred199_ChemicalChunker1081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred200_ChemicalChunker1083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred214_ChemicalChunker1176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred215_ChemicalChunker1204 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_oscarcd_in_synpred215_ChemicalChunker1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred216_ChemicalChunker1208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred217_ChemicalChunker1225 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_noun_in_synpred217_ChemicalChunker1227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred230_ChemicalChunker1424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred231_ChemicalChunker1426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred232_ChemicalChunker1428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred233_ChemicalChunker1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred236_ChemicalChunker1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred237_ChemicalChunker1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred238_ChemicalChunker1440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred239_ChemicalChunker1442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred241_ChemicalChunker1446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred242_ChemicalChunker1448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred243_ChemicalChunker1450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred244_ChemicalChunker1452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred245_ChemicalChunker1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred246_ChemicalChunker1456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred247_ChemicalChunker1458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred248_ChemicalChunker1460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minimixture_in_synpred250_ChemicalChunker1468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred251_ChemicalChunker1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred252_ChemicalChunker1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred253_ChemicalChunker1474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred254_ChemicalChunker1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred257_ChemicalChunker1482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred258_ChemicalChunker1484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred259_ChemicalChunker1486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred260_ChemicalChunker1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred262_ChemicalChunker1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred263_ChemicalChunker1494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred264_ChemicalChunker1496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred265_ChemicalChunker1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred266_ChemicalChunker1500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred267_ChemicalChunker1502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred268_ChemicalChunker1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred269_ChemicalChunker1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred271_ChemicalChunker1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred273_ChemicalChunker1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred274_ChemicalChunker1573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred275_ChemicalChunker1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred276_ChemicalChunker1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred279_ChemicalChunker1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred280_ChemicalChunker1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred281_ChemicalChunker1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred282_ChemicalChunker1589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred284_ChemicalChunker1593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred285_ChemicalChunker1595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred286_ChemicalChunker1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred287_ChemicalChunker1599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred288_ChemicalChunker1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred289_ChemicalChunker1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred290_ChemicalChunker1605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred291_ChemicalChunker1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred293_ChemicalChunker1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred294_ChemicalChunker1617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred295_ChemicalChunker1619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred296_ChemicalChunker1621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred299_ChemicalChunker1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred300_ChemicalChunker1629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred301_ChemicalChunker1631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred302_ChemicalChunker1633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred304_ChemicalChunker1637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred305_ChemicalChunker1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred306_ChemicalChunker1641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred307_ChemicalChunker1643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred308_ChemicalChunker1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred309_ChemicalChunker1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred310_ChemicalChunker1649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred311_ChemicalChunker1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred313_ChemicalChunker1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred325_ChemicalChunker1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred326_ChemicalChunker1712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred327_ChemicalChunker1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred328_ChemicalChunker1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseRole_in_synpred329_ChemicalChunker1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred333_ChemicalChunker1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred338_ChemicalChunker1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred341_ChemicalChunker1923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred342_ChemicalChunker1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred376_ChemicalChunker2041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred381_ChemicalChunker2056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred389_ChemicalChunker2257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred390_ChemicalChunker2257 = new BitSet(new long[]{0x400008F000000000L,0x0000000200420842L,0x0002780043000202L});
    public static final BitSet FOLLOW_apparatus_in_synpred390_ChemicalChunker2260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnApp_in_synpred393_ChemicalChunker2278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred394_ChemicalChunker2306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred395_ChemicalChunker2310 = new BitSet(new long[]{0x400008F000000000L,0x0000000200420842L,0x0002780042000202L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred395_ChemicalChunker2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred396_ChemicalChunker2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred397_ChemicalChunker2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred398_ChemicalChunker2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred399_ChemicalChunker2332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred400_ChemicalChunker2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred401_ChemicalChunker2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred402_ChemicalChunker2338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred403_ChemicalChunker2340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred406_ChemicalChunker2366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurementtypes_in_synpred407_ChemicalChunker2378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred413_ChemicalChunker2429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_synpred415_ChemicalChunker2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred417_ChemicalChunker2440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_synpred418_ChemicalChunker2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred419_ChemicalChunker2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred420_ChemicalChunker2546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred422_ChemicalChunker2565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred422_ChemicalChunker2567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred423_ChemicalChunker2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred424_ChemicalChunker2586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred425_ChemicalChunker2588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred426_ChemicalChunker2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred427_ChemicalChunker2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred428_ChemicalChunker2609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred429_ChemicalChunker2613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred430_ChemicalChunker2618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred431_ChemicalChunker2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred432_ChemicalChunker2622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred433_ChemicalChunker2636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount3_in_synpred435_ChemicalChunker2658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred436_ChemicalChunker2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred440_ChemicalChunker2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred441_ChemicalChunker2748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred442_ChemicalChunker2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred443_ChemicalChunker2771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred444_ChemicalChunker2771 = new BitSet(new long[]{0xE0001BF000000000L,0x8D14150A00C3FFFEL,0x004A783842000282L,0x00000000FE01000CL});
    public static final BitSet FOLLOW_noun_in_synpred444_ChemicalChunker2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred445_ChemicalChunker2787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred446_ChemicalChunker2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred447_ChemicalChunker2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred448_ChemicalChunker2821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred450_ChemicalChunker2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred451_ChemicalChunker2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred452_ChemicalChunker2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred457_ChemicalChunker2949 = new BitSet(new long[]{0x0000009000000000L,0x0000000000000002L,0x0000000002000200L});
    public static final BitSet FOLLOW_measurements_in_synpred457_ChemicalChunker2952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred462_ChemicalChunker3000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred463_ChemicalChunker3002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred464_ChemicalChunker3004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred465_ChemicalChunker3006 = new BitSet(new long[]{0x0000000000000002L});

}