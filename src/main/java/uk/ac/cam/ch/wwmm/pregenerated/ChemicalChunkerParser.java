// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-12-11 04:55:23

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DT-THE'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=5;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int NEWLINE=6;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 103:
                case 107:
                case 108:
                case 109:
                case 110:
                case 125:
                case 130:
                case 131:
                case 135:
                case 136:
                case 137:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 154:
                case 166:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 178:
                case 179:
                case 180:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document208);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 34:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:10: ( ( sentence | unmatchedPhrase )+ ( comma | stop )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+ ( comma | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_sentences230);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences232);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:44: ( comma | stop )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA3_4 = input.LA(3);

                        if ( (synpred4_ChemicalChunker()) ) {
                            alt3=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 105:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences240);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:51: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences242);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:9: ( ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            loop4:
            do {
                int alt4=4;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentence253);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentence255);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentence257);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:48: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentence262);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentence264);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction | rbconj )*
            loop6:
            do {
                int alt6=3;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_5 = input.LA(3);

                        if ( (synpred11_ChemicalChunker()) ) {
                            alt6=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 174:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_6 = input.LA(3);

                        if ( (synpred12_ChemicalChunker()) ) {
                            alt6=2;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 124:
                    {
                    alt6=1;
                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:66: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentence270);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:78: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentence272);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens13 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase285);
            unmatchedTokens13=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens13.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 42:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:1: unmatchedTokens : ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw14 = null;

        ChemicalChunkerParser.noun_return noun15 = null;

        ChemicalChunkerParser.verb_return verb16 = null;

        ChemicalChunkerParser.inAll_return inAll17 = null;

        ChemicalChunkerParser.dt_return dt18 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE19 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd20 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm21 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn22 = null;

        ChemicalChunkerParser.oscaront_return oscaront23 = null;

        ChemicalChunkerParser.brackets_return brackets24 = null;

        ChemicalChunkerParser.sym_return sym25 = null;

        ChemicalChunkerParser.colon_return colon26 = null;

        ChemicalChunkerParser.md_return md27 = null;

        ChemicalChunkerParser.neg_return neg28 = null;

        ChemicalChunkerParser.number_return number29 = null;

        ChemicalChunkerParser.comma_return comma30 = null;

        ChemicalChunkerParser.advAdj_return advAdj31 = null;

        ChemicalChunkerParser.rbconj_return rbconj32 = null;

        ChemicalChunkerParser.reference_return reference33 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:2: ( ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )
            int alt7=20;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens306);
                    fw14=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw14.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens308);
                    noun15=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun15.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens310);
                    verb16=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb16.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:18: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens312);
                    inAll17=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll17.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens314);
                    dt18=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt18.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedTokens316);
                    dtTHE19=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE19.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:33: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens318);
                    oscarcd20=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd20.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:41: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens320);
                    oscarcm21=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm21.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:49: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens322);
                    oscarrn22=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn22.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:57: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens324);
                    oscaront23=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront23.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:66: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens326);
                    brackets24=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets24.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:75: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens328);
                    sym25=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym25.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:79: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens330);
                    colon26=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon26.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:85: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens332);
                    md27=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md27.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:88: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens334);
                    neg28=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg28.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:92: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens336);
                    number29=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number29.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens338);
                    comma30=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma30.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:105: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedTokens340);
                    advAdj31=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj31.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:112: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedTokens342);
                    rbconj32=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj32.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:119: reference
                    {
                    pushFollow(FOLLOW_reference_in_unmatchedTokens344);
                    reference33=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference33.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure34 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase356);
            nounphraseStructure34=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure34.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 49:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure135 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure236 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure379);
                    nounphraseStructure135=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure135.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure381);
                    nounphraseStructure236=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure236.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:53:1: nounphraseStructure1 : multiApparatus -> ^( NODE[\"MultipleApparatus\"] multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus37 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:2: ( multiApparatus -> ^( NODE[\"MultipleApparatus\"] multiApparatus ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1390);
            multiApparatus37=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus37.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 54:20: -> ^( NODE[\"MultipleApparatus\"] multiApparatus )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:24: ^( NODE[\"MultipleApparatus\"] multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE38 = null;

        ChemicalChunkerParser.dt_return dt39 = null;

        ChemicalChunkerParser.advAdj_return advAdj40 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase41 = null;

        ChemicalChunkerParser.noun_return noun42 = null;

        ChemicalChunkerParser.number_return number43 = null;

        ChemicalChunkerParser.ratio_return ratio44 = null;

        ChemicalChunkerParser.conjunction_return conjunction45 = null;

        ChemicalChunkerParser.advAdj_return advAdj46 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase47 = null;

        ChemicalChunkerParser.noun_return noun48 = null;

        ChemicalChunkerParser.number_return number49 = null;

        ChemicalChunkerParser.ratio_return ratio50 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf51 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN52 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase53 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2411);
                    dtTHE38=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE38.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred34_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2414);
                    dt39=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt39.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2417);
            	    advAdj40=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj40.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( dissolvePhrase | noun | number | ratio )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2422);
            	    dissolvePhrase41=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase41.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:40: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2424);
            	    noun42=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun42.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure2426);
            	    number43=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number43.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:52: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2428);
            	    ratio44=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio44.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2436);
            	    	    conjunction45=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction45.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2439);
            	    	    advAdj46=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj46.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:85: ( dissolvePhrase | noun | number | ratio )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2443);
            	            dissolvePhrase47=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase47.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2445);
            	            noun48=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun48.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: number
            	            {
            	            pushFollow(FOLLOW_number_in_nounphraseStructure2447);
            	            number49=number();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, number49.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:113: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2449);
            	            ratio50=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio50.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:125: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred48_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 27:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred48_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 27:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 21:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:127: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2459);
            	            prepphraseOf51=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf51.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:141: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2462);
            	            prepphraseIN52=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN52.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2465);
            	            dissolvePhrase53=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase53.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:1: dissolvePhrase : ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure1_return dissolveStructure154 = null;

        ChemicalChunkerParser.dissolveStructure2_return dissolveStructure255 = null;

        ChemicalChunkerParser.dissolveStructure3_return dissolveStructure356 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure1=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure1");
        RewriteRuleSubtreeStream stream_dissolveStructure3=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure3");
        RewriteRuleSubtreeStream stream_dissolveStructure2=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:2: ( ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            int alt20=3;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:5: dissolveStructure1
                    {
                    pushFollow(FOLLOW_dissolveStructure1_in_dissolvePhrase480);
                    dissolveStructure154=dissolveStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure1.add(dissolveStructure154.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:24: dissolveStructure2
                    {
                    pushFollow(FOLLOW_dissolveStructure2_in_dissolvePhrase482);
                    dissolveStructure255=dissolveStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure2.add(dissolveStructure255.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:43: dissolveStructure3
                    {
                    pushFollow(FOLLOW_dissolveStructure3_in_dissolvePhrase484);
                    dissolveStructure356=dissolveStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure3.add(dissolveStructure356.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure3, dissolveStructure1, dissolveStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 58:63: -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:67: ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "DissolvePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:92: ( dissolveStructure1 )?
                if ( stream_dissolveStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure1.nextTree());

                }
                stream_dissolveStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:112: ( dissolveStructure2 )?
                if ( stream_dissolveStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure2.nextTree());

                }
                stream_dissolveStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:132: ( dissolveStructure3 )?
                if ( stream_dissolveStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure3.nextTree());

                }
                stream_dissolveStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:1: dissolveStructure1 : lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ rrb ;
    public final ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure1_return retval = new ChemicalChunkerParser.dissolveStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb57 = null;

        ChemicalChunkerParser.adj_return adj58 = null;

        ChemicalChunkerParser.nnp_return nnp59 = null;

        ChemicalChunkerParser.molecule_return molecule60 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule61 = null;

        ChemicalChunkerParser.inin_return inin62 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE63 = null;

        ChemicalChunkerParser.adj_return adj64 = null;

        ChemicalChunkerParser.nnp_return nnp65 = null;

        ChemicalChunkerParser.molecule_return molecule66 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule67 = null;

        ChemicalChunkerParser.rrb_return rrb68 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:2: ( lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:4: lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_dissolveStructure1511);
            lrb57=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb57.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure1513);
                    adj58=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj58.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:13: ( nnp )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure1516);
                    nnp59=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp59.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:18: ( molecule | unnamedmolecule )
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:19: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure1520);
                    molecule60=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule60.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:28: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1522);
                    unnamedmolecule61=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule61.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:45: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            int cnt28=0;
            loop28:
            do {
                int alt28=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    alt28=1;
                    }
                    break;

                }

                switch (alt28) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:46: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure1526);
            	    inin62=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin62.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:51: ( dtTHE )?
            	    int alt24=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt24=1;
            	            }
            	            break;
            	    }

            	    switch (alt24) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure1528);
            	            dtTHE63=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE63.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:58: ( adj )?
            	    int alt25=2;
            	    alt25 = dfa25.predict(input);
            	    switch (alt25) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure1531);
            	            adj64=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj64.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:63: ( nnp )?
            	    int alt26=2;
            	    switch ( input.LA(1) ) {
            	        case 154:
            	            {
            	            alt26=1;
            	            }
            	            break;
            	    }

            	    switch (alt26) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure1534);
            	            nnp65=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp65.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:68: ( molecule | unnamedmolecule )
            	    int alt27=2;
            	    alt27 = dfa27.predict(input);
            	    switch (alt27) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:69: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure1538);
            	            molecule66=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule66.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:78: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1540);
            	            unnamedmolecule67=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule67.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt28 >= 1 ) break loop28;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(28, input);
                        throw eee;
                }
                cnt28++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_dissolveStructure1545);
            rrb68=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb68.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure1"

    public static class dissolveStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:1: dissolveStructure2 : ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ ;
    public final ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure2_return retval = new ChemicalChunkerParser.dissolveStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj69 = null;

        ChemicalChunkerParser.nnp_return nnp70 = null;

        ChemicalChunkerParser.molecule_return molecule71 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule72 = null;

        ChemicalChunkerParser.inin_return inin73 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE74 = null;

        ChemicalChunkerParser.adj_return adj75 = null;

        ChemicalChunkerParser.nnp_return nnp76 = null;

        ChemicalChunkerParser.molecule_return molecule77 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule78 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:2: ( ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: ( adj )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure2554);
                    adj69=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj69.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:9: ( nnp )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure2557);
                    nnp70=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp70.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:14: ( molecule | unnamedmolecule )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:15: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure2561);
                    molecule71=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule71.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:24: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2563);
                    unnamedmolecule72=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule72.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:41: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            int cnt36=0;
            loop36:
            do {
                int alt36=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA36_2 = input.LA(2);

                    if ( (synpred66_ChemicalChunker()) ) {
                        alt36=1;
                    }


                    }
                    break;

                }

                switch (alt36) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure2567);
            	    inin73=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin73.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:47: ( dtTHE )?
            	    int alt32=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt32=1;
            	            }
            	            break;
            	    }

            	    switch (alt32) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure2569);
            	            dtTHE74=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE74.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:54: ( adj )?
            	    int alt33=2;
            	    alt33 = dfa33.predict(input);
            	    switch (alt33) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure2572);
            	            adj75=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj75.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:59: ( nnp )?
            	    int alt34=2;
            	    switch ( input.LA(1) ) {
            	        case 154:
            	            {
            	            alt34=1;
            	            }
            	            break;
            	    }

            	    switch (alt34) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure2575);
            	            nnp76=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp76.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:64: ( molecule | unnamedmolecule )
            	    int alt35=2;
            	    alt35 = dfa35.predict(input);
            	    switch (alt35) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:65: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure2579);
            	            molecule77=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule77.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:74: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2581);
            	            unnamedmolecule78=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule78.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        throw eee;
                }
                cnt36++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure2"

    public static class dissolveStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:1: dissolveStructure3 : ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ ;
    public final ChemicalChunkerParser.dissolveStructure3_return dissolveStructure3() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure3_return retval = new ChemicalChunkerParser.dissolveStructure3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj79 = null;

        ChemicalChunkerParser.nnp_return nnp80 = null;

        ChemicalChunkerParser.molecule_return molecule81 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule82 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity83 = null;

        ChemicalChunkerParser.inin_return inin84 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE85 = null;

        ChemicalChunkerParser.adj_return adj86 = null;

        ChemicalChunkerParser.nnp_return nnp87 = null;

        ChemicalChunkerParser.molecule_return molecule88 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule89 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:2: ( ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:4: ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:4: ( adj )?
            int alt37=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                    {
                    alt37=1;
                    }
                    break;
            }

            switch (alt37) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure3594);
                    adj79=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj79.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnp_in_dissolveStructure3597);
            nnp80=nnp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp80.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:13: ( molecule | unnamedmolecule | nnchementity )
            int alt38=3;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:14: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure3600);
                    molecule81=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule81.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:23: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3602);
                    unnamedmolecule82=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule82.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:39: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure3604);
                    nnchementity83=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity83.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:53: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            int cnt43=0;
            loop43:
            do {
                int alt43=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA43_2 = input.LA(2);

                    if ( (synpred74_ChemicalChunker()) ) {
                        alt43=1;
                    }


                    }
                    break;

                }

                switch (alt43) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure3608);
            	    inin84=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin84.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( dtTHE )?
            	    int alt39=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt39=1;
            	            }
            	            break;
            	    }

            	    switch (alt39) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure3610);
            	            dtTHE85=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE85.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:66: ( adj )?
            	    int alt40=2;
            	    alt40 = dfa40.predict(input);
            	    switch (alt40) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure3613);
            	            adj86=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj86.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:71: ( nnp )?
            	    int alt41=2;
            	    switch ( input.LA(1) ) {
            	        case 154:
            	            {
            	            alt41=1;
            	            }
            	            break;
            	    }

            	    switch (alt41) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure3616);
            	            nnp87=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp87.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:76: ( molecule | unnamedmolecule )
            	    int alt42=2;
            	    alt42 = dfa42.predict(input);
            	    switch (alt42) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:77: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure3620);
            	            molecule88=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule88.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:86: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3622);
            	            unnamedmolecule89=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule89.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt43 >= 1 ) break loop43;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(43, input);
                        throw eee;
                }
                cnt43++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure3"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc90 = null;

        ChemicalChunkerParser.comma_return comma91 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:2: ( cc | comma )
            int alt44=2;
            switch ( input.LA(1) ) {
            case 124:
                {
                alt44=1;
                }
                break;
            case 101:
                {
                alt44=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction638);
                    cc90=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc90.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction640);
                    comma91=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma91.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure92 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase650);
            verbphraseStructure92=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure92.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 74:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt93 = null;

        ChemicalChunkerParser.to_return to94 = null;

        ChemicalChunkerParser.inAll_return inAll95 = null;

        ChemicalChunkerParser.inafter_return inafter96 = null;

        ChemicalChunkerParser.md_return md97 = null;

        ChemicalChunkerParser.rbconj_return rbconj98 = null;

        ChemicalChunkerParser.adv_return adv99 = null;

        ChemicalChunkerParser.adj_return adj100 = null;

        ChemicalChunkerParser.verb_return verb101 = null;

        ChemicalChunkerParser.md_return md102 = null;

        ChemicalChunkerParser.adv_return adv103 = null;

        ChemicalChunkerParser.adj_return adj104 = null;

        ChemicalChunkerParser.neg_return neg105 = null;

        ChemicalChunkerParser.inoff_return inoff106 = null;

        ChemicalChunkerParser.cc_return cc107 = null;

        ChemicalChunkerParser.comma_return comma108 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase109 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:24: ( dt )?
            int alt45=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt45=1;
                    }
                    break;
            }

            switch (alt45) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure669);
                    dt93=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt93.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:28: ( to )?
            int alt46=2;
            switch ( input.LA(1) ) {
                case 180:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA46_3 = input.LA(3);

                            if ( (synpred77_ChemicalChunker()) ) {
                                alt46=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt46) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure672);
                    to94=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to94.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:32: ( inAll )?
            int alt47=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt47=1;
                    }
                    break;
                case 20:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA47_4 = input.LA(3);

                            if ( (synpred78_ChemicalChunker()) ) {
                                alt47=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt47) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure675);
                    inAll95=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll95.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:39: ( inafter )?
            int alt48=2;
            switch ( input.LA(1) ) {
                case 20:
                    {
                    alt48=1;
                    }
                    break;
            }

            switch (alt48) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure678);
                    inafter96=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter96.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                alt58 = dfa58.predict(input);
                switch (alt58) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:49: ( md )*
            	    loop49:
            	    do {
            	        int alt49=2;
            	        switch ( input.LA(1) ) {
            	        case 147:
            	            {
            	            alt49=1;
            	            }
            	            break;

            	        }

            	        switch (alt49) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure682);
            	    	    md97=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md97.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop49;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:53: ( rbconj )?
            	    int alt50=2;
            	    switch ( input.LA(1) ) {
            	        case 174:
            	            {
            	            alt50=1;
            	            }
            	            break;
            	    }

            	    switch (alt50) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure685);
            	            rbconj98=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj98.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:61: ( adv )*
            	    loop51:
            	    do {
            	        int alt51=2;
            	        switch ( input.LA(1) ) {
            	        case 172:
            	        case 173:
            	        case 175:
            	        case 176:
            	        case 178:
            	            {
            	            alt51=1;
            	            }
            	            break;

            	        }

            	        switch (alt51) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure688);
            	    	    adv99=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv99.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop51;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:66: ( adj )?
            	    int alt52=2;
            	    switch ( input.LA(1) ) {
            	        case 12:
            	        case 13:
            	        case 143:
            	        case 144:
            	        case 145:
            	        case 146:
            	            {
            	            alt52=1;
            	            }
            	            break;
            	    }

            	    switch (alt52) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure691);
            	            adj100=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj100.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:71: ( verb )+
            	    int cnt53=0;
            	    loop53:
            	    do {
            	        int alt53=2;
            	        alt53 = dfa53.predict(input);
            	        switch (alt53) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure694);
            	    	    verb101=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb101.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt53 >= 1 ) break loop53;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(53, input);
            	                throw eee;
            	        }
            	        cnt53++;
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:77: ( md )*
            	    loop54:
            	    do {
            	        int alt54=2;
            	        switch ( input.LA(1) ) {
            	        case 147:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA54_3 = input.LA(3);

            	                if ( (synpred85_ChemicalChunker()) ) {
            	                    alt54=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt54) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure697);
            	    	    md102=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md102.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop54;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:81: ( adv )*
            	    loop55:
            	    do {
            	        int alt55=2;
            	        alt55 = dfa55.predict(input);
            	        switch (alt55) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure700);
            	    	    adv103=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv103.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop55;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:86: ( adj )?
            	    int alt56=2;
            	    alt56 = dfa56.predict(input);
            	    switch (alt56) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure703);
            	            adj104=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj104.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:91: ( neg )?
            	    int alt57=2;
            	    switch ( input.LA(1) ) {
            	        case 103:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA57_3 = input.LA(3);

            	                    if ( (synpred88_ChemicalChunker()) ) {
            	                        alt57=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt57) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure706);
            	            neg105=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg105.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:99: ( inoff )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 33:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA59_3 = input.LA(3);

                            if ( (synpred90_ChemicalChunker()) ) {
                                alt59=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure712);
                    inoff106=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff106.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:106: ( ( cc )? ( comma )? prepphrase )*
            loop62:
            do {
                int alt62=2;
                alt62 = dfa62.predict(input);
                switch (alt62) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:107: ( cc )?
            	    int alt60=2;
            	    switch ( input.LA(1) ) {
            	        case 124:
            	            {
            	            alt60=1;
            	            }
            	            break;
            	    }

            	    switch (alt60) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure716);
            	            cc107=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc107.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:111: ( comma )?
            	    int alt61=2;
            	    switch ( input.LA(1) ) {
            	        case 101:
            	            {
            	            alt61=1;
            	            }
            	            break;
            	    }

            	    switch (alt61) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure719);
            	            comma108=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma108.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure722);
            	    prepphrase109=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase109.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb110 = null;

        ChemicalChunkerParser.vbp_return vbp111 = null;

        ChemicalChunkerParser.vbg_return vbg112 = null;

        ChemicalChunkerParser.vbd_return vbd113 = null;

        ChemicalChunkerParser.vbz_return vbz114 = null;

        ChemicalChunkerParser.vbn_return vbn115 = null;

        ChemicalChunkerParser.vbuse_return vbuse116 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge117 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse118 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb119 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject120 = null;

        ChemicalChunkerParser.vbadd_return vbadd121 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge122 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain123 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop124 = null;

        ChemicalChunkerParser.vbfill_return vbfill125 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend126 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat127 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus128 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate129 = null;

        ChemicalChunkerParser.vbcool_return vbcool130 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass131 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve132 = null;

        ChemicalChunkerParser.vbdry_return vbdry133 = null;

        ChemicalChunkerParser.vbextract_return vbextract134 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter135 = null;

        ChemicalChunkerParser.vbheat_return vbheat136 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease137 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition138 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate139 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify140 = null;

        ChemicalChunkerParser.vbquench_return vbquench141 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover142 = null;

        ChemicalChunkerParser.vbremove_return vbremove143 = null;

        ChemicalChunkerParser.vbstir_return vbstir144 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize145 = null;

        ChemicalChunkerParser.vbwait_return vbwait146 = null;

        ChemicalChunkerParser.vbwash_return vbwash147 = null;

        ChemicalChunkerParser.vbyield_return vbyield148 = null;

        ChemicalChunkerParser.vbchange_return vbchange149 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt63=40;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb734);
                    vb110=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb110.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb736);
                    vbp111=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp111.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb738);
                    vbg112=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg112.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb740);
                    vbd113=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd113.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb742);
                    vbz114=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz114.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb744);
                    vbn115=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn115.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb746);
                    vbuse116=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse116.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb748);
                    vbsubmerge117=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge117.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb750);
                    vbimmerse118=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse118.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb752);
                    degassMultiVerb119=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb119.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb754);
                    vbsubject120=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject120.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb756);
                    vbadd121=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd121.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:90: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb758);
                    vbcharge122=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge122.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:99: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb760);
                    vbcontain123=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain123.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:109: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb762);
                    vbdrop124=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop124.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:116: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb764);
                    vbfill125=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill125.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:123: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb766);
                    vbsuspend126=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend126.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:133: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb768);
                    vbtreat127=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat127.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:141: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb770);
                    vbapparatus128=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus128.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:153: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb772);
                    vbconcentrate129=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate129.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:167: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb774);
                    vbcool130=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool130.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:174: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb776);
                    vbdegass131=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass131.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:183: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb778);
                    vbdissolve132=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve132.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:194: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb780);
                    vbdry133=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry133.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:200: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb782);
                    vbextract134=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract134.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:210: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb784);
                    vbfilter135=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter135.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:220: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb787);
                    vbheat136=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat136.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:227: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb789);
                    vbincrease137=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease137.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:238: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb791);
                    vbpartition138=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition138.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:250: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb793);
                    vbprecipitate139=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate139.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:264: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb795);
                    vbpurify140=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify140.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:273: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb797);
                    vbquench141=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench141.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:282: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb799);
                    vbrecover142=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover142.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:292: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb801);
                    vbremove143=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove143.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:301: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb803);
                    vbstir144=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir144.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:308: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb805);
                    vbsynthesize145=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize145.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:321: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb807);
                    vbwait146=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait146.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:328: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb809);
                    vbwash147=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash147.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:335: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb811);
                    vbyield148=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield148.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:343: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb813);
                    vbchange149=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange149.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass150 = null;

        ChemicalChunkerParser.cc_return cc151 = null;

        ChemicalChunkerParser.vbfill_return vbfill152 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:2: ( vbdegass cc vbfill )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb822);
            vbdegass150=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass150.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb824);
            cc151=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc151.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb826);
            vbfill152=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill152.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd153 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd154 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:8: ( cd | oscarcd )
            int alt64=2;
            switch ( input.LA(1) ) {
            case 125:
                {
                alt64=1;
                }
                break;
            case 11:
                {
                alt64=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }

            switch (alt64) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number833);
                    cd153=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd153.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number835);
                    oscarcd154=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd154.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt155 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss156 = null;

        ChemicalChunkerParser.wpo_return wpo157 = null;

        ChemicalChunkerParser.wpo_return wpo158 = null;

        ChemicalChunkerParser.wps_return wps159 = null;

        ChemicalChunkerParser.wql_return wql160 = null;

        ChemicalChunkerParser.wrb_return wrb161 = null;

        ChemicalChunkerParser.ex_return ex162 = null;

        ChemicalChunkerParser.pdt_return pdt163 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt65=9;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause843);
                    wdt155=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt155.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause845);
                    wp_poss156=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss156.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause847);
                    wpo157=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo157.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause849);
                    wpo158=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo158.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause851);
                    wps159=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps159.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause853);
                    wql160=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql160.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause855);
                    wrb161=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb161.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause857);
                    ex162=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex162.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause859);
                    pdt163=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt163.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure164 = null;

        ChemicalChunkerParser.dash_return dash165 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure166 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:7: ( nounStructure ( dash nounStructure )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun867);
            nounStructure164=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure164.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:23: ( dash nounStructure )*
            loop66:
            do {
                int alt66=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    int LA66_2 = input.LA(2);

                    if ( (synpred142_ChemicalChunker()) ) {
                        alt66=1;
                    }


                    }
                    break;

                }

                switch (alt66) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun870);
            	    dash165=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash165.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun872);
            	    nounStructure166=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure166.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:1: nounStructure : ( prp | citation | cycles | molecule | apparatus | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp167 = null;

        ChemicalChunkerParser.citation_return citation168 = null;

        ChemicalChunkerParser.cycles_return cycles169 = null;

        ChemicalChunkerParser.molecule_return molecule170 = null;

        ChemicalChunkerParser.apparatus_return apparatus171 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule172 = null;

        ChemicalChunkerParser.nnyield_return nnyield173 = null;

        ChemicalChunkerParser.nnstate_return nnstate174 = null;

        ChemicalChunkerParser.nn_return nn175 = null;

        ChemicalChunkerParser.nns_return nns176 = null;

        ChemicalChunkerParser.nnp_return nnp177 = null;

        ChemicalChunkerParser.nnadd_return nnadd178 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase179 = null;

        ChemicalChunkerParser.nnexample_return nnexample180 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr181 = null;

        ChemicalChunkerParser.range_return range182 = null;

        ChemicalChunkerParser.amount_return amount183 = null;

        ChemicalChunkerParser.mixture_return mixture184 = null;

        ChemicalChunkerParser.nntime_return nntime185 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere186 = null;

        ChemicalChunkerParser.nneq_return nneq187 = null;

        ChemicalChunkerParser.quantity_return quantity188 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity189 = null;

        ChemicalChunkerParser.measurements_return measurements190 = null;

        ChemicalChunkerParser.nntemp_return nntemp191 = null;

        ChemicalChunkerParser.nnflash_return nnflash192 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral193 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod194 = null;

        ChemicalChunkerParser.nnamount_return nnamount195 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure196 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn197 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography198 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum199 = null;

        ChemicalChunkerParser.nncycle_return nncycle200 = null;

        ChemicalChunkerParser.nntimes_return nntimes201 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate202 = null;

        ChemicalChunkerParser.nnvol_return nnvol203 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify204 = null;

        ChemicalChunkerParser.wdt_return wdt205 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss206 = null;

        ChemicalChunkerParser.wpo_return wpo207 = null;

        ChemicalChunkerParser.wps_return wps208 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize209 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture210 = null;

        ChemicalChunkerParser.reference_return reference211 = null;

        ChemicalChunkerParser.oscaront_return oscaront212 = null;

        ChemicalChunkerParser.nndry_return nndry213 = null;

        ChemicalChunkerParser.number_return number214 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound215 = null;

        ChemicalChunkerParser.nnextract_return nnextract216 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter217 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate218 = null;

        ChemicalChunkerParser.nnremove_return nnremove219 = null;

        ChemicalChunkerParser.fw_return fw220 = null;

        ChemicalChunkerParser.fwin_return fwin221 = null;

        ChemicalChunkerParser.sym_return sym222 = null;

        ChemicalChunkerParser.clause_return clause223 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:15: ( prp | citation | cycles | molecule | apparatus | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt67=57;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure883);
                    prp167=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp167.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:22: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure885);
                    citation168=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation168.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:31: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure887);
                    cycles169=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles169.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:38: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure889);
                    molecule170=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule170.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:47: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure891);
                    apparatus171=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus171.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:57: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure893);
                    unnamedmolecule172=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule172.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:73: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure895);
                    nnyield173=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield173.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:81: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure897);
                    nnstate174=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate174.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:89: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure899);
                    nn175=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn175.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:92: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure901);
                    nns176=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns176.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:96: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure903);
                    nnp177=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp177.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:100: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure905);
                    nnadd178=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd178.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:106: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure907);
                    preparationphrase179=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase179.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:124: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure909);
                    nnexample180=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample180.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:134: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_nounStructure911);
                    oscarcpr181=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr181.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:143: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure913);
                    range182=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range182.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:149: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_nounStructure915);
                    amount183=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount183.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:156: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure917);
                    mixture184=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture184.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:164: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure919);
                    nntime185=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime185.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:171: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure921);
                    nnatmosphere186=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere186.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:184: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure923);
                    nneq187=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq187.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:189: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure925);
                    quantity188=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity188.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:198: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure927);
                    nnchementity189=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity189.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:211: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_nounStructure929);
                    measurements190=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements190.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:224: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure931);
                    nntemp191=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp191.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:231: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure933);
                    nnflash192=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash192.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:239: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure935);
                    nngeneral193=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral193.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:249: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_nounStructure937);
                    nnmethod194=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod194.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:258: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure939);
                    nnamount195=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount195.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:267: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure941);
                    nnpressure196=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure196.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:278: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure943);
                    nncolumn197=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn197.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:287: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure945);
                    nnchromatography198=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography198.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:304: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure947);
                    nnvacuum199=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum199.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:313: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure949);
                    nncycle200=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle200.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:321: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure951);
                    nntimes201=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes201.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:329: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure953);
                    nnconcentrate202=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate202.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:343: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure955);
                    nnvol203=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol203.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:349: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure957);
                    nnpurify204=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify204.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:358: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_nounStructure959);
                    wdt205=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt205.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:362: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_nounStructure961);
                    wp_poss206=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss206.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:370: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_nounStructure963);
                    wpo207=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo207.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:374: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_nounStructure965);
                    wps208=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps208.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:378: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure967);
                    nnsynthesize209=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize209.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:391: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure969);
                    nnmixture210=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture210.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:401: reference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_reference_in_nounStructure971);
                    reference211=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference211.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:411: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_nounStructure973);
                    oscaront212=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront212.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:420: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure975);
                    nndry213=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry213.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:426: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_nounStructure977);
                    number214=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number214.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:433: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure979);
                    oscarCompound215=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound215.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:447: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure981);
                    nnextract216=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract216.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:457: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure983);
                    nnfilter217=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter217.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:466: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure985);
                    nnprecipitate218=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate218.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:480: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure987);
                    nnremove219=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove219.getTree());

                    }
                    break;
                case 54 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:489: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure989);
                    fw220=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw220.getTree());

                    }
                    break;
                case 55 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:492: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_nounStructure991);
                    fwin221=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin221.getTree());

                    }
                    break;
                case 56 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:497: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure993);
                    sym222=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym222.getTree());

                    }
                    break;
                case 57 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:501: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure995);
                    clause223=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause223.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:1: range : cd dash cd ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd224 = null;

        ChemicalChunkerParser.dash_return dash225 = null;

        ChemicalChunkerParser.cd_return cd226 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:6: ( cd dash cd )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:8: cd dash cd
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_range1001);
            cd224=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd224.getTree());
            pushFollow(FOLLOW_dash_in_range1003);
            dash225=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash225.getTree());
            pushFollow(FOLLOW_cd_in_range1005);
            cd226=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd226.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: cycles : cycleStructure -> ^( NODE[\"CYCLES\"] cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure227 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:8: ( cycleStructure -> ^( NODE[\"CYCLES\"] cycleStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles1012);
            cycleStructure227=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure227.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:25: -> ^( NODE[\"CYCLES\"] cycleStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:28: ^( NODE[\"CYCLES\"] cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd228 = null;

        ChemicalChunkerParser.dashNN_return dashNN229 = null;

        ChemicalChunkerParser.nncycle_return nncycle230 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:16: ( cd ( dashNN )? nncycle )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure1030);
            cd228=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd228.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:21: ( dashNN )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 125:
                case 143:
                case 144:
                case 145:
                case 146:
                case 149:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure1032);
                    dashNN229=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN229.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure1035);
            nncycle230=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle230.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj231 = null;

        ChemicalChunkerParser.nn_return nn232 = null;

        ChemicalChunkerParser.cd_return cd233 = null;

        ChemicalChunkerParser.dash_return dash234 = null;

        ChemicalChunkerParser.adj_return adj235 = null;

        ChemicalChunkerParser.nn_return nn236 = null;

        ChemicalChunkerParser.cd_return cd237 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:10: ( adj | nn | cd )
            int alt69=3;
            switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt69=1;
                }
                break;
            case 149:
                {
                alt69=2;
                }
                break;
            case 125:
                {
                alt69=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN1045);
                    adj231=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj231.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN1047);
                    nn232=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn232.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN1049);
                    cd233=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd233.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:22: ( dash ( adj | nn | cd ) )*
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN1053);
            	    dash234=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash234.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:28: ( adj | nn | cd )
            	    int alt70=3;
            	    switch ( input.LA(1) ) {
            	    case 12:
            	    case 13:
            	    case 143:
            	    case 144:
            	    case 145:
            	    case 146:
            	        {
            	        alt70=1;
            	        }
            	        break;
            	    case 149:
            	        {
            	        alt70=2;
            	        }
            	        break;
            	    case 125:
            	        {
            	        alt70=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 70, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt70) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN1056);
            	            adj235=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj235.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN1058);
            	            nn236=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn236.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN1060);
            	            cd237=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd237.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:1: ratio : ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio238 = null;

        ChemicalChunkerParser.nounratio_return nounratio239 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:7: ( ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:9: ( numberratio | nounratio )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:9: ( numberratio | nounratio )
            int alt72=2;
            switch ( input.LA(1) ) {
            case 125:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 12:
                    case 13:
                    case 17:
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 52:
                    case 104:
                    case 106:
                    case 125:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 149:
                        {
                        alt72=2;
                        }
                        break;
                    case 100:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 34:
                            case 35:
                            case 36:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 59:
                            case 60:
                            case 69:
                            case 71:
                            case 76:
                            case 78:
                            case 80:
                            case 86:
                            case 88:
                            case 92:
                            case 94:
                            case 95:
                            case 99:
                            case 101:
                            case 107:
                            case 109:
                            case 130:
                            case 135:
                            case 136:
                            case 137:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 149:
                            case 151:
                            case 154:
                            case 166:
                            case 179:
                            case 188:
                            case 189:
                            case 190:
                            case 191:
                            case 192:
                            case 193:
                            case 194:
                                {
                                alt72=2;
                                }
                                break;
                            case 125:
                                {
                                switch ( input.LA(6) ) {
                                case TOKEN:
                                    {
                                    int LA72_7 = input.LA(7);

                                    if ( (synpred205_ChemicalChunker()) ) {
                                        alt72=1;
                                    }
                                    else if ( (true) ) {
                                        alt72=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 72, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 72, 6, input);

                                    throw nvae;
                                }

                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 72, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 72, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 72, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 1, input);

                    throw nvae;
                }

                }
                break;
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 34:
            case 35:
            case 36:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 59:
            case 60:
            case 69:
            case 71:
            case 76:
            case 78:
            case 80:
            case 86:
            case 88:
            case 92:
            case 94:
            case 95:
            case 99:
            case 101:
            case 107:
            case 109:
            case 130:
            case 135:
            case 136:
            case 137:
            case 143:
            case 144:
            case 145:
            case 146:
            case 149:
            case 151:
            case 154:
            case 166:
            case 179:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
                {
                alt72=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio1073);
                    numberratio238=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio238.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio1075);
                    nounratio239=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio239.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numberratio, nounratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 89:33: -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:36: ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RATIO"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:52: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:65: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:1: numberratio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd240 = null;

        ChemicalChunkerParser.colon_return colon241 = null;

        ChemicalChunkerParser.cd_return cd242 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:13: ( cd ( colon cd )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:16: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio1099);
            cd240=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd240.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:19: ( colon cd )+
            int cnt73=0;
            loop73:
            do {
                int alt73=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 125:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA73_5 = input.LA(5);

                                if ( (synpred206_ChemicalChunker()) ) {
                                    alt73=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt73) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:20: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio1102);
            	    colon241=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon241.getTree());
            	    pushFollow(FOLLOW_cd_in_numberratio1104);
            	    cd242=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd242.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        throw eee;
                }
                cnt73++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun243 = null;

        ChemicalChunkerParser.colon_return colon244 = null;

        ChemicalChunkerParser.noun_return noun245 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:2: ( noun ( colon noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio1117);
            noun243=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun243.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:11: ( colon noun )+
            int cnt74=0;
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA74_2 = input.LA(2);

                    if ( (synpred207_ChemicalChunker()) ) {
                        alt74=1;
                    }


                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio1121);
            	    colon244=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon244.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio1123);
            	    noun245=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun245.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:1: reference : lsqb cd rsqb ;
    public final ChemicalChunkerParser.reference_return reference() throws RecognitionException {
        ChemicalChunkerParser.reference_return retval = new ChemicalChunkerParser.reference_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb246 = null;

        ChemicalChunkerParser.cd_return cd247 = null;

        ChemicalChunkerParser.rsqb_return rsqb248 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:2: ( lsqb cd rsqb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:4: lsqb cd rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_reference1137);
            lsqb246=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb246.getTree());
            pushFollow(FOLLOW_cd_in_reference1139);
            cd247=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd247.getTree());
            pushFollow(FOLLOW_rsqb_in_reference1141);
            rsqb248=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb248.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reference"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1249 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2250 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:9: ( ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:11: ( citationStructure1 | citationStructure2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:11: ( citationStructure1 | citationStructure2 )
            int alt75=2;
            switch ( input.LA(1) ) {
            case 109:
                {
                alt75=1;
                }
                break;
            case 101:
                {
                alt75=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }

            switch (alt75) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation1148);
                    citationStructure1249=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1249.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation1150);
                    citationStructure2250=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2250.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure2, citationStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 96:51: -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:54: ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CITATION"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:74: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:94: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb251 = null;

        ChemicalChunkerParser.citationContent_return citationContent252 = null;

        ChemicalChunkerParser.rrb_return rrb253 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:19: ( lrb citationContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure11173);
            lrb251=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb251.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure11175);
            citationContent252=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent252.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure11177);
            rrb253=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb253.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma254 = null;

        ChemicalChunkerParser.lrb_return lrb255 = null;

        ChemicalChunkerParser.citationContent_return citationContent256 = null;

        ChemicalChunkerParser.rrb_return rrb257 = null;

        ChemicalChunkerParser.comma_return comma258 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:19: ( comma lrb citationContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure21183);
            comma254=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma254.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure21185);
            lrb255=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb255.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure21187);
            citationContent256=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent256.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure21189);
            rrb257=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb257.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure21191);
            comma258=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma258.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp259 = null;

        ChemicalChunkerParser.fw_return fw260 = null;

        ChemicalChunkerParser.cd_return cd261 = null;

        ChemicalChunkerParser.conjunction_return conjunction262 = null;

        ChemicalChunkerParser.nnp_return nnp263 = null;

        ChemicalChunkerParser.fw_return fw264 = null;

        ChemicalChunkerParser.cd_return cd265 = null;

        ChemicalChunkerParser.conjunction_return conjunction266 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:20: ( nnp | fw | cd | conjunction )
            int alt76=4;
            switch ( input.LA(1) ) {
            case 154:
                {
                alt76=1;
                }
                break;
            case 136:
                {
                alt76=2;
                }
                break;
            case 125:
                {
                alt76=3;
                }
                break;
            case 101:
            case 124:
                {
                alt76=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }

            switch (alt76) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent1200);
                    nnp259=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp259.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent1202);
                    fw260=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw260.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent1204);
                    cd261=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd261.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent1206);
                    conjunction262=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction262.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:44: ( nnp | fw | cd | conjunction )+
            int cnt77=0;
            loop77:
            do {
                int alt77=5;
                switch ( input.LA(1) ) {
                case 154:
                    {
                    alt77=1;
                    }
                    break;
                case 136:
                    {
                    alt77=2;
                    }
                    break;
                case 125:
                    {
                    alt77=3;
                    }
                    break;
                case 101:
                case 124:
                    {
                    alt77=4;
                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent1210);
            	    nnp263=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp263.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent1212);
            	    fw264=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw264.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent1214);
            	    cd265=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd265.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent1216);
            	    conjunction266=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction266.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:1: mixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2267 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1268 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:8: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:10: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:10: ( mixtureStructure2 | mixtureStructure1 )
            int alt78=2;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt78=1;
                }
                break;
            case 109:
                {
                alt78=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:11: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture1228);
                    mixtureStructure2267=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2267.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:29: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture1230);
                    mixtureStructure1268=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1268.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 102:48: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:51: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:70: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:89: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma269 = null;

        ChemicalChunkerParser.lrb_return lrb270 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent271 = null;

        ChemicalChunkerParser.rrb_return rrb272 = null;

        ChemicalChunkerParser.comma_return comma273 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:18: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure21251);
            comma269=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma269.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure21253);
            lrb270=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb270.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure21255);
            mixtureContent271=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent271.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure21257);
            rrb272=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb272.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure21259);
            comma273=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma273.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb274 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent275 = null;

        ChemicalChunkerParser.rrb_return rrb276 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:18: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:21: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11266);
            lrb274=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb274.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11268);
            mixtureContent275=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent275.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11270);
            rrb276=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb276.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:1: mixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw277 = null;

        ChemicalChunkerParser.verb_return verb278 = null;

        ChemicalChunkerParser.measurements_return measurements279 = null;

        ChemicalChunkerParser.md_return md280 = null;

        ChemicalChunkerParser.stop_return stop281 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound282 = null;

        ChemicalChunkerParser.molecule_return molecule283 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule284 = null;

        ChemicalChunkerParser.dash_return dash285 = null;

        ChemicalChunkerParser.sym_return sym286 = null;

        ChemicalChunkerParser.cd_return cd287 = null;

        ChemicalChunkerParser.noun_return noun288 = null;

        ChemicalChunkerParser.inof_return inof289 = null;

        ChemicalChunkerParser.inAll_return inAll290 = null;

        ChemicalChunkerParser.cd_return cd291 = null;

        ChemicalChunkerParser.comma_return comma292 = null;

        ChemicalChunkerParser.adj_return adj293 = null;

        ChemicalChunkerParser.colon_return colon294 = null;

        ChemicalChunkerParser.stop_return stop295 = null;

        ChemicalChunkerParser.minimixture_return minimixture296 = null;

        ChemicalChunkerParser.fw_return fw297 = null;

        ChemicalChunkerParser.verb_return verb298 = null;

        ChemicalChunkerParser.measurements_return measurements299 = null;

        ChemicalChunkerParser.nnyield_return nnyield300 = null;

        ChemicalChunkerParser.md_return md301 = null;

        ChemicalChunkerParser.stop_return stop302 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound303 = null;

        ChemicalChunkerParser.molecule_return molecule304 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule305 = null;

        ChemicalChunkerParser.dash_return dash306 = null;

        ChemicalChunkerParser.sym_return sym307 = null;

        ChemicalChunkerParser.cd_return cd308 = null;

        ChemicalChunkerParser.noun_return noun309 = null;

        ChemicalChunkerParser.inof_return inof310 = null;

        ChemicalChunkerParser.inAll_return inAll311 = null;

        ChemicalChunkerParser.cd_return cd312 = null;

        ChemicalChunkerParser.comma_return comma313 = null;

        ChemicalChunkerParser.adj_return adj314 = null;

        ChemicalChunkerParser.colon_return colon315 = null;

        ChemicalChunkerParser.stop_return stop316 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:15: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt79=19;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1279);
                    fw277=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw277.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1281);
                    verb278=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb278.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:28: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1283);
                    measurements279=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements279.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:41: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1285);
                    md280=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md280.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:44: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1287);
                    stop281=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop281.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:49: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1289);
                    oscarCompound282=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound282.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:63: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1291);
                    molecule283=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule283.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:72: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1293);
                    unnamedmolecule284=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule284.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:88: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1295);
                    dash285=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash285.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:93: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1297);
                    sym286=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym286.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:97: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1299);
                    cd287=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd287.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:100: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1301);
                    noun288=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun288.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:105: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1303);
                    inof289=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof289.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:110: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1305);
                    inAll290=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll290.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:116: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1307);
                    cd291=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd291.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:119: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1309);
                    comma292=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma292.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:125: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1311);
                    adj293=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj293.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:129: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1313);
                    colon294=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon294.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:135: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1315);
                    stop295=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop295.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:141: ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt80=0;
            loop80:
            do {
                int alt80=22;
                alt80 = dfa80.predict(input);
                switch (alt80) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:142: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent1319);
            	    minimixture296=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture296.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:154: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1321);
            	    fw297=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw297.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:157: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1323);
            	    verb298=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb298.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:162: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1325);
            	    measurements299=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements299.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:175: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent1327);
            	    nnyield300=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield300.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:183: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1329);
            	    md301=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md301.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:186: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1331);
            	    stop302=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop302.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:191: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1333);
            	    oscarCompound303=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound303.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:205: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1335);
            	    molecule304=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule304.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:214: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1337);
            	    unnamedmolecule305=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule305.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:230: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1339);
            	    dash306=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash306.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:235: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1341);
            	    sym307=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym307.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:239: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1343);
            	    cd308=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd308.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:242: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1345);
            	    noun309=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun309.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:247: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1347);
            	    inof310=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof310.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:252: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1349);
            	    inAll311=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll311.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:258: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1351);
            	    cd312=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd312.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:261: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1353);
            	    comma313=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma313.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:267: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1355);
            	    adj314=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj314.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:271: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1357);
            	    colon315=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon315.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:277: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1359);
            	    stop316=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop316.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2317 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1318 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt81=2;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt81=1;
                }
                break;
            case 109:
                {
                alt81=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture1370);
                    mixtureStructure2317=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2317.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture1372);
                    mixtureStructure1318=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1318.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 107:52: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:55: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:74: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:93: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class minimixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:1: minimixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.minimixtureStructure2_return minimixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure2_return retval = new ChemicalChunkerParser.minimixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma319 = null;

        ChemicalChunkerParser.lrb_return lrb320 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent321 = null;

        ChemicalChunkerParser.rrb_return rrb322 = null;

        ChemicalChunkerParser.comma_return comma323 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:22: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:24: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_minimixtureStructure21393);
            comma319=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma319.getTree());
            pushFollow(FOLLOW_lrb_in_minimixtureStructure21395);
            lrb320=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb320.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure21397);
            mixtureContent321=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent321.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure21399);
            rrb322=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb322.getTree());
            pushFollow(FOLLOW_comma_in_minimixtureStructure21401);
            comma323=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma323.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure2"

    public static class minimixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:1: minimixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.minimixtureStructure1_return minimixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure1_return retval = new ChemicalChunkerParser.minimixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb324 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent325 = null;

        ChemicalChunkerParser.rrb_return rrb326 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:22: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:25: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_minimixtureStructure11408);
            lrb324=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb324.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure11410);
            mixtureContent325=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent325.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure11412);
            rrb326=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb326.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure1"

    public static class minimixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:1: minimixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.minimixtureContent_return minimixtureContent() throws RecognitionException {
        ChemicalChunkerParser.minimixtureContent_return retval = new ChemicalChunkerParser.minimixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw327 = null;

        ChemicalChunkerParser.verb_return verb328 = null;

        ChemicalChunkerParser.measurements_return measurements329 = null;

        ChemicalChunkerParser.md_return md330 = null;

        ChemicalChunkerParser.stop_return stop331 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound332 = null;

        ChemicalChunkerParser.molecule_return molecule333 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule334 = null;

        ChemicalChunkerParser.dash_return dash335 = null;

        ChemicalChunkerParser.sym_return sym336 = null;

        ChemicalChunkerParser.cd_return cd337 = null;

        ChemicalChunkerParser.noun_return noun338 = null;

        ChemicalChunkerParser.inof_return inof339 = null;

        ChemicalChunkerParser.inAll_return inAll340 = null;

        ChemicalChunkerParser.cd_return cd341 = null;

        ChemicalChunkerParser.comma_return comma342 = null;

        ChemicalChunkerParser.adj_return adj343 = null;

        ChemicalChunkerParser.colon_return colon344 = null;

        ChemicalChunkerParser.stop_return stop345 = null;

        ChemicalChunkerParser.fw_return fw346 = null;

        ChemicalChunkerParser.verb_return verb347 = null;

        ChemicalChunkerParser.measurements_return measurements348 = null;

        ChemicalChunkerParser.nnyield_return nnyield349 = null;

        ChemicalChunkerParser.md_return md350 = null;

        ChemicalChunkerParser.stop_return stop351 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound352 = null;

        ChemicalChunkerParser.molecule_return molecule353 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule354 = null;

        ChemicalChunkerParser.dash_return dash355 = null;

        ChemicalChunkerParser.sym_return sym356 = null;

        ChemicalChunkerParser.cd_return cd357 = null;

        ChemicalChunkerParser.noun_return noun358 = null;

        ChemicalChunkerParser.inof_return inof359 = null;

        ChemicalChunkerParser.inAll_return inAll360 = null;

        ChemicalChunkerParser.cd_return cd361 = null;

        ChemicalChunkerParser.comma_return comma362 = null;

        ChemicalChunkerParser.adj_return adj363 = null;

        ChemicalChunkerParser.colon_return colon364 = null;

        ChemicalChunkerParser.stop_return stop365 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:19: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:23: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:23: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt82=19;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:24: fw
                    {
                    pushFollow(FOLLOW_fw_in_minimixtureContent1421);
                    fw327=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw327.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:27: verb
                    {
                    pushFollow(FOLLOW_verb_in_minimixtureContent1423);
                    verb328=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb328.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:32: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_minimixtureContent1425);
                    measurements329=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements329.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:45: md
                    {
                    pushFollow(FOLLOW_md_in_minimixtureContent1427);
                    md330=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md330.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:48: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1429);
                    stop331=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop331.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:53: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1431);
                    oscarCompound332=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound332.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:67: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_minimixtureContent1433);
                    molecule333=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule333.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:76: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1435);
                    unnamedmolecule334=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule334.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:92: dash
                    {
                    pushFollow(FOLLOW_dash_in_minimixtureContent1437);
                    dash335=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash335.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:97: sym
                    {
                    pushFollow(FOLLOW_sym_in_minimixtureContent1439);
                    sym336=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym336.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:101: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1441);
                    cd337=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd337.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:104: noun
                    {
                    pushFollow(FOLLOW_noun_in_minimixtureContent1443);
                    noun338=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun338.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:109: inof
                    {
                    pushFollow(FOLLOW_inof_in_minimixtureContent1445);
                    inof339=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof339.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:114: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_minimixtureContent1447);
                    inAll340=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll340.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:120: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1449);
                    cd341=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd341.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:123: comma
                    {
                    pushFollow(FOLLOW_comma_in_minimixtureContent1451);
                    comma342=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma342.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:129: adj
                    {
                    pushFollow(FOLLOW_adj_in_minimixtureContent1453);
                    adj343=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj343.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:133: colon
                    {
                    pushFollow(FOLLOW_colon_in_minimixtureContent1455);
                    colon344=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon344.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:139: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1457);
                    stop345=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop345.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:145: ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt83=0;
            loop83:
            do {
                int alt83=21;
                alt83 = dfa83.predict(input);
                switch (alt83) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:146: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_minimixtureContent1461);
            	    fw346=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw346.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:149: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_minimixtureContent1463);
            	    verb347=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb347.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:154: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_minimixtureContent1465);
            	    measurements348=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements348.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:167: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_minimixtureContent1467);
            	    nnyield349=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield349.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:175: md
            	    {
            	    pushFollow(FOLLOW_md_in_minimixtureContent1469);
            	    md350=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md350.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:178: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1471);
            	    stop351=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop351.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:183: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1473);
            	    oscarCompound352=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound352.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:197: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_minimixtureContent1475);
            	    molecule353=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule353.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:206: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1477);
            	    unnamedmolecule354=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule354.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:222: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_minimixtureContent1479);
            	    dash355=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash355.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:227: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_minimixtureContent1481);
            	    sym356=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym356.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:231: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1483);
            	    cd357=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd357.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:234: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_minimixtureContent1485);
            	    noun358=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun358.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:239: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_minimixtureContent1487);
            	    inof359=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof359.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:244: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_minimixtureContent1489);
            	    inAll360=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll360.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:250: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1491);
            	    cd361=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd361.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:253: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_minimixtureContent1493);
            	    comma362=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma362.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:259: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_minimixtureContent1495);
            	    adj363=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj363.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:263: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_minimixtureContent1497);
            	    colon364=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon364.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:269: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1499);
            	    stop365=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop365.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj366 = null;

        ChemicalChunkerParser.jjr_return jjr367 = null;

        ChemicalChunkerParser.jjs_return jjs368 = null;

        ChemicalChunkerParser.jjt_return jjt369 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj370 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn371 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt84=6;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt84=1;
                }
                break;
            case 144:
                {
                alt84=2;
                }
                break;
            case 145:
                {
                alt84=3;
                }
                break;
            case 146:
                {
                alt84=4;
                }
                break;
            case 12:
                {
                alt84=5;
                }
                break;
            case 13:
                {
                alt84=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1510);
                    jj366=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj366.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1512);
                    jjr367=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr367.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1514);
                    jjs368=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs368.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj1516);
                    jjt369=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt369.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1518);
                    oscarcj370=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj370.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1520);
                    oscarrn371=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn371.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:1: adv : ( rb | rbr | rbt | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb372 = null;

        ChemicalChunkerParser.rbr_return rbr373 = null;

        ChemicalChunkerParser.rbt_return rbt374 = null;

        ChemicalChunkerParser.rp_return rp375 = null;

        ChemicalChunkerParser.rbs_return rbs376 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:5: ( rb | rbr | rbt | rp | rbs )
            int alt85=5;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt85=1;
                }
                break;
            case 173:
                {
                alt85=2;
                }
                break;
            case 175:
                {
                alt85=3;
                }
                break;
            case 178:
                {
                alt85=4;
                }
                break;
            case 176:
                {
                alt85=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1527);
                    rb372=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb372.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1529);
                    rbr373=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr373.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1531);
                    rbt374=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt374.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1533);
                    rp375=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp375.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1535);
                    rbs376=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs376.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg377 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere378 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime379 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp380 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN381 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther382 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:5: ( neg )?
            int alt86=2;
            switch ( input.LA(1) ) {
                case 103:
                    {
                    alt86=1;
                    }
                    break;
            }

            switch (alt86) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1548);
                    neg377=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg377.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            int alt87=5;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1552);
                    prepphraseAtmosphere378=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere378.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1554);
                    prepphraseTime379=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime379.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1556);
                    prepphraseTemp380=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp380.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1558);
                    prepphraseIN381=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN381.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:75: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1560);
                    prepphraseOther382=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther382.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv383 = null;

        ChemicalChunkerParser.adj_return adj384 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:2: ( adv | adj )
            int alt88=2;
            switch ( input.LA(1) ) {
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
                {
                alt88=1;
                }
                break;
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt88=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1574);
                    adv383=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv383.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1576);
                    adj384=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj384.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:1: prepphraseOther : ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj385 = null;

        ChemicalChunkerParser.inAll_return inAll386 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase387 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:2: ( ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:4: ( advAdj )* ( inAll )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:4: ( advAdj )*
            loop89:
            do {
                int alt89=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                case 172:
                case 173:
                case 175:
                case 176:
                case 178:
                    {
                    alt89=1;
                    }
                    break;

                }

                switch (alt89) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1585);
            	    advAdj385=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj385.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:12: ( inAll )+
            int cnt90=0;
            loop90:
            do {
                int alt90=2;
                switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt90=1;
                    }
                    break;

                }

                switch (alt90) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther1588);
            	    inAll386=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll386.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt90 >= 1 ) break loop90;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(90, input);
                        throw eee;
                }
                cnt90++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1592);
            nounphrase387=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase387.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inAll
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 123:31: -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:35: ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:57: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof388 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase389 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1619);
            inof388=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof388.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1622);
            nounphrase389=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase389.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 125:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:125:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:1: prepphraseTime : prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure390 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:2: ( prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1644);
            prepPhraseTimeStructure390=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure390.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 128:27: -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:31: ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj391 = null;

        ChemicalChunkerParser.inAll_return inAll392 = null;

        ChemicalChunkerParser.dt_return dt393 = null;

        ChemicalChunkerParser.advAdj_return advAdj394 = null;

        ChemicalChunkerParser.cd_return cd395 = null;

        ChemicalChunkerParser.nntime_return nntime396 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:3: ( advAdj )*
            loop91:
            do {
                int alt91=2;
                alt91 = dfa91.predict(input);
                switch (alt91) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1662);
            	    advAdj391=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj391.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:11: ( inAll )?
            int alt92=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt92=1;
                    }
                    break;
            }

            switch (alt92) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1665);
                    inAll392=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll392.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:19: ( dt )?
            int alt93=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt93=1;
                    }
                    break;
            }

            switch (alt93) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1669);
                    dt393=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt393.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:23: ( advAdj )*
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                case 172:
                case 173:
                case 175:
                case 176:
                case 178:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1672);
            	    advAdj394=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj394.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:31: ( cd )?
            int alt95=2;
            switch ( input.LA(1) ) {
                case 125:
                    {
                    alt95=1;
                    }
                    break;
            }

            switch (alt95) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1675);
                    cd395=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd395.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:35: ( nntime )+
            int cnt96=0;
            loop96:
            do {
                int alt96=2;
                switch ( input.LA(1) ) {
                case 36:
                    {
                    int LA96_2 = input.LA(2);

                    if ( (synpred317_ChemicalChunker()) ) {
                        alt96=1;
                    }


                    }
                    break;

                }

                switch (alt96) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1678);
            	    nntime396=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime396.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt96 >= 1 ) break loop96;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(96, input);
                        throw eee;
                }
                cnt96++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:1: prepphraseIN : inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin397 = null;

        ChemicalChunkerParser.molecule_return molecule398 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:2: ( inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1690);
            inin397=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin397.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1692);
            molecule398=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule398.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 133:17: -> ^( NODE[\"PrepPhrase\"] inin molecule )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:21: ^( NODE[\"PrepPhrase\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent399 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:2: ( prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1716);
            prepphraseAtmosphereContent399=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent399.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 136:32: -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:36: ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder400 = null;

        ChemicalChunkerParser.dt_return dt401 = null;

        ChemicalChunkerParser.advAdj_return advAdj402 = null;

        ChemicalChunkerParser.molecule_return molecule403 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere404 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1736);
            inunder400=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder400.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:12: ( dt )?
            int alt97=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt97=1;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1739);
                    dt401=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt401.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:16: ( advAdj )*
            loop98:
            do {
                int alt98=2;
                alt98 = dfa98.predict(input);
                switch (alt98) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1742);
            	    advAdj402=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj402.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1745);
            molecule403=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule403.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:33: ( nnatmosphere )?
            int alt99=2;
            switch ( input.LA(1) ) {
                case 40:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA99_3 = input.LA(3);

                            if ( (synpred320_ChemicalChunker()) ) {
                                alt99=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt99) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1747);
                    nnatmosphere404=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere404.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in405 = null;

        ChemicalChunkerParser.inafter_return inafter406 = null;

        ChemicalChunkerParser.inas_return inas407 = null;

        ChemicalChunkerParser.inbefore_return inbefore408 = null;

        ChemicalChunkerParser.inby_return inby409 = null;

        ChemicalChunkerParser.infor_return infor410 = null;

        ChemicalChunkerParser.infrom_return infrom411 = null;

        ChemicalChunkerParser.inin_return inin412 = null;

        ChemicalChunkerParser.ininto_return ininto413 = null;

        ChemicalChunkerParser.inof_return inof414 = null;

        ChemicalChunkerParser.inoff_return inoff415 = null;

        ChemicalChunkerParser.inon_return inon416 = null;

        ChemicalChunkerParser.inover_return inover417 = null;

        ChemicalChunkerParser.inunder_return inunder418 = null;

        ChemicalChunkerParser.invia_return invia419 = null;

        ChemicalChunkerParser.inwith_return inwith420 = null;

        ChemicalChunkerParser.inwithout_return inwithout421 = null;

        ChemicalChunkerParser.to_return to422 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt100=18;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt100=1;
                }
                break;
            case 20:
                {
                alt100=2;
                }
                break;
            case 18:
                {
                alt100=3;
                }
                break;
            case 19:
                {
                alt100=4;
                }
                break;
            case 25:
                {
                alt100=5;
                }
                break;
            case 29:
                {
                alt100=6;
                }
                break;
            case 30:
                {
                alt100=7;
                }
                break;
            case 21:
                {
                alt100=8;
                }
                break;
            case 22:
                {
                alt100=9;
                }
                break;
            case 27:
                {
                alt100=10;
                }
                break;
            case 33:
                {
                alt100=11;
                }
                break;
            case 28:
                {
                alt100=12;
                }
                break;
            case 32:
                {
                alt100=13;
                }
                break;
            case 31:
                {
                alt100=14;
                }
                break;
            case 26:
                {
                alt100=15;
                }
                break;
            case 23:
                {
                alt100=16;
                }
                break;
            case 24:
                {
                alt100=17;
                }
                break;
            case 180:
                {
                alt100=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }

            switch (alt100) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1759);
                    in405=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in405.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1761);
                    inafter406=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter406.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1763);
                    inas407=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas407.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1765);
                    inbefore408=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore408.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1767);
                    inby409=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby409.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1769);
                    infor410=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor410.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1771);
                    infrom411=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom411.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1773);
                    inin412=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin412.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1775);
                    ininto413=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto413.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1777);
                    inof414=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof414.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1779);
                    inoff415=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff415.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1781);
                    inon416=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon416.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1783);
                    inover417=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover417.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1785);
                    inunder418=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder418.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1787);
                    invia419=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia419.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1789);
                    inwith420=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith420.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1791);
                    inwithout421=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout421.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1793);
                    to422=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to422.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:1: prepphraseTemp : prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent423 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:15: ( prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1800);
            prepphraseTempContent423=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent423.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:40: -> ^( NODE[\"TempPhrase\"] prepphraseTempContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:44: ^( NODE[\"TempPhrase\"] prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj424 = null;

        ChemicalChunkerParser.inAll_return inAll425 = null;

        ChemicalChunkerParser.dt_return dt426 = null;

        ChemicalChunkerParser.advAdj_return advAdj427 = null;

        ChemicalChunkerParser.cd_return cd428 = null;

        ChemicalChunkerParser.nntemp_return nntemp429 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:5: ( advAdj )?
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1822);
                    advAdj424=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj424.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:13: ( inAll )?
            int alt102=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt102=1;
                    }
                    break;
            }

            switch (alt102) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1825);
                    inAll425=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll425.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:20: ( dt )?
            int alt103=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt103=1;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1828);
                    dt426=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt426.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:24: ( advAdj )?
            int alt104=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                case 172:
                case 173:
                case 175:
                case 176:
                case 178:
                    {
                    alt104=1;
                    }
                    break;
            }

            switch (alt104) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1831);
                    advAdj427=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj427.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:32: ( cd )?
            int alt105=2;
            switch ( input.LA(1) ) {
                case 125:
                    {
                    alt105=1;
                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1834);
                    cd428=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd428.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:36: ( nntemp )+
            int cnt106=0;
            loop106:
            do {
                int alt106=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA106_2 = input.LA(2);

                    if ( (synpred343_ChemicalChunker()) ) {
                        alt106=1;
                    }


                    }
                    break;

                }

                switch (alt106) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1837);
            	    nntemp429=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp429.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:1: amount : ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd430 = null;

        ChemicalChunkerParser.nnamount_return nnamount431 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:8: ( ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:10: ( cd )+ nnamount
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:10: ( cd )+
            int cnt107=0;
            loop107:
            do {
                int alt107=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt107=1;
                    }
                    break;

                }

                switch (alt107) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount1852);
            	    cd430=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd430.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt107 >= 1 ) break loop107;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(107, input);
                        throw eee;
                }
                cnt107++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount1855);
            nnamount431=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount431.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 148:23: -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:26: ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: mass : ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd432 = null;

        ChemicalChunkerParser.nnmass_return nnmass433 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:6: ( ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:8: ( cd )+ nnmass
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:8: ( cd )+
            int cnt108=0;
            loop108:
            do {
                int alt108=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt108=1;
                    }
                    break;

                }

                switch (alt108) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass1877);
            	    cd432=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd432.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt108 >= 1 ) break loop108;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(108, input);
                        throw eee;
                }
                cnt108++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass1880);
            nnmass433=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass433.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:18: -> ^( NODE[\"MASS\"] ( cd )+ nnmass )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:21: ^( NODE[\"MASS\"] ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:1: percent : cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd434 = null;

        ChemicalChunkerParser.nn_return nn435 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent436 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:9: ( cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:11: cd ( nn )? nnpercent
            {
            pushFollow(FOLLOW_cd_in_percent1902);
            cd434=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd434.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:14: ( nn )?
            int alt109=2;
            switch ( input.LA(1) ) {
                case 149:
                    {
                    alt109=1;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent1904);
                    nn435=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn435.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent1907);
            nnpercent436=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent436.getTree());


            // AST REWRITE
            // elements: nnpercent, nn, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:28: -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:31: ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: volume : ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd437 = null;

        ChemicalChunkerParser.nnvol_return nnvol438 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:8: ( ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:10: ( cd )+ nnvol
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:10: ( cd )+
            int cnt110=0;
            loop110:
            do {
                int alt110=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt110=1;
                    }
                    break;

                }

                switch (alt110) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume1931);
            	    cd437=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd437.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt110 >= 1 ) break loop110;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(110, input);
                        throw eee;
                }
                cnt110++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume1934);
            nnvol438=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol438.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:20: -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:23: ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:1: molar : ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd439 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar440 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:7: ( ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:9: ( cd )* nnmolar
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:9: ( cd )*
            loop111:
            do {
                int alt111=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt111=1;
                    }
                    break;

                }

                switch (alt111) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar1956);
            	    cd439=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd439.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar1959);
            nnmolar440=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar440.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:21: -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:24: ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLAR"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:42: ( cd )*
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize441 = null;

        ChemicalChunkerParser.inas_return inas442 = null;

        ChemicalChunkerParser.nnexample_return nnexample443 = null;

        ChemicalChunkerParser.cd_return cd444 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase445 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1983);
            vbsynthesize441=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize441.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1985);
            inas442=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas442.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:22: ( nnexample cd | prepphrase )
            int alt112=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt112=1;
                }
                break;
            case 12:
            case 13:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 36:
            case 44:
            case 103:
            case 125:
            case 130:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
            case 180:
                {
                alt112=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }

            switch (alt112) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1988);
                    nnexample443=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample443.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1990);
                    cd444=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd444.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1993);
                    prepphrase445=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase445.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus446 = null;

        ChemicalChunkerParser.conjunction_return conjunction447 = null;

        ChemicalChunkerParser.apparatus_return apparatus448 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus2006);
            apparatus446=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus446.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:14: ( ( conjunction )* apparatus )*
            loop114:
            do {
                int alt114=2;
                alt114 = dfa114.predict(input);
                switch (alt114) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:15: ( conjunction )* apparatus
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:15: ( conjunction )*
            	    loop113:
            	    do {
            	        int alt113=2;
            	        alt113 = dfa113.predict(input);
            	        switch (alt113) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus2009);
            	    	    conjunction447=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction447.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop113;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus2012);
            	    apparatus448=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus448.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt449 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus450 = null;

        ChemicalChunkerParser.nnApp_return nnApp451 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:4: ( dt )?
            int alt115=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt115=1;
                    }
                    break;
            }

            switch (alt115) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus2024);
                    dt449=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt449.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:8: ( preapparatus )*
            loop116:
            do {
                int alt116=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 35:
                case 38:
                case 43:
                case 48:
                case 54:
                case 59:
                case 101:
                case 109:
                case 125:
                case 143:
                case 144:
                case 145:
                case 146:
                case 149:
                    {
                    alt116=1;
                    }
                    break;

                }

                switch (alt116) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus2027);
            	    preapparatus450=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus450.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:22: ( nnApp )+
            int cnt117=0;
            loop117:
            do {
                int alt117=2;
                switch ( input.LA(1) ) {
                case 69:
                    {
                    int LA117_2 = input.LA(2);

                    if ( (synpred354_ChemicalChunker()) ) {
                        alt117=1;
                    }


                    }
                    break;

                }

                switch (alt117) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus2030);
            	    nnApp451=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp451.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt117 >= 1 ) break loop117;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(117, input);
                        throw eee;
                }
                cnt117++;
            } while (true);



            // AST REWRITE
            // elements: nnApp, dt, preapparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 160:28: -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:31: ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:53: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:57: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus452 = null;

        ChemicalChunkerParser.dash_return dash453 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus454 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:4: ( nnapparatus )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                switch ( input.LA(1) ) {
                case 69:
                    {
                    int LA118_2 = input.LA(2);

                    if ( (synpred355_ChemicalChunker()) ) {
                        alt118=1;
                    }


                    }
                    break;

                }

                switch (alt118) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2059);
            	    nnapparatus452=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus452.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:17: ( dash nnapparatus )*
            loop119:
            do {
                int alt119=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 69:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA119_5 = input.LA(5);

                                if ( (synpred356_ChemicalChunker()) ) {
                                    alt119=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt119) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp2063);
            	    dash453=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash453.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2065);
            	    nnapparatus454=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus454.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity455 = null;

        ChemicalChunkerParser.adj_return adj456 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure457 = null;

        ChemicalChunkerParser.nnadd_return nnadd458 = null;

        ChemicalChunkerParser.molecule_return molecule459 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity460 = null;

        ChemicalChunkerParser.nnstate_return nnstate461 = null;

        ChemicalChunkerParser.nn_return nn462 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt120=0;
            loop120:
            do {
                int alt120=9;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus2079);
            	    quantity455=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity455.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus2081);
            	    adj456=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj456.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus2083);
            	    nnpressure457=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure457.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus2085);
            	    nnadd458=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd458.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus2087);
            	    molecule459=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule459.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus2089);
            	    nnchementity460=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity460.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus2091);
            	    nnstate461=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate461.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus2093);
            	    nn462=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn462.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd463 = null;

        ChemicalChunkerParser.nn_return nn464 = null;

        ChemicalChunkerParser.multiple_return multiple465 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes466 = null;

        ChemicalChunkerParser.dt_return dt467 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:3: ( cd nn )?
            int alt121=2;
            switch ( input.LA(1) ) {
                case 125:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 149:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 125:
                                                    {
                                                    alt121=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt121) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2104);
                    cd463=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd463.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2106);
                    nn464=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn464.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:12: ( multiple | measurementtypes )
            int alt122=2;
            switch ( input.LA(1) ) {
            case 125:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 17:
                        {
                        alt122=1;
                        }
                        break;
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 106:
                    case 125:
                    case 149:
                        {
                        alt122=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt122=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2111);
                    multiple465=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple465.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2113);
                    measurementtypes466=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes466.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:43: ( dt )?
            int alt123=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA123_3 = input.LA(3);

                            if ( (synpred367_ChemicalChunker()) ) {
                                alt123=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt123) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2119);
                    dt467=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt467.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:1: multiple : cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd468 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode469 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes470 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:10: ( cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2127);
            cd468=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd468.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2129);
            cdunicode469=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode469.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:25: ( measurementtypes )?
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2131);
                    measurementtypes470=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes470.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cdunicode, cd, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 168:43: -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:46: ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:80: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar471 = null;

        ChemicalChunkerParser.amount_return amount472 = null;

        ChemicalChunkerParser.mass_return mass473 = null;

        ChemicalChunkerParser.percent_return percent474 = null;

        ChemicalChunkerParser.volume_return volume475 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:2: ( molar | amount | mass | percent | volume )
            int alt125=5;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2159);
                    molar471=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar471.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2161);
                    amount472=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount472.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2163);
                    mass473=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass473.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2165);
                    percent474=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent474.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2167);
                    volume475=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume475.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:1: oscarCompound : ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( reference )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj476 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1477 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2478 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3479 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4480 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm481 = null;

        ChemicalChunkerParser.reference_return reference482 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:15: ( ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( reference )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:18: ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( reference )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:18: ( adj )*
            loop126:
            do {
                int alt126=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                    {
                    alt126=1;
                    }
                    break;

                }

                switch (alt126) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound2179);
            	    adj476=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj476.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt127=5;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:24: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound2183);
                    oscarCompound1477=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1477.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:39: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound2185);
                    oscarCompound2478=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2478.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:54: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound2187);
                    oscarCompound3479=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3479.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:69: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound2189);
                    oscarCompound4480=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4480.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:84: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound2191);
                    oscarcm481=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm481.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:93: ( reference )?
            int alt128=2;
            switch ( input.LA(1) ) {
                case 107:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 125:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 108:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA128_7 = input.LA(7);

                                                            if ( (synpred378_ChemicalChunker()) ) {
                                                                alt128=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: reference
                    {
                    pushFollow(FOLLOW_reference_in_oscarCompound2194);
                    reference482=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference482.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:1: oscarCompound4 : lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb483 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm484 = null;

        ChemicalChunkerParser.rrb_return rrb485 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:16: ( lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound42203);
            lrb483=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb483.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound42206);
            oscarcm484=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm484.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound42208);
            rrb485=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb485.getTree());


            // AST REWRITE
            // elements: oscarcm, rrb, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 175:35: -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:38: ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:1: oscarCompound3 : oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm486 = null;

        ChemicalChunkerParser.dash_return dash487 = null;

        ChemicalChunkerParser.apost_return apost488 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_apost=new RewriteRuleSubtreeStream(adaptor,"rule apost");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:16: ( oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: oscarcm ( dash | apost )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound32232);
            oscarcm486=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm486.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:26: ( dash | apost )+
            int cnt129=0;
            loop129:
            do {
                int alt129=3;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA129_4 = input.LA(3);

                        if ( (synpred379_ChemicalChunker()) ) {
                            alt129=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 102:
                    {
                    alt129=2;
                    }
                    break;

                }

                switch (alt129) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:27: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound32235);
            	    dash487=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash487.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:32: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound32237);
            	    apost488=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apost.add(apost488.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        throw eee;
                }
                cnt129++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, dash, apost
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 176:40: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:43: ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:72: ( dash )*
                while ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:78: ( apost )*
                while ( stream_apost.hasNext() ) {
                    adaptor.addChild(root_1, stream_apost.nextTree());

                }
                stream_apost.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:1: oscarCompound2 : oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm489 = null;

        ChemicalChunkerParser.dash_return dash490 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm491 = null;

        ChemicalChunkerParser.dash_return dash492 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:16: ( oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:18: oscarcm ( dash oscarcm )+ ( dash )?
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound22265);
            oscarcm489=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm489.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:26: ( dash oscarcm )+
            int cnt130=0;
            loop130:
            do {
                int alt130=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 54:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA130_5 = input.LA(5);

                                if ( (synpred381_ChemicalChunker()) ) {
                                    alt130=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt130) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:27: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound22268);
            	    dash490=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash490.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound22270);
            	    oscarcm491=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm491.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt130 >= 1 ) break loop130;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(130, input);
                        throw eee;
                }
                cnt130++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:42: ( dash )?
            int alt131=2;
            switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA131_3 = input.LA(3);

                            if ( (synpred382_ChemicalChunker()) ) {
                                alt131=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt131) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound22274);
                    dash492=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash492.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, oscarcm, dash, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 177:47: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:50: ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()||stream_dash.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext()||stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:96: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:1: oscarCompound1 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm493 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm494 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound12305);
            oscarcm493=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm493.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:26: ( oscarcm )+
            int cnt132=0;
            loop132:
            do {
                int alt132=2;
                switch ( input.LA(1) ) {
                case 54:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA132_3 = input.LA(3);

                        if ( (synpred383_ChemicalChunker()) ) {
                            alt132=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt132) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound12307);
            	    oscarcm494=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm494.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt132 >= 1 ) break loop132;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(132, input);
                        throw eee;
                }
                cnt132++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 178:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity495 = null;

        ChemicalChunkerParser.mixture_return mixture496 = null;

        ChemicalChunkerParser.inof_return inof497 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound498 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:2: ( ( quantity | mixture )+ inof oscarCompound )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:3: ( quantity | mixture )+ inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:3: ( quantity | mixture )+
            int cnt133=0;
            loop133:
            do {
                int alt133=3;
                switch ( input.LA(1) ) {
                case 109:
                    {
                    int LA133_2 = input.LA(2);

                    if ( (synpred384_ChemicalChunker()) ) {
                        alt133=1;
                    }
                    else if ( (synpred385_ChemicalChunker()) ) {
                        alt133=2;
                    }


                    }
                    break;
                case 38:
                case 125:
                    {
                    alt133=1;
                    }
                    break;
                case 101:
                    {
                    alt133=2;
                    }
                    break;

                }

                switch (alt133) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount12332);
            	    quantity495=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity495.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount12334);
            	    mixture496=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture496.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount12338);
            inof497=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof497.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount12340);
            oscarCompound498=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound498.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity499 = null;

        ChemicalChunkerParser.mixture_return mixture500 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound501 = null;

        ChemicalChunkerParser.citation_return citation502 = null;

        ChemicalChunkerParser.quantity_return quantity503 = null;

        ChemicalChunkerParser.mixture_return mixture504 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:3: ( quantity | mixture )*
            loop134:
            do {
                int alt134=3;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22350);
            	    quantity499=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity499.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22352);
            	    mixture500=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture500.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:23: ( oscarCompound )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                alt135 = dfa135.predict(input);
                switch (alt135) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount22356);
            	    oscarCompound501=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound501.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:39: ( citation | quantity | mixture )*
            loop136:
            do {
                int alt136=4;
                alt136 = dfa136.predict(input);
                switch (alt136) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount22361);
            	    citation502=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation502.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22363);
            	    quantity503=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity503.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22365);
            	    mixture504=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture504.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1505 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2506 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:16: ( moleculeamount1 | moleculeamount2 )
            int alt137=2;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount2376);
                    moleculeamount1505=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1505.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount2380);
                    moleculeamount2506=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2506.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount507 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule2401);
            moleculeamount507=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount507.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class oscarcdType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcdType"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:1: oscarcdType : lrb ( oscarcd | cd ) rrb ;
    public final ChemicalChunkerParser.oscarcdType_return oscarcdType() throws RecognitionException {
        ChemicalChunkerParser.oscarcdType_return retval = new ChemicalChunkerParser.oscarcdType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb508 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd509 = null;

        ChemicalChunkerParser.cd_return cd510 = null;

        ChemicalChunkerParser.rrb_return rrb511 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:13: ( lrb ( oscarcd | cd ) rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:16: lrb ( oscarcd | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_oscarcdType2424);
            lrb508=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb508.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:20: ( oscarcd | cd )
            int alt138=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt138=1;
                }
                break;
            case 125:
                {
                alt138=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:21: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_oscarcdType2427);
                    oscarcd509=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd509.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:29: cd
                    {
                    pushFollow(FOLLOW_cd_in_oscarcdType2429);
                    cd510=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd510.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_oscarcdType2432);
            rrb511=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb511.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcdType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity512 = null;

        ChemicalChunkerParser.inof_return inof513 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd514 = null;

        ChemicalChunkerParser.cd_return cd515 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:2: ( quantity inof ( oscarcd | cd ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount12441);
            quantity512=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity512.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount12443);
            inof513=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof513.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:18: ( oscarcd | cd )
            int alt139=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt139=1;
                }
                break;
            case 125:
                {
                alt139=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount12446);
                    oscarcd514=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd514.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount12448);
                    cd515=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd515.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:1: unnamedmoleculeamount2 : ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd516 = null;

        ChemicalChunkerParser.oscarcdType_return oscarcdType517 = null;

        ChemicalChunkerParser.citation_return citation518 = null;

        ChemicalChunkerParser.quantity_return quantity519 = null;

        ChemicalChunkerParser.mixture_return mixture520 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:2: ( ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:3: ( oscarcd | oscarcdType ) ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:3: ( oscarcd | oscarcdType )
            int alt140=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt140=1;
                }
                break;
            case 109:
                {
                alt140=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:4: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount22457);
                    oscarcd516=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd516.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:12: oscarcdType
                    {
                    pushFollow(FOLLOW_oscarcdType_in_unnamedmoleculeamount22459);
                    oscarcdType517=oscarcdType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcdType517.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:25: ( citation | quantity | mixture )*
            loop141:
            do {
                int alt141=4;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:26: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount22463);
            	    citation518=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation518.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:35: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount22465);
            	    quantity519=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity519.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:44: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount22467);
            	    mixture520=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture520.getTree());

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity521 = null;

        ChemicalChunkerParser.inof_return inof522 = null;

        ChemicalChunkerParser.jj_return jj523 = null;

        ChemicalChunkerParser.noun_return noun524 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:2: ( quantity inof ( ( jj )? noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32483);
            quantity521=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity521.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32485);
            inof522=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof522.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:17: ( ( jj )? noun )+
            int cnt143=0;
            loop143:
            do {
                int alt143=2;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:18: ( jj )? noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:18: ( jj )?
            	    int alt142=2;
            	    switch ( input.LA(1) ) {
            	        case 143:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA142_3 = input.LA(3);

            	                    if ( (synpred399_ChemicalChunker()) ) {
            	                        alt142=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt142) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32488);
            	            jj523=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj523.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32491);
            	    noun524=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun524.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: unnamedmoleculeamount4 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity525 = null;

        ChemicalChunkerParser.mixture_return mixture526 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity527 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:2: ( ( quantity | mixture ) nnchementity )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:3: ( quantity | mixture )
            int alt144=2;
            switch ( input.LA(1) ) {
            case 109:
                {
                int LA144_1 = input.LA(2);

                if ( (synpred401_ChemicalChunker()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 125:
                {
                alt144=1;
                }
                break;
            case 101:
                {
                alt144=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount42504);
                    quantity525=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity525.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount42506);
                    mixture526=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture526.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount42509);
            nnchementity527=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity527.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1528 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2529 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3530 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4531 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:2: ( ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            int alt145=4;
            switch ( input.LA(1) ) {
            case 109:
                {
                int LA145_1 = input.LA(2);

                if ( (synpred402_ChemicalChunker()) ) {
                    alt145=1;
                }
                else if ( (synpred403_ChemicalChunker()) ) {
                    alt145=2;
                }
                else if ( (synpred404_ChemicalChunker()) ) {
                    alt145=3;
                }
                else if ( (true) ) {
                    alt145=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 145, 1, input);

                    throw nvae;
                }
                }
                break;
            case 125:
                {
                int LA145_2 = input.LA(2);

                if ( (synpred402_ChemicalChunker()) ) {
                    alt145=1;
                }
                else if ( (synpred404_ChemicalChunker()) ) {
                    alt145=3;
                }
                else if ( (true) ) {
                    alt145=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 145, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA145_3 = input.LA(2);

                if ( (synpred402_ChemicalChunker()) ) {
                    alt145=1;
                }
                else if ( (synpred404_ChemicalChunker()) ) {
                    alt145=3;
                }
                else if ( (true) ) {
                    alt145=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 145, 3, input);

                    throw nvae;
                }
                }
                break;
            case 11:
                {
                alt145=2;
                }
                break;
            case 101:
                {
                alt145=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:4: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2518);
                    unnamedmoleculeamount1528=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1528.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:29: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2522);
                    unnamedmoleculeamount2529=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2529.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:54: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2526);
                    unnamedmoleculeamount3530=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3530.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:77: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2528);
                    unnamedmoleculeamount4531=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4531.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount532 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2542);
            unnamedmoleculeamount532=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount532.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:1: quantity : ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1533 = null;

        ChemicalChunkerParser.quantity2_return quantity2534 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:11: ( ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:14: ( quantity1 | quantity2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:14: ( quantity1 | quantity2 )
            int alt146=2;
            switch ( input.LA(1) ) {
            case 109:
                {
                alt146=1;
                }
                break;
            case 38:
            case 125:
                {
                alt146=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2565);
                    quantity1533=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1533.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2567);
                    quantity2534=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2534.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity2, quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 216:36: -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:41: ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:61: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:72: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb535 = null;

        ChemicalChunkerParser.measurements_return measurements536 = null;

        ChemicalChunkerParser.comma_return comma537 = null;

        ChemicalChunkerParser.measurements_return measurements538 = null;

        ChemicalChunkerParser.comma_return comma539 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase540 = null;

        ChemicalChunkerParser.stop_return stop541 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase542 = null;

        ChemicalChunkerParser.rrb_return rrb543 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12593);
            lrb535=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb535.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12595);
            measurements536=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements536.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:21: ( comma measurements )*
            loop147:
            do {
                int alt147=2;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 125:
                            {
                            alt147=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt147) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12598);
            	    comma537=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma537.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12601);
            	    measurements538=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements538.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:44: ( comma preparationphrase )*
            loop148:
            do {
                int alt148=2;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    alt148=1;
                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12606);
            	    comma539=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma539.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12608);
            	    preparationphrase540=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase540.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:71: ( stop preparationphrase )*
            loop149:
            do {
                int alt149=2;
                switch ( input.LA(1) ) {
                case 105:
                    {
                    alt149=1;
                    }
                    break;

                }

                switch (alt149) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12613);
            	    stop541=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop541.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12615);
            	    preparationphrase542=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase542.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12620);
            rrb543=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb543.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements544 = null;

        ChemicalChunkerParser.comma_return comma545 = null;

        ChemicalChunkerParser.measurements_return measurements546 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22632);
            measurements544=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements544.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:18: ( comma measurements )*
            loop150:
            do {
                int alt150=2;
                alt150 = dfa150.predict(input);
                switch (alt150) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22635);
            	    comma545=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma545.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22638);
            	    measurements546=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements546.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral547 = null;

        ChemicalChunkerParser.nn_return nn548 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod549 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd550 = null;

        ChemicalChunkerParser.cd_return cd551 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:5: ( nngeneral | nn )?
            int alt151=3;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt151=1;
                    }
                    break;
                case 149:
                    {
                    alt151=2;
                    }
                    break;
            }

            switch (alt151) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2653);
                    nngeneral547=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral547.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2655);
                    nn548=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn548.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2659);
            nnmethod549=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod549.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:30: ( oscarcd | cd )?
            int alt152=3;
            switch ( input.LA(1) ) {
                case 11:
                    {
                    alt152=1;
                    }
                    break;
                case 125:
                    {
                    alt152=2;
                    }
                    break;
            }

            switch (alt152) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2662);
                    oscarcd550=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd550.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2664);
                    cd551=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd551.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb552 = null;

        ChemicalChunkerParser.rrb_return rrb553 = null;

        ChemicalChunkerParser.lsqb_return lsqb554 = null;

        ChemicalChunkerParser.rsqb_return rsqb555 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt153=0;
            loop153:
            do {
                int alt153=5;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2686);
            	    lrb552=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb552.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2688);
            	    rrb553=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb553.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2690);
            	    lsqb554=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb554.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2692);
            	    rsqb555=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb555.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal556=null;
        Token TOKEN557=null;

        Object string_literal556_tree=null;
        Object TOKEN557_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:8: ( 'OSCAR-CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal556=(Token)match(input,11,FOLLOW_11_in_oscarcd2705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = (Object)adaptor.create(string_literal556);
            adaptor.addChild(root_0, string_literal556_tree);
            }
            TOKEN557=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd2707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN557_tree = (Object)adaptor.create(TOKEN557);
            adaptor.addChild(root_0, TOKEN557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal558=null;
        Token TOKEN559=null;

        Object string_literal558_tree=null;
        Object TOKEN559_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:8: ( 'OSCAR-CJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal558=(Token)match(input,12,FOLLOW_12_in_oscarcj2712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = (Object)adaptor.create(string_literal558);
            adaptor.addChild(root_0, string_literal558_tree);
            }
            TOKEN559=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN559_tree = (Object)adaptor.create(TOKEN559);
            adaptor.addChild(root_0, TOKEN559_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal560=null;
        Token TOKEN561=null;

        Object string_literal560_tree=null;
        Object TOKEN561_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:8: ( 'OSCAR-RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal560=(Token)match(input,13,FOLLOW_13_in_oscarrn2719); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal560_tree = (Object)adaptor.create(string_literal560);
            adaptor.addChild(root_0, string_literal560_tree);
            }
            TOKEN561=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN561_tree = (Object)adaptor.create(TOKEN561);
            adaptor.addChild(root_0, TOKEN561_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal562=null;
        Token TOKEN563=null;

        Object string_literal562_tree=null;
        Object TOKEN563_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:9: ( 'OSCAR-CPR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal562=(Token)match(input,14,FOLLOW_14_in_oscarcpr2726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = (Object)adaptor.create(string_literal562);
            adaptor.addChild(root_0, string_literal562_tree);
            }
            TOKEN563=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr2728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN563_tree = (Object)adaptor.create(TOKEN563);
            adaptor.addChild(root_0, TOKEN563_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal564=null;
        Token TOKEN565=null;

        Object string_literal564_tree=null;
        Object TOKEN565_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:9: ( 'OSCAR-ONT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal564=(Token)match(input,15,FOLLOW_15_in_oscaront2734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (Object)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            TOKEN565=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN565_tree = (Object)adaptor.create(TOKEN565);
            adaptor.addChild(root_0, TOKEN565_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal566=null;
        Token TOKEN567=null;

        Object string_literal566_tree=null;
        Object TOKEN567_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:10: ( 'TM-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal566=(Token)match(input,16,FOLLOW_16_in_tmunicode2741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal566_tree = (Object)adaptor.create(string_literal566);
            adaptor.addChild(root_0, string_literal566_tree);
            }
            TOKEN567=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN567_tree = (Object)adaptor.create(TOKEN567);
            adaptor.addChild(root_0, TOKEN567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal568=null;
        Token TOKEN569=null;

        Object string_literal568_tree=null;
        Object TOKEN569_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:10: ( 'CD-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal568=(Token)match(input,17,FOLLOW_17_in_cdunicode2748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = (Object)adaptor.create(string_literal568);
            adaptor.addChild(root_0, string_literal568_tree);
            }
            TOKEN569=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2750); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN569_tree = (Object)adaptor.create(TOKEN569);
            adaptor.addChild(root_0, TOKEN569_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal570=null;
        Token TOKEN571=null;

        Object string_literal570_tree=null;
        Object TOKEN571_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:5: ( 'IN-AS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal570=(Token)match(input,18,FOLLOW_18_in_inas2757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal570_tree = (Object)adaptor.create(string_literal570);
            adaptor.addChild(root_0, string_literal570_tree);
            }
            TOKEN571=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas2759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN571_tree = (Object)adaptor.create(TOKEN571);
            adaptor.addChild(root_0, TOKEN571_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal572=null;
        Token TOKEN573=null;

        Object string_literal572_tree=null;
        Object TOKEN573_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:9: ( 'IN-BEFORE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal572=(Token)match(input,19,FOLLOW_19_in_inbefore2764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal572_tree = (Object)adaptor.create(string_literal572);
            adaptor.addChild(root_0, string_literal572_tree);
            }
            TOKEN573=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore2766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN573_tree = (Object)adaptor.create(TOKEN573);
            adaptor.addChild(root_0, TOKEN573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal574=null;
        Token TOKEN575=null;

        Object string_literal574_tree=null;
        Object TOKEN575_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:8: ( 'IN-AFTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal574=(Token)match(input,20,FOLLOW_20_in_inafter2771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (Object)adaptor.create(string_literal574);
            adaptor.addChild(root_0, string_literal574_tree);
            }
            TOKEN575=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter2773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN575_tree = (Object)adaptor.create(TOKEN575);
            adaptor.addChild(root_0, TOKEN575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal576=null;
        Token TOKEN577=null;

        Object string_literal576_tree=null;
        Object TOKEN577_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:5: ( 'IN-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal576=(Token)match(input,21,FOLLOW_21_in_inin2778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal576_tree = (Object)adaptor.create(string_literal576);
            adaptor.addChild(root_0, string_literal576_tree);
            }
            TOKEN577=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin2780); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN577_tree = (Object)adaptor.create(TOKEN577);
            adaptor.addChild(root_0, TOKEN577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal578=null;
        Token TOKEN579=null;

        Object string_literal578_tree=null;
        Object TOKEN579_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:7: ( 'IN-INTO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal578=(Token)match(input,22,FOLLOW_22_in_ininto2785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (Object)adaptor.create(string_literal578);
            adaptor.addChild(root_0, string_literal578_tree);
            }
            TOKEN579=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto2787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN579_tree = (Object)adaptor.create(TOKEN579);
            adaptor.addChild(root_0, TOKEN579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal580=null;
        Token TOKEN581=null;

        Object string_literal580_tree=null;
        Object TOKEN581_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:7: ( 'IN-WITH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal580=(Token)match(input,23,FOLLOW_23_in_inwith2792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            TOKEN581=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith2794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN581_tree = (Object)adaptor.create(TOKEN581);
            adaptor.addChild(root_0, TOKEN581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal582=null;
        Token TOKEN583=null;

        Object string_literal582_tree=null;
        Object TOKEN583_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:10: ( 'IN-WITHOUT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal582=(Token)match(input,24,FOLLOW_24_in_inwithout2799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal582_tree = (Object)adaptor.create(string_literal582);
            adaptor.addChild(root_0, string_literal582_tree);
            }
            TOKEN583=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout2801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN583_tree = (Object)adaptor.create(TOKEN583);
            adaptor.addChild(root_0, TOKEN583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal584=null;
        Token TOKEN585=null;

        Object string_literal584_tree=null;
        Object TOKEN585_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:5: ( 'IN-BY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal584=(Token)match(input,25,FOLLOW_25_in_inby2806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (Object)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            TOKEN585=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby2808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN585_tree = (Object)adaptor.create(TOKEN585);
            adaptor.addChild(root_0, TOKEN585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal586=null;
        Token TOKEN587=null;

        Object string_literal586_tree=null;
        Object TOKEN587_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:6: ( 'IN-VIA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal586=(Token)match(input,26,FOLLOW_26_in_invia2813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = (Object)adaptor.create(string_literal586);
            adaptor.addChild(root_0, string_literal586_tree);
            }
            TOKEN587=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia2815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN587_tree = (Object)adaptor.create(TOKEN587);
            adaptor.addChild(root_0, TOKEN587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal588=null;
        Token TOKEN589=null;

        Object string_literal588_tree=null;
        Object TOKEN589_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:5: ( 'IN-OF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal588=(Token)match(input,27,FOLLOW_27_in_inof2820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal588_tree = (Object)adaptor.create(string_literal588);
            adaptor.addChild(root_0, string_literal588_tree);
            }
            TOKEN589=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof2822); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN589_tree = (Object)adaptor.create(TOKEN589);
            adaptor.addChild(root_0, TOKEN589_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal590=null;
        Token TOKEN591=null;

        Object string_literal590_tree=null;
        Object TOKEN591_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:5: ( 'IN-ON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal590=(Token)match(input,28,FOLLOW_28_in_inon2827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = (Object)adaptor.create(string_literal590);
            adaptor.addChild(root_0, string_literal590_tree);
            }
            TOKEN591=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon2829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN591_tree = (Object)adaptor.create(TOKEN591);
            adaptor.addChild(root_0, TOKEN591_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal592=null;
        Token TOKEN593=null;

        Object string_literal592_tree=null;
        Object TOKEN593_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:6: ( 'IN-FOR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal592=(Token)match(input,29,FOLLOW_29_in_infor2834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            TOKEN593=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor2836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN593_tree = (Object)adaptor.create(TOKEN593);
            adaptor.addChild(root_0, TOKEN593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal594=null;
        Token TOKEN595=null;

        Object string_literal594_tree=null;
        Object TOKEN595_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:7: ( 'IN-FROM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal594=(Token)match(input,30,FOLLOW_30_in_infrom2841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal594_tree = (Object)adaptor.create(string_literal594);
            adaptor.addChild(root_0, string_literal594_tree);
            }
            TOKEN595=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom2843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN595_tree = (Object)adaptor.create(TOKEN595);
            adaptor.addChild(root_0, TOKEN595_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal596=null;
        Token TOKEN597=null;

        Object string_literal596_tree=null;
        Object TOKEN597_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:8: ( 'IN-UNDER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal596=(Token)match(input,31,FOLLOW_31_in_inunder2848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal596_tree = (Object)adaptor.create(string_literal596);
            adaptor.addChild(root_0, string_literal596_tree);
            }
            TOKEN597=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder2850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN597_tree = (Object)adaptor.create(TOKEN597);
            adaptor.addChild(root_0, TOKEN597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal598=null;
        Token TOKEN599=null;

        Object string_literal598_tree=null;
        Object TOKEN599_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:7: ( 'IN-OVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal598=(Token)match(input,32,FOLLOW_32_in_inover2855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal598_tree = (Object)adaptor.create(string_literal598);
            adaptor.addChild(root_0, string_literal598_tree);
            }
            TOKEN599=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover2857); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN599_tree = (Object)adaptor.create(TOKEN599);
            adaptor.addChild(root_0, TOKEN599_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal600=null;
        Token TOKEN601=null;

        Object string_literal600_tree=null;
        Object TOKEN601_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:6: ( 'IN-OFF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal600=(Token)match(input,33,FOLLOW_33_in_inoff2862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            TOKEN601=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff2864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN601_tree = (Object)adaptor.create(TOKEN601);
            adaptor.addChild(root_0, TOKEN601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: nnexample : 'NN-EXAMPLE' TOKEN ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal602=null;
        Token TOKEN603=null;

        Object string_literal602_tree=null;
        Object TOKEN603_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:10: ( 'NN-EXAMPLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:11: 'NN-EXAMPLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal602=(Token)match(input,34,FOLLOW_34_in_nnexample2871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal602_tree = (Object)adaptor.create(string_literal602);
            adaptor.addChild(root_0, string_literal602_tree);
            }
            TOKEN603=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample2873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN603_tree = (Object)adaptor.create(TOKEN603);
            adaptor.addChild(root_0, TOKEN603_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal604=null;
        Token TOKEN605=null;

        Object string_literal604_tree=null;
        Object TOKEN605_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:8: ( 'NN-STATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal604=(Token)match(input,35,FOLLOW_35_in_nnstate2878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal604_tree = (Object)adaptor.create(string_literal604);
            adaptor.addChild(root_0, string_literal604_tree);
            }
            TOKEN605=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate2880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN605_tree = (Object)adaptor.create(TOKEN605);
            adaptor.addChild(root_0, TOKEN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal606=null;
        Token TOKEN607=null;

        Object string_literal606_tree=null;
        Object TOKEN607_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:7: ( 'NN-TIME' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal606=(Token)match(input,36,FOLLOW_36_in_nntime2885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            TOKEN607=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime2887); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN607_tree = (Object)adaptor.create(TOKEN607);
            adaptor.addChild(root_0, TOKEN607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal608=null;
        Token TOKEN609=null;

        Object string_literal608_tree=null;
        Object TOKEN609_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:7: ( 'NN-MASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal608=(Token)match(input,37,FOLLOW_37_in_nnmass2892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (Object)adaptor.create(string_literal608);
            adaptor.addChild(root_0, string_literal608_tree);
            }
            TOKEN609=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass2894); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN609_tree = (Object)adaptor.create(TOKEN609);
            adaptor.addChild(root_0, TOKEN609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:1: nnmolar : 'NN-MOLAR' TOKEN ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal610=null;
        Token TOKEN611=null;

        Object string_literal610_tree=null;
        Object TOKEN611_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:8: ( 'NN-MOLAR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:10: 'NN-MOLAR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal610=(Token)match(input,38,FOLLOW_38_in_nnmolar2900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            TOKEN611=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar2903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN611_tree = (Object)adaptor.create(TOKEN611);
            adaptor.addChild(root_0, TOKEN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal612=null;
        Token TOKEN613=null;

        Object string_literal612_tree=null;
        Object TOKEN613_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:9: ( 'NN-AMOUNT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal612=(Token)match(input,39,FOLLOW_39_in_nnamount2908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = (Object)adaptor.create(string_literal612);
            adaptor.addChild(root_0, string_literal612_tree);
            }
            TOKEN613=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount2910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN613_tree = (Object)adaptor.create(TOKEN613);
            adaptor.addChild(root_0, TOKEN613_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal614=null;
        Token TOKEN615=null;

        Object string_literal614_tree=null;
        Object TOKEN615_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:13: ( 'NN-ATMOSPHERE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal614=(Token)match(input,40,FOLLOW_40_in_nnatmosphere2915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal614_tree = (Object)adaptor.create(string_literal614);
            adaptor.addChild(root_0, string_literal614_tree);
            }
            TOKEN615=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere2917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN615_tree = (Object)adaptor.create(TOKEN615);
            adaptor.addChild(root_0, TOKEN615_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal616=null;
        Token TOKEN617=null;

        Object string_literal616_tree=null;
        Object TOKEN617_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:5: ( 'NN-EQ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal616=(Token)match(input,41,FOLLOW_41_in_nneq2922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal616_tree = (Object)adaptor.create(string_literal616);
            adaptor.addChild(root_0, string_literal616_tree);
            }
            TOKEN617=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq2924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN617_tree = (Object)adaptor.create(TOKEN617);
            adaptor.addChild(root_0, TOKEN617_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal618=null;
        Token TOKEN619=null;

        Object string_literal618_tree=null;
        Object TOKEN619_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:6: ( 'NN-VOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal618=(Token)match(input,42,FOLLOW_42_in_nnvol2929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal618_tree = (Object)adaptor.create(string_literal618);
            adaptor.addChild(root_0, string_literal618_tree);
            }
            TOKEN619=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol2931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN619_tree = (Object)adaptor.create(TOKEN619);
            adaptor.addChild(root_0, TOKEN619_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal620=null;
        Token TOKEN621=null;

        Object string_literal620_tree=null;
        Object TOKEN621_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:13: ( 'NN-CHEMENTITY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal620=(Token)match(input,43,FOLLOW_43_in_nnchementity2936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal620_tree = (Object)adaptor.create(string_literal620);
            adaptor.addChild(root_0, string_literal620_tree);
            }
            TOKEN621=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity2938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN621_tree = (Object)adaptor.create(TOKEN621);
            adaptor.addChild(root_0, TOKEN621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal622=null;
        Token TOKEN623=null;

        Object string_literal622_tree=null;
        Object TOKEN623_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:7: ( 'NN-TEMP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal622=(Token)match(input,44,FOLLOW_44_in_nntemp2943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal622_tree = (Object)adaptor.create(string_literal622);
            adaptor.addChild(root_0, string_literal622_tree);
            }
            TOKEN623=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp2945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN623_tree = (Object)adaptor.create(TOKEN623);
            adaptor.addChild(root_0, TOKEN623_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal624=null;
        Token TOKEN625=null;

        Object string_literal624_tree=null;
        Object TOKEN625_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:8: ( 'NN-FLASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal624=(Token)match(input,45,FOLLOW_45_in_nnflash2950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal624_tree = (Object)adaptor.create(string_literal624);
            adaptor.addChild(root_0, string_literal624_tree);
            }
            TOKEN625=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash2952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN625_tree = (Object)adaptor.create(TOKEN625);
            adaptor.addChild(root_0, TOKEN625_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:10: ( 'NN-GENERAL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal626=(Token)match(input,46,FOLLOW_46_in_nngeneral2957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal626_tree = (Object)adaptor.create(string_literal626);
            adaptor.addChild(root_0, string_literal626_tree);
            }
            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral2959); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN627_tree = (Object)adaptor.create(TOKEN627);
            adaptor.addChild(root_0, TOKEN627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:9: ( 'NN-METHOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal628=(Token)match(input,47,FOLLOW_47_in_nnmethod2964); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal628_tree = (Object)adaptor.create(string_literal628);
            adaptor.addChild(root_0, string_literal628_tree);
            }
            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod2966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN629_tree = (Object)adaptor.create(TOKEN629);
            adaptor.addChild(root_0, TOKEN629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:11: ( 'NN-PRESSURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal630=(Token)match(input,48,FOLLOW_48_in_nnpressure2972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = (Object)adaptor.create(string_literal630);
            adaptor.addChild(root_0, string_literal630_tree);
            }
            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure2974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN631_tree = (Object)adaptor.create(TOKEN631);
            adaptor.addChild(root_0, TOKEN631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:9: ( 'NN-COLUMN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal632=(Token)match(input,49,FOLLOW_49_in_nncolumn2979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal632_tree = (Object)adaptor.create(string_literal632);
            adaptor.addChild(root_0, string_literal632_tree);
            }
            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn2981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN633_tree = (Object)adaptor.create(TOKEN633);
            adaptor.addChild(root_0, TOKEN633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal634=(Token)match(input,50,FOLLOW_50_in_nnchromatography2986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal634_tree = (Object)adaptor.create(string_literal634);
            adaptor.addChild(root_0, string_literal634_tree);
            }
            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography2988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN635_tree = (Object)adaptor.create(TOKEN635);
            adaptor.addChild(root_0, TOKEN635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:9: ( 'NN-VACUUM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal636=(Token)match(input,51,FOLLOW_51_in_nnvacuum2993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal636_tree = (Object)adaptor.create(string_literal636);
            adaptor.addChild(root_0, string_literal636_tree);
            }
            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum2995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN637_tree = (Object)adaptor.create(TOKEN637);
            adaptor.addChild(root_0, TOKEN637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:8: ( 'NN-CYCLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal638=(Token)match(input,52,FOLLOW_52_in_nncycle3000); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal638_tree = (Object)adaptor.create(string_literal638);
            adaptor.addChild(root_0, string_literal638_tree);
            }
            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN639_tree = (Object)adaptor.create(TOKEN639);
            adaptor.addChild(root_0, TOKEN639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:8: ( 'NN-TIMES' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal640=(Token)match(input,53,FOLLOW_53_in_nntimes3007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = (Object)adaptor.create(string_literal640);
            adaptor.addChild(root_0, string_literal640_tree);
            }
            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN641_tree = (Object)adaptor.create(TOKEN641);
            adaptor.addChild(root_0, TOKEN641_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:8: ( 'OSCAR-CM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal642=(Token)match(input,54,FOLLOW_54_in_oscarcm3016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal642_tree = (Object)adaptor.create(string_literal642);
            adaptor.addChild(root_0, string_literal642_tree);
            }
            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN643_tree = (Object)adaptor.create(TOKEN643);
            adaptor.addChild(root_0, TOKEN643_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:6: ( 'VB-USE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal644=(Token)match(input,55,FOLLOW_55_in_vbuse3025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal644_tree = (Object)adaptor.create(string_literal644);
            adaptor.addChild(root_0, string_literal644_tree);
            }
            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN645_tree = (Object)adaptor.create(TOKEN645);
            adaptor.addChild(root_0, TOKEN645_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:9: ( 'VB-CHANGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal646=(Token)match(input,56,FOLLOW_56_in_vbchange3032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal646_tree = (Object)adaptor.create(string_literal646);
            adaptor.addChild(root_0, string_literal646_tree);
            }
            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3034); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN647_tree = (Object)adaptor.create(TOKEN647);
            adaptor.addChild(root_0, TOKEN647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:11: ( 'VB-SUBMERGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal648=(Token)match(input,57,FOLLOW_57_in_vbsubmerge3039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal648_tree = (Object)adaptor.create(string_literal648);
            adaptor.addChild(root_0, string_literal648_tree);
            }
            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN649_tree = (Object)adaptor.create(TOKEN649);
            adaptor.addChild(root_0, TOKEN649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:10: ( 'VB-SUBJECT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal650=(Token)match(input,58,FOLLOW_58_in_vbsubject3046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal650_tree = (Object)adaptor.create(string_literal650);
            adaptor.addChild(root_0, string_literal650_tree);
            }
            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN651_tree = (Object)adaptor.create(TOKEN651);
            adaptor.addChild(root_0, TOKEN651_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:6: ( 'NN-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal652=(Token)match(input,59,FOLLOW_59_in_nnadd3055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal652_tree = (Object)adaptor.create(string_literal652);
            adaptor.addChild(root_0, string_literal652_tree);
            }
            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN653_tree = (Object)adaptor.create(TOKEN653);
            adaptor.addChild(root_0, TOKEN653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:10: ( 'NN-MIXTURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal654=(Token)match(input,60,FOLLOW_60_in_nnmixture3062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal654_tree = (Object)adaptor.create(string_literal654);
            adaptor.addChild(root_0, string_literal654_tree);
            }
            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN655_tree = (Object)adaptor.create(TOKEN655);
            adaptor.addChild(root_0, TOKEN655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:6: ( 'VB-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal656=(Token)match(input,61,FOLLOW_61_in_vbadd3069); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal656_tree = (Object)adaptor.create(string_literal656);
            adaptor.addChild(root_0, string_literal656_tree);
            }
            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN657_tree = (Object)adaptor.create(TOKEN657);
            adaptor.addChild(root_0, TOKEN657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:9: ( 'VB-CHARGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal658=(Token)match(input,62,FOLLOW_62_in_vbcharge3076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal658_tree = (Object)adaptor.create(string_literal658);
            adaptor.addChild(root_0, string_literal658_tree);
            }
            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN659_tree = (Object)adaptor.create(TOKEN659);
            adaptor.addChild(root_0, TOKEN659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:10: ( 'VB-CONTAIN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal660=(Token)match(input,63,FOLLOW_63_in_vbcontain3083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal660_tree = (Object)adaptor.create(string_literal660);
            adaptor.addChild(root_0, string_literal660_tree);
            }
            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN661_tree = (Object)adaptor.create(TOKEN661);
            adaptor.addChild(root_0, TOKEN661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:297:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:297:7: ( 'VB-DROP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:297:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal662=(Token)match(input,64,FOLLOW_64_in_vbdrop3090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = (Object)adaptor.create(string_literal662);
            adaptor.addChild(root_0, string_literal662_tree);
            }
            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN663_tree = (Object)adaptor.create(TOKEN663);
            adaptor.addChild(root_0, TOKEN663_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:7: ( 'VB-FILL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal664=(Token)match(input,65,FOLLOW_65_in_vbfill3097); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal664_tree = (Object)adaptor.create(string_literal664);
            adaptor.addChild(root_0, string_literal664_tree);
            }
            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN665_tree = (Object)adaptor.create(TOKEN665);
            adaptor.addChild(root_0, TOKEN665_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:10: ( 'VB-SUSPEND' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal666=(Token)match(input,66,FOLLOW_66_in_vbsuspend3104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal666_tree = (Object)adaptor.create(string_literal666);
            adaptor.addChild(root_0, string_literal666_tree);
            }
            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN667_tree = (Object)adaptor.create(TOKEN667);
            adaptor.addChild(root_0, TOKEN667_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:300:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:300:8: ( 'VB-TREAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:300:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal668=(Token)match(input,67,FOLLOW_67_in_vbtreat3111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal668_tree = (Object)adaptor.create(string_literal668);
            adaptor.addChild(root_0, string_literal668_tree);
            }
            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN669_tree = (Object)adaptor.create(TOKEN669);
            adaptor.addChild(root_0, TOKEN669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:12: ( 'VB-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal670=(Token)match(input,68,FOLLOW_68_in_vbapparatus3120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal670_tree = (Object)adaptor.create(string_literal670);
            adaptor.addChild(root_0, string_literal670_tree);
            }
            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN671_tree = (Object)adaptor.create(TOKEN671);
            adaptor.addChild(root_0, TOKEN671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:12: ( 'NN-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal672=(Token)match(input,69,FOLLOW_69_in_nnapparatus3127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal672_tree = (Object)adaptor.create(string_literal672);
            adaptor.addChild(root_0, string_literal672_tree);
            }
            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN673_tree = (Object)adaptor.create(TOKEN673);
            adaptor.addChild(root_0, TOKEN673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:14: ( 'VB-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal674=(Token)match(input,70,FOLLOW_70_in_vbconcentrate3136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal674_tree = (Object)adaptor.create(string_literal674);
            adaptor.addChild(root_0, string_literal674_tree);
            }
            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate3138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN675_tree = (Object)adaptor.create(TOKEN675);
            adaptor.addChild(root_0, TOKEN675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:14: ( 'NN-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal676=(Token)match(input,71,FOLLOW_71_in_nnconcentrate3143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal676_tree = (Object)adaptor.create(string_literal676);
            adaptor.addChild(root_0, string_literal676_tree);
            }
            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate3145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN677_tree = (Object)adaptor.create(TOKEN677);
            adaptor.addChild(root_0, TOKEN677_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:7: ( 'VB-COOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:311:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal678=(Token)match(input,72,FOLLOW_72_in_vbcool3152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal678_tree = (Object)adaptor.create(string_literal678);
            adaptor.addChild(root_0, string_literal678_tree);
            }
            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool3154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN679_tree = (Object)adaptor.create(TOKEN679);
            adaptor.addChild(root_0, TOKEN679_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:9: ( 'VB-DEGASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal680=(Token)match(input,73,FOLLOW_73_in_vbdegass3161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal680_tree = (Object)adaptor.create(string_literal680);
            adaptor.addChild(root_0, string_literal680_tree);
            }
            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass3163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN681_tree = (Object)adaptor.create(TOKEN681);
            adaptor.addChild(root_0, TOKEN681_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:11: ( 'VB-DISSOLVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal682=(Token)match(input,74,FOLLOW_74_in_vbdissolve3170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal682_tree = (Object)adaptor.create(string_literal682);
            adaptor.addChild(root_0, string_literal682_tree);
            }
            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve3172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN683_tree = (Object)adaptor.create(TOKEN683);
            adaptor.addChild(root_0, TOKEN683_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:6: ( 'VB-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal684=(Token)match(input,75,FOLLOW_75_in_vbdry3179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal684_tree = (Object)adaptor.create(string_literal684);
            adaptor.addChild(root_0, string_literal684_tree);
            }
            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry3181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN685_tree = (Object)adaptor.create(TOKEN685);
            adaptor.addChild(root_0, TOKEN685_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:321:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:321:6: ( 'NN-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:321:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal686=(Token)match(input,76,FOLLOW_76_in_nndry3186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal686_tree = (Object)adaptor.create(string_literal686);
            adaptor.addChild(root_0, string_literal686_tree);
            }
            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry3188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN687_tree = (Object)adaptor.create(TOKEN687);
            adaptor.addChild(root_0, TOKEN687_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:324:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:324:10: ( 'VB-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:324:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal688=(Token)match(input,77,FOLLOW_77_in_vbextract3195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal688_tree = (Object)adaptor.create(string_literal688);
            adaptor.addChild(root_0, string_literal688_tree);
            }
            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract3197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN689_tree = (Object)adaptor.create(TOKEN689);
            adaptor.addChild(root_0, TOKEN689_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:10: ( 'NN-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal690=(Token)match(input,78,FOLLOW_78_in_nnextract3202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal690_tree = (Object)adaptor.create(string_literal690);
            adaptor.addChild(root_0, string_literal690_tree);
            }
            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract3204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN691_tree = (Object)adaptor.create(TOKEN691);
            adaptor.addChild(root_0, TOKEN691_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:9: ( 'VB-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal692=(Token)match(input,79,FOLLOW_79_in_vbfilter3211); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal692_tree = (Object)adaptor.create(string_literal692);
            adaptor.addChild(root_0, string_literal692_tree);
            }
            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter3213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN693_tree = (Object)adaptor.create(TOKEN693);
            adaptor.addChild(root_0, TOKEN693_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:9: ( 'NN-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal694=(Token)match(input,80,FOLLOW_80_in_nnfilter3218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal694_tree = (Object)adaptor.create(string_literal694);
            adaptor.addChild(root_0, string_literal694_tree);
            }
            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter3220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN695_tree = (Object)adaptor.create(TOKEN695);
            adaptor.addChild(root_0, TOKEN695_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:7: ( 'VB-HEAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal696=(Token)match(input,81,FOLLOW_81_in_vbheat3227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal696_tree = (Object)adaptor.create(string_literal696);
            adaptor.addChild(root_0, string_literal696_tree);
            }
            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat3229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN697_tree = (Object)adaptor.create(TOKEN697);
            adaptor.addChild(root_0, TOKEN697_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:333:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:333:11: ( 'VB-INCREASE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:333:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal698=(Token)match(input,82,FOLLOW_82_in_vbincrease3234); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal698_tree = (Object)adaptor.create(string_literal698);
            adaptor.addChild(root_0, string_literal698_tree);
            }
            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease3236); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN699_tree = (Object)adaptor.create(TOKEN699);
            adaptor.addChild(root_0, TOKEN699_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:336:1: vbimmerse : 'VB-IMMERSE' TOKEN ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:2: ( 'VB-IMMERSE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:4: 'VB-IMMERSE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal700=(Token)match(input,83,FOLLOW_83_in_vbimmerse3246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal700_tree = (Object)adaptor.create(string_literal700);
            adaptor.addChild(root_0, string_literal700_tree);
            }
            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse3249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN701_tree = (Object)adaptor.create(TOKEN701);
            adaptor.addChild(root_0, TOKEN701_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:12: ( 'VB-PARTITION' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal702=(Token)match(input,84,FOLLOW_84_in_vbpartition3255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal702_tree = (Object)adaptor.create(string_literal702);
            adaptor.addChild(root_0, string_literal702_tree);
            }
            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition3257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN703_tree = (Object)adaptor.create(TOKEN703);
            adaptor.addChild(root_0, TOKEN703_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:14: ( 'VB-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal704=(Token)match(input,85,FOLLOW_85_in_vbprecipitate3264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal704_tree = (Object)adaptor.create(string_literal704);
            adaptor.addChild(root_0, string_literal704_tree);
            }
            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate3266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN705_tree = (Object)adaptor.create(TOKEN705);
            adaptor.addChild(root_0, TOKEN705_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:14: ( 'NN-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal706=(Token)match(input,86,FOLLOW_86_in_nnprecipitate3271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal706_tree = (Object)adaptor.create(string_literal706);
            adaptor.addChild(root_0, string_literal706_tree);
            }
            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate3273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN707_tree = (Object)adaptor.create(TOKEN707);
            adaptor.addChild(root_0, TOKEN707_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:9: ( 'VB-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal708=(Token)match(input,87,FOLLOW_87_in_vbpurify3280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal708_tree = (Object)adaptor.create(string_literal708);
            adaptor.addChild(root_0, string_literal708_tree);
            }
            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify3282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN709_tree = (Object)adaptor.create(TOKEN709);
            adaptor.addChild(root_0, TOKEN709_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:9: ( 'NN-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal710=(Token)match(input,88,FOLLOW_88_in_nnpurify3287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal710_tree = (Object)adaptor.create(string_literal710);
            adaptor.addChild(root_0, string_literal710_tree);
            }
            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify3289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN711_tree = (Object)adaptor.create(TOKEN711);
            adaptor.addChild(root_0, TOKEN711_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:9: ( 'VB-QUENCH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:350:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal712=(Token)match(input,89,FOLLOW_89_in_vbquench3296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal712_tree = (Object)adaptor.create(string_literal712);
            adaptor.addChild(root_0, string_literal712_tree);
            }
            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench3298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN713_tree = (Object)adaptor.create(TOKEN713);
            adaptor.addChild(root_0, TOKEN713_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:10: ( 'VB-RECOVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:353:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal714=(Token)match(input,90,FOLLOW_90_in_vbrecover3305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal714_tree = (Object)adaptor.create(string_literal714);
            adaptor.addChild(root_0, string_literal714_tree);
            }
            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover3307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN715_tree = (Object)adaptor.create(TOKEN715);
            adaptor.addChild(root_0, TOKEN715_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:9: ( 'VB-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:356:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal716=(Token)match(input,91,FOLLOW_91_in_vbremove3314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal716_tree = (Object)adaptor.create(string_literal716);
            adaptor.addChild(root_0, string_literal716_tree);
            }
            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove3316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN717_tree = (Object)adaptor.create(TOKEN717);
            adaptor.addChild(root_0, TOKEN717_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:357:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:357:9: ( 'NN-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:357:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal718=(Token)match(input,92,FOLLOW_92_in_nnremove3321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal718_tree = (Object)adaptor.create(string_literal718);
            adaptor.addChild(root_0, string_literal718_tree);
            }
            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove3323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN719_tree = (Object)adaptor.create(TOKEN719);
            adaptor.addChild(root_0, TOKEN719_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:360:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:360:7: ( 'VB-STIR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:360:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal720=(Token)match(input,93,FOLLOW_93_in_vbstir3330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal720_tree = (Object)adaptor.create(string_literal720);
            adaptor.addChild(root_0, string_literal720_tree);
            }
            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir3332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN721_tree = (Object)adaptor.create(TOKEN721);
            adaptor.addChild(root_0, TOKEN721_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:363:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:363:13: ( 'VB-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:363:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal722=(Token)match(input,94,FOLLOW_94_in_vbsynthesize3339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal722_tree = (Object)adaptor.create(string_literal722);
            adaptor.addChild(root_0, string_literal722_tree);
            }
            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize3341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN723_tree = (Object)adaptor.create(TOKEN723);
            adaptor.addChild(root_0, TOKEN723_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:13: ( 'NN-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal724=(Token)match(input,95,FOLLOW_95_in_nnsynthesize3346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal724_tree = (Object)adaptor.create(string_literal724);
            adaptor.addChild(root_0, string_literal724_tree);
            }
            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize3348); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN725_tree = (Object)adaptor.create(TOKEN725);
            adaptor.addChild(root_0, TOKEN725_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:7: ( 'VB-WAIT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal726=(Token)match(input,96,FOLLOW_96_in_vbwait3355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal726_tree = (Object)adaptor.create(string_literal726);
            adaptor.addChild(root_0, string_literal726_tree);
            }
            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait3357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN727_tree = (Object)adaptor.create(TOKEN727);
            adaptor.addChild(root_0, TOKEN727_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:7: ( 'VB-WASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal728=(Token)match(input,97,FOLLOW_97_in_vbwash3364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal728_tree = (Object)adaptor.create(string_literal728);
            adaptor.addChild(root_0, string_literal728_tree);
            }
            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash3366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN729_tree = (Object)adaptor.create(TOKEN729);
            adaptor.addChild(root_0, TOKEN729_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:8: ( 'VB-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal730=(Token)match(input,98,FOLLOW_98_in_vbyield3373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal730_tree = (Object)adaptor.create(string_literal730);
            adaptor.addChild(root_0, string_literal730_tree);
            }
            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield3375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN731_tree = (Object)adaptor.create(TOKEN731);
            adaptor.addChild(root_0, TOKEN731_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:1: nnyield : 'NN-YIELD' TOKEN ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:8: ( 'NN-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:9: 'NN-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal732=(Token)match(input,99,FOLLOW_99_in_nnyield3382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal732_tree = (Object)adaptor.create(string_literal732);
            adaptor.addChild(root_0, string_literal732_tree);
            }
            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield3384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN733_tree = (Object)adaptor.create(TOKEN733);
            adaptor.addChild(root_0, TOKEN733_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:378:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:378:6: ( 'COLON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:378:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal734=(Token)match(input,100,FOLLOW_100_in_colon3390); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal734_tree = (Object)adaptor.create(string_literal734);
            adaptor.addChild(root_0, string_literal734_tree);
            }
            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon3392); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN735_tree = (Object)adaptor.create(TOKEN735);
            adaptor.addChild(root_0, TOKEN735_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:6: ( 'COMMA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal736=(Token)match(input,101,FOLLOW_101_in_comma3397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal736_tree = (Object)adaptor.create(string_literal736);
            adaptor.addChild(root_0, string_literal736_tree);
            }
            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma3399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN737_tree = (Object)adaptor.create(TOKEN737);
            adaptor.addChild(root_0, TOKEN737_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:6: ( 'APOST' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:380:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal738=(Token)match(input,102,FOLLOW_102_in_apost3404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal738_tree = (Object)adaptor.create(string_literal738);
            adaptor.addChild(root_0, string_literal738_tree);
            }
            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost3406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN739_tree = (Object)adaptor.create(TOKEN739);
            adaptor.addChild(root_0, TOKEN739_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:381:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:381:4: ( 'NEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:381:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal740=(Token)match(input,103,FOLLOW_103_in_neg3411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal740_tree = (Object)adaptor.create(string_literal740);
            adaptor.addChild(root_0, string_literal740_tree);
            }
            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg3413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN741_tree = (Object)adaptor.create(TOKEN741);
            adaptor.addChild(root_0, TOKEN741_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:5: ( 'DASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal742=(Token)match(input,104,FOLLOW_104_in_dash3418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal742_tree = (Object)adaptor.create(string_literal742);
            adaptor.addChild(root_0, string_literal742_tree);
            }
            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash3420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN743_tree = (Object)adaptor.create(TOKEN743);
            adaptor.addChild(root_0, TOKEN743_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:5: ( 'STOP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:383:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal744=(Token)match(input,105,FOLLOW_105_in_stop3425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal744_tree = (Object)adaptor.create(string_literal744);
            adaptor.addChild(root_0, string_literal744_tree);
            }
            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop3427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN745_tree = (Object)adaptor.create(TOKEN745);
            adaptor.addChild(root_0, TOKEN745_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:384:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:384:10: ( 'NN-PERCENT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:384:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal746=(Token)match(input,106,FOLLOW_106_in_nnpercent3432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal746_tree = (Object)adaptor.create(string_literal746);
            adaptor.addChild(root_0, string_literal746_tree);
            }
            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent3434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN747_tree = (Object)adaptor.create(TOKEN747);
            adaptor.addChild(root_0, TOKEN747_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:5: ( 'LSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal748=(Token)match(input,107,FOLLOW_107_in_lsqb3439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal748_tree = (Object)adaptor.create(string_literal748);
            adaptor.addChild(root_0, string_literal748_tree);
            }
            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb3441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN749_tree = (Object)adaptor.create(TOKEN749);
            adaptor.addChild(root_0, TOKEN749_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:5: ( 'RSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:386:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal750=(Token)match(input,108,FOLLOW_108_in_rsqb3446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal750_tree = (Object)adaptor.create(string_literal750);
            adaptor.addChild(root_0, string_literal750_tree);
            }
            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb3448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN751_tree = (Object)adaptor.create(TOKEN751);
            adaptor.addChild(root_0, TOKEN751_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:4: ( '-LRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal752=(Token)match(input,109,FOLLOW_109_in_lrb3454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal752_tree = (Object)adaptor.create(string_literal752);
            adaptor.addChild(root_0, string_literal752_tree);
            }
            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb3456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN753_tree = (Object)adaptor.create(TOKEN753);
            adaptor.addChild(root_0, TOKEN753_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:4: ( '-RRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:389:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal754=(Token)match(input,110,FOLLOW_110_in_rrb3461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal754_tree = (Object)adaptor.create(string_literal754);
            adaptor.addChild(root_0, string_literal754_tree);
            }
            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb3463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN755_tree = (Object)adaptor.create(TOKEN755);
            adaptor.addChild(root_0, TOKEN755_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:4: ( 'ABL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal756=(Token)match(input,111,FOLLOW_111_in_abl3472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal756_tree = (Object)adaptor.create(string_literal756);
            adaptor.addChild(root_0, string_literal756_tree);
            }
            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl3474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN757_tree = (Object)adaptor.create(TOKEN757);
            adaptor.addChild(root_0, TOKEN757_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:4: ( 'ABN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal758=(Token)match(input,112,FOLLOW_112_in_abn3481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal758_tree = (Object)adaptor.create(string_literal758);
            adaptor.addChild(root_0, string_literal758_tree);
            }
            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn3483); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN759_tree = (Object)adaptor.create(TOKEN759);
            adaptor.addChild(root_0, TOKEN759_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:4: ( 'ABX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal760=(Token)match(input,113,FOLLOW_113_in_abx3490); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal760_tree = (Object)adaptor.create(string_literal760);
            adaptor.addChild(root_0, string_literal760_tree);
            }
            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx3492); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN761_tree = (Object)adaptor.create(TOKEN761);
            adaptor.addChild(root_0, TOKEN761_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:3: ( 'AP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal762=(Token)match(input,114,FOLLOW_114_in_ap3499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal762_tree = (Object)adaptor.create(string_literal762);
            adaptor.addChild(root_0, string_literal762_tree);
            }
            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap3501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN763_tree = (Object)adaptor.create(TOKEN763);
            adaptor.addChild(root_0, TOKEN763_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:3: ( 'AT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal764=(Token)match(input,115,FOLLOW_115_in_at3508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal764_tree = (Object)adaptor.create(string_literal764);
            adaptor.addChild(root_0, string_literal764_tree);
            }
            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at3510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN765_tree = (Object)adaptor.create(TOKEN765);
            adaptor.addChild(root_0, TOKEN765_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:3: ( 'BE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal766=(Token)match(input,116,FOLLOW_116_in_be3517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal766_tree = (Object)adaptor.create(string_literal766);
            adaptor.addChild(root_0, string_literal766_tree);
            }
            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be3519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN767_tree = (Object)adaptor.create(TOKEN767);
            adaptor.addChild(root_0, TOKEN767_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:4: ( 'BED' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal768=(Token)match(input,117,FOLLOW_117_in_bed3526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal768_tree = (Object)adaptor.create(string_literal768);
            adaptor.addChild(root_0, string_literal768_tree);
            }
            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed3528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN769_tree = (Object)adaptor.create(TOKEN769);
            adaptor.addChild(root_0, TOKEN769_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:5: ( 'BEDZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal770=(Token)match(input,118,FOLLOW_118_in_bedz3535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal770_tree = (Object)adaptor.create(string_literal770);
            adaptor.addChild(root_0, string_literal770_tree);
            }
            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz3537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN771_tree = (Object)adaptor.create(TOKEN771);
            adaptor.addChild(root_0, TOKEN771_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:4: ( 'BEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal772=(Token)match(input,119,FOLLOW_119_in_beg3544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal772_tree = (Object)adaptor.create(string_literal772);
            adaptor.addChild(root_0, string_literal772_tree);
            }
            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg3546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN773_tree = (Object)adaptor.create(TOKEN773);
            adaptor.addChild(root_0, TOKEN773_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:4: ( 'BEM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal774=(Token)match(input,120,FOLLOW_120_in_bem3553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal774_tree = (Object)adaptor.create(string_literal774);
            adaptor.addChild(root_0, string_literal774_tree);
            }
            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem3555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN775_tree = (Object)adaptor.create(TOKEN775);
            adaptor.addChild(root_0, TOKEN775_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:4: ( 'BEN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal776=(Token)match(input,121,FOLLOW_121_in_ben3562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal776_tree = (Object)adaptor.create(string_literal776);
            adaptor.addChild(root_0, string_literal776_tree);
            }
            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben3564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN777_tree = (Object)adaptor.create(TOKEN777);
            adaptor.addChild(root_0, TOKEN777_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:4: ( 'BER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal778=(Token)match(input,122,FOLLOW_122_in_ber3571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal778_tree = (Object)adaptor.create(string_literal778);
            adaptor.addChild(root_0, string_literal778_tree);
            }
            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber3573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN779_tree = (Object)adaptor.create(TOKEN779);
            adaptor.addChild(root_0, TOKEN779_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:4: ( 'BEZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal780=(Token)match(input,123,FOLLOW_123_in_bez3580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal780_tree = (Object)adaptor.create(string_literal780);
            adaptor.addChild(root_0, string_literal780_tree);
            }
            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez3582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN781_tree = (Object)adaptor.create(TOKEN781);
            adaptor.addChild(root_0, TOKEN781_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:3: ( 'CC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal782=(Token)match(input,124,FOLLOW_124_in_cc3589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal782_tree = (Object)adaptor.create(string_literal782);
            adaptor.addChild(root_0, string_literal782_tree);
            }
            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc3591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN783_tree = (Object)adaptor.create(TOKEN783);
            adaptor.addChild(root_0, TOKEN783_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:3: ( 'CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal784=(Token)match(input,125,FOLLOW_125_in_cd3598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal784_tree = (Object)adaptor.create(string_literal784);
            adaptor.addChild(root_0, string_literal784_tree);
            }
            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd3600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN785_tree = (Object)adaptor.create(TOKEN785);
            adaptor.addChild(root_0, TOKEN785_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:3: ( 'CS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal786=(Token)match(input,126,FOLLOW_126_in_cs3607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal786_tree = (Object)adaptor.create(string_literal786);
            adaptor.addChild(root_0, string_literal786_tree);
            }
            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs3609); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN787_tree = (Object)adaptor.create(TOKEN787);
            adaptor.addChild(root_0, TOKEN787_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:7: ( 'DO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal788=(Token)match(input,127,FOLLOW_127_in_dotok3617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal788_tree = (Object)adaptor.create(string_literal788);
            adaptor.addChild(root_0, string_literal788_tree);
            }
            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok3619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN789_tree = (Object)adaptor.create(TOKEN789);
            adaptor.addChild(root_0, TOKEN789_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:4: ( 'DOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal790=(Token)match(input,128,FOLLOW_128_in_dod3626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal790_tree = (Object)adaptor.create(string_literal790);
            adaptor.addChild(root_0, string_literal790_tree);
            }
            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod3628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN791_tree = (Object)adaptor.create(TOKEN791);
            adaptor.addChild(root_0, TOKEN791_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:4: ( 'DOZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal792=(Token)match(input,129,FOLLOW_129_in_doz3635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal792_tree = (Object)adaptor.create(string_literal792);
            adaptor.addChild(root_0, string_literal792_tree);
            }
            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz3637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN793_tree = (Object)adaptor.create(TOKEN793);
            adaptor.addChild(root_0, TOKEN793_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:3: ( 'DT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal794=(Token)match(input,130,FOLLOW_130_in_dt3644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal794_tree = (Object)adaptor.create(string_literal794);
            adaptor.addChild(root_0, string_literal794_tree);
            }
            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt3646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN795_tree = (Object)adaptor.create(TOKEN795);
            adaptor.addChild(root_0, TOKEN795_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:455:1: dtTHE : 'DT-THE' TOKEN ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:455:6: ( 'DT-THE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:455:7: 'DT-THE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal796=(Token)match(input,131,FOLLOW_131_in_dtTHE3654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal796_tree = (Object)adaptor.create(string_literal796);
            adaptor.addChild(root_0, string_literal796_tree);
            }
            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE3656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN797_tree = (Object)adaptor.create(TOKEN797);
            adaptor.addChild(root_0, TOKEN797_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:4: ( 'DTI' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal798=(Token)match(input,132,FOLLOW_132_in_dti3662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal798_tree = (Object)adaptor.create(string_literal798);
            adaptor.addChild(root_0, string_literal798_tree);
            }
            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti3664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN799_tree = (Object)adaptor.create(TOKEN799);
            adaptor.addChild(root_0, TOKEN799_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:4: ( 'DTS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal800=(Token)match(input,133,FOLLOW_133_in_dts3671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal800_tree = (Object)adaptor.create(string_literal800);
            adaptor.addChild(root_0, string_literal800_tree);
            }
            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts3673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN801_tree = (Object)adaptor.create(TOKEN801);
            adaptor.addChild(root_0, TOKEN801_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:4: ( 'DTX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal802=(Token)match(input,134,FOLLOW_134_in_dtx3680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal802_tree = (Object)adaptor.create(string_literal802);
            adaptor.addChild(root_0, string_literal802_tree);
            }
            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx3682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN803_tree = (Object)adaptor.create(TOKEN803);
            adaptor.addChild(root_0, TOKEN803_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:3: ( 'EX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal804=(Token)match(input,135,FOLLOW_135_in_ex3689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal804_tree = (Object)adaptor.create(string_literal804);
            adaptor.addChild(root_0, string_literal804_tree);
            }
            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex3691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN805_tree = (Object)adaptor.create(TOKEN805);
            adaptor.addChild(root_0, TOKEN805_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:3: ( 'FW' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal806=(Token)match(input,136,FOLLOW_136_in_fw3698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal806_tree = (Object)adaptor.create(string_literal806);
            adaptor.addChild(root_0, string_literal806_tree);
            }
            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw3700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN807_tree = (Object)adaptor.create(TOKEN807);
            adaptor.addChild(root_0, TOKEN807_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:5: ( 'FW-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal808=(Token)match(input,137,FOLLOW_137_in_fwin3707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal808_tree = (Object)adaptor.create(string_literal808);
            adaptor.addChild(root_0, string_literal808_tree);
            }
            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin3709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN809_tree = (Object)adaptor.create(TOKEN809);
            adaptor.addChild(root_0, TOKEN809_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:3: ( 'HV' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal810=(Token)match(input,138,FOLLOW_138_in_hv3716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal810_tree = (Object)adaptor.create(string_literal810);
            adaptor.addChild(root_0, string_literal810_tree);
            }
            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv3718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN811_tree = (Object)adaptor.create(TOKEN811);
            adaptor.addChild(root_0, TOKEN811_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:4: ( 'HVD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal812=(Token)match(input,139,FOLLOW_139_in_hvd3725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal812_tree = (Object)adaptor.create(string_literal812);
            adaptor.addChild(root_0, string_literal812_tree);
            }
            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd3727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN813_tree = (Object)adaptor.create(TOKEN813);
            adaptor.addChild(root_0, TOKEN813_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:4: ( 'HVG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal814=(Token)match(input,140,FOLLOW_140_in_hvg3734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal814_tree = (Object)adaptor.create(string_literal814);
            adaptor.addChild(root_0, string_literal814_tree);
            }
            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg3736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN815_tree = (Object)adaptor.create(TOKEN815);
            adaptor.addChild(root_0, TOKEN815_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:4: ( 'HVN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal816=(Token)match(input,141,FOLLOW_141_in_hvn3743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal816_tree = (Object)adaptor.create(string_literal816);
            adaptor.addChild(root_0, string_literal816_tree);
            }
            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn3745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN817_tree = (Object)adaptor.create(TOKEN817);
            adaptor.addChild(root_0, TOKEN817_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:3: ( 'IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal818=(Token)match(input,142,FOLLOW_142_in_in3752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal818_tree = (Object)adaptor.create(string_literal818);
            adaptor.addChild(root_0, string_literal818_tree);
            }
            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in3754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN819_tree = (Object)adaptor.create(TOKEN819);
            adaptor.addChild(root_0, TOKEN819_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:3: ( 'JJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal820=(Token)match(input,143,FOLLOW_143_in_jj3761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal820_tree = (Object)adaptor.create(string_literal820);
            adaptor.addChild(root_0, string_literal820_tree);
            }
            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj3763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN821_tree = (Object)adaptor.create(TOKEN821);
            adaptor.addChild(root_0, TOKEN821_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:4: ( 'JJR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal822=(Token)match(input,144,FOLLOW_144_in_jjr3770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal822_tree = (Object)adaptor.create(string_literal822);
            adaptor.addChild(root_0, string_literal822_tree);
            }
            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr3772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN823_tree = (Object)adaptor.create(TOKEN823);
            adaptor.addChild(root_0, TOKEN823_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:4: ( 'JJS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal824=(Token)match(input,145,FOLLOW_145_in_jjs3779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal824_tree = (Object)adaptor.create(string_literal824);
            adaptor.addChild(root_0, string_literal824_tree);
            }
            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs3781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN825_tree = (Object)adaptor.create(TOKEN825);
            adaptor.addChild(root_0, TOKEN825_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:4: ( 'JJT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal826=(Token)match(input,146,FOLLOW_146_in_jjt3788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal826_tree = (Object)adaptor.create(string_literal826);
            adaptor.addChild(root_0, string_literal826_tree);
            }
            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt3790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN827_tree = (Object)adaptor.create(TOKEN827);
            adaptor.addChild(root_0, TOKEN827_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:3: ( 'MD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal828=(Token)match(input,147,FOLLOW_147_in_md3797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal828_tree = (Object)adaptor.create(string_literal828);
            adaptor.addChild(root_0, string_literal828_tree);
            }
            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md3799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN829_tree = (Object)adaptor.create(TOKEN829);
            adaptor.addChild(root_0, TOKEN829_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:3: ( 'NC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal830=(Token)match(input,148,FOLLOW_148_in_nc3806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal830_tree = (Object)adaptor.create(string_literal830);
            adaptor.addChild(root_0, string_literal830_tree);
            }
            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc3808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN831_tree = (Object)adaptor.create(TOKEN831);
            adaptor.addChild(root_0, TOKEN831_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:3: ( 'NN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal832=(Token)match(input,149,FOLLOW_149_in_nn3815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal832_tree = (Object)adaptor.create(string_literal832);
            adaptor.addChild(root_0, string_literal832_tree);
            }
            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn3817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN833_tree = (Object)adaptor.create(TOKEN833);
            adaptor.addChild(root_0, TOKEN833_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:511:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:511:8: ( 'NN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:511:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal834=(Token)match(input,150,FOLLOW_150_in_nn_poss3824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal834_tree = (Object)adaptor.create(string_literal834);
            adaptor.addChild(root_0, string_literal834_tree);
            }
            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss3826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN835_tree = (Object)adaptor.create(TOKEN835);
            adaptor.addChild(root_0, TOKEN835_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:514:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:514:4: ( 'NNS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:514:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal836=(Token)match(input,151,FOLLOW_151_in_nns3833); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal836_tree = (Object)adaptor.create(string_literal836);
            adaptor.addChild(root_0, string_literal836_tree);
            }
            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns3835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN837_tree = (Object)adaptor.create(TOKEN837);
            adaptor.addChild(root_0, TOKEN837_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:9: ( 'NNS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal838=(Token)match(input,152,FOLLOW_152_in_nns_poss3842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal838_tree = (Object)adaptor.create(string_literal838);
            adaptor.addChild(root_0, string_literal838_tree);
            }
            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss3844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN839_tree = (Object)adaptor.create(TOKEN839);
            adaptor.addChild(root_0, TOKEN839_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:3: ( 'NP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal840=(Token)match(input,153,FOLLOW_153_in_np3851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal840_tree = (Object)adaptor.create(string_literal840);
            adaptor.addChild(root_0, string_literal840_tree);
            }
            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np3853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN841_tree = (Object)adaptor.create(TOKEN841);
            adaptor.addChild(root_0, TOKEN841_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:524:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:524:4: ( 'NNP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:524:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal842=(Token)match(input,154,FOLLOW_154_in_nnp3861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal842_tree = (Object)adaptor.create(string_literal842);
            adaptor.addChild(root_0, string_literal842_tree);
            }
            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp3863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN843_tree = (Object)adaptor.create(TOKEN843);
            adaptor.addChild(root_0, TOKEN843_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:8: ( 'NP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal844=(Token)match(input,155,FOLLOW_155_in_np_poss3871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal844_tree = (Object)adaptor.create(string_literal844);
            adaptor.addChild(root_0, string_literal844_tree);
            }
            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss3873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN845_tree = (Object)adaptor.create(TOKEN845);
            adaptor.addChild(root_0, TOKEN845_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:4: ( 'NPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal846=(Token)match(input,156,FOLLOW_156_in_nps3880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal846_tree = (Object)adaptor.create(string_literal846);
            adaptor.addChild(root_0, string_literal846_tree);
            }
            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps3882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN847_tree = (Object)adaptor.create(TOKEN847);
            adaptor.addChild(root_0, TOKEN847_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:9: ( 'NPS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal848=(Token)match(input,157,FOLLOW_157_in_nps_poss3889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal848_tree = (Object)adaptor.create(string_literal848);
            adaptor.addChild(root_0, string_literal848_tree);
            }
            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss3891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN849_tree = (Object)adaptor.create(TOKEN849);
            adaptor.addChild(root_0, TOKEN849_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:3: ( 'NR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal850=(Token)match(input,158,FOLLOW_158_in_nr3898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal850_tree = (Object)adaptor.create(string_literal850);
            adaptor.addChild(root_0, string_literal850_tree);
            }
            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr3900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN851_tree = (Object)adaptor.create(TOKEN851);
            adaptor.addChild(root_0, TOKEN851_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:3: ( 'OD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal852=(Token)match(input,159,FOLLOW_159_in_od3907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal852_tree = (Object)adaptor.create(string_literal852);
            adaptor.addChild(root_0, string_literal852_tree);
            }
            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od3909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN853_tree = (Object)adaptor.create(TOKEN853);
            adaptor.addChild(root_0, TOKEN853_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:543:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:543:3: ( 'PN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:543:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal854=(Token)match(input,160,FOLLOW_160_in_pn3916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal854_tree = (Object)adaptor.create(string_literal854);
            adaptor.addChild(root_0, string_literal854_tree);
            }
            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn3918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN855_tree = (Object)adaptor.create(TOKEN855);
            adaptor.addChild(root_0, TOKEN855_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:8: ( 'PN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal856=(Token)match(input,161,FOLLOW_161_in_pn_poss3925); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal856_tree = (Object)adaptor.create(string_literal856);
            adaptor.addChild(root_0, string_literal856_tree);
            }
            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss3927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN857_tree = (Object)adaptor.create(TOKEN857);
            adaptor.addChild(root_0, TOKEN857_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:8: ( 'PP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal858=(Token)match(input,162,FOLLOW_162_in_pp_poss3934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal858_tree = (Object)adaptor.create(string_literal858);
            adaptor.addChild(root_0, string_literal858_tree);
            }
            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss3936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN859_tree = (Object)adaptor.create(TOKEN859);
            adaptor.addChild(root_0, TOKEN859_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:13: ( 'PP$$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal860=(Token)match(input,163,FOLLOW_163_in_pp_poss_poss3943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal860_tree = (Object)adaptor.create(string_literal860);
            adaptor.addChild(root_0, string_literal860_tree);
            }
            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss3945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN861_tree = (Object)adaptor.create(TOKEN861);
            adaptor.addChild(root_0, TOKEN861_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:4: ( 'PPL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal862=(Token)match(input,164,FOLLOW_164_in_ppl3952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal862_tree = (Object)adaptor.create(string_literal862);
            adaptor.addChild(root_0, string_literal862_tree);
            }
            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl3954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN863_tree = (Object)adaptor.create(TOKEN863);
            adaptor.addChild(root_0, TOKEN863_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:5: ( 'PPLS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal864=(Token)match(input,165,FOLLOW_165_in_ppls3961); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal864_tree = (Object)adaptor.create(string_literal864);
            adaptor.addChild(root_0, string_literal864_tree);
            }
            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls3963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN865_tree = (Object)adaptor.create(TOKEN865);
            adaptor.addChild(root_0, TOKEN865_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:5: ( 'PRP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal866=(Token)match(input,166,FOLLOW_166_in_prp3971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal866_tree = (Object)adaptor.create(string_literal866);
            adaptor.addChild(root_0, string_literal866_tree);
            }
            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp3974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN867_tree = (Object)adaptor.create(TOKEN867);
            adaptor.addChild(root_0, TOKEN867_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:4: ( 'PPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal868=(Token)match(input,167,FOLLOW_167_in_ppo3981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal868_tree = (Object)adaptor.create(string_literal868);
            adaptor.addChild(root_0, string_literal868_tree);
            }
            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo3983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN869_tree = (Object)adaptor.create(TOKEN869);
            adaptor.addChild(root_0, TOKEN869_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:4: ( 'PPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal870=(Token)match(input,168,FOLLOW_168_in_pps3990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal870_tree = (Object)adaptor.create(string_literal870);
            adaptor.addChild(root_0, string_literal870_tree);
            }
            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps3992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN871_tree = (Object)adaptor.create(TOKEN871);
            adaptor.addChild(root_0, TOKEN871_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:569:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:569:5: ( 'PPSS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:569:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal872=(Token)match(input,169,FOLLOW_169_in_ppss3999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal872_tree = (Object)adaptor.create(string_literal872);
            adaptor.addChild(root_0, string_literal872_tree);
            }
            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss4001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN873_tree = (Object)adaptor.create(TOKEN873);
            adaptor.addChild(root_0, TOKEN873_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:3: ( 'QL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal874=(Token)match(input,170,FOLLOW_170_in_ql4008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal874_tree = (Object)adaptor.create(string_literal874);
            adaptor.addChild(root_0, string_literal874_tree);
            }
            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql4010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN875_tree = (Object)adaptor.create(TOKEN875);
            adaptor.addChild(root_0, TOKEN875_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:4: ( 'QLP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal876=(Token)match(input,171,FOLLOW_171_in_qlp4017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal876_tree = (Object)adaptor.create(string_literal876);
            adaptor.addChild(root_0, string_literal876_tree);
            }
            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp4019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN877_tree = (Object)adaptor.create(TOKEN877);
            adaptor.addChild(root_0, TOKEN877_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:3: ( 'RB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal878=(Token)match(input,172,FOLLOW_172_in_rb4026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal878_tree = (Object)adaptor.create(string_literal878);
            adaptor.addChild(root_0, string_literal878_tree);
            }
            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb4028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN879_tree = (Object)adaptor.create(TOKEN879);
            adaptor.addChild(root_0, TOKEN879_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:581:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:581:4: ( 'RBR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:581:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal880=(Token)match(input,173,FOLLOW_173_in_rbr4035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal880_tree = (Object)adaptor.create(string_literal880);
            adaptor.addChild(root_0, string_literal880_tree);
            }
            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr4037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN881_tree = (Object)adaptor.create(TOKEN881);
            adaptor.addChild(root_0, TOKEN881_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:584:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:584:8: ( 'RB-CONJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:584:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal882=(Token)match(input,174,FOLLOW_174_in_rbconj4046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal882_tree = (Object)adaptor.create(string_literal882);
            adaptor.addChild(root_0, string_literal882_tree);
            }
            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN883_tree = (Object)adaptor.create(TOKEN883);
            adaptor.addChild(root_0, TOKEN883_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:587:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:587:4: ( 'RBT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:587:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal884=(Token)match(input,175,FOLLOW_175_in_rbt4057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal884_tree = (Object)adaptor.create(string_literal884);
            adaptor.addChild(root_0, string_literal884_tree);
            }
            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt4059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN885_tree = (Object)adaptor.create(TOKEN885);
            adaptor.addChild(root_0, TOKEN885_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:590:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:590:4: ( 'RBS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:590:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal886=(Token)match(input,176,FOLLOW_176_in_rbs4066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal886_tree = (Object)adaptor.create(string_literal886);
            adaptor.addChild(root_0, string_literal886_tree);
            }
            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs4068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN887_tree = (Object)adaptor.create(TOKEN887);
            adaptor.addChild(root_0, TOKEN887_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:3: ( 'RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal888=(Token)match(input,177,FOLLOW_177_in_rn4076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal888_tree = (Object)adaptor.create(string_literal888);
            adaptor.addChild(root_0, string_literal888_tree);
            }
            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn4078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN889_tree = (Object)adaptor.create(TOKEN889);
            adaptor.addChild(root_0, TOKEN889_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:597:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:597:3: ( 'RP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:597:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal890=(Token)match(input,178,FOLLOW_178_in_rp4085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal890_tree = (Object)adaptor.create(string_literal890);
            adaptor.addChild(root_0, string_literal890_tree);
            }
            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp4087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN891_tree = (Object)adaptor.create(TOKEN891);
            adaptor.addChild(root_0, TOKEN891_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:600:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:600:5: ( 'SYM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:600:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal892=(Token)match(input,179,FOLLOW_179_in_sym4096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal892_tree = (Object)adaptor.create(string_literal892);
            adaptor.addChild(root_0, string_literal892_tree);
            }
            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym4098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN893_tree = (Object)adaptor.create(TOKEN893);
            adaptor.addChild(root_0, TOKEN893_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:3: ( 'TO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal894=(Token)match(input,180,FOLLOW_180_in_to4105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal894_tree = (Object)adaptor.create(string_literal894);
            adaptor.addChild(root_0, string_literal894_tree);
            }
            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to4107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN895_tree = (Object)adaptor.create(TOKEN895);
            adaptor.addChild(root_0, TOKEN895_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:606:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:606:3: ( 'UH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:606:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal896=(Token)match(input,181,FOLLOW_181_in_uh4114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal896_tree = (Object)adaptor.create(string_literal896);
            adaptor.addChild(root_0, string_literal896_tree);
            }
            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh4116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN897_tree = (Object)adaptor.create(TOKEN897);
            adaptor.addChild(root_0, TOKEN897_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:609:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:609:3: ( 'VB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:609:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal898=(Token)match(input,182,FOLLOW_182_in_vb4123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal898_tree = (Object)adaptor.create(string_literal898);
            adaptor.addChild(root_0, string_literal898_tree);
            }
            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb4125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN899_tree = (Object)adaptor.create(TOKEN899);
            adaptor.addChild(root_0, TOKEN899_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:611:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:611:5: ( 'VBP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:611:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal900=(Token)match(input,183,FOLLOW_183_in_vbp4133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal900_tree = (Object)adaptor.create(string_literal900);
            adaptor.addChild(root_0, string_literal900_tree);
            }
            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp4135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN901_tree = (Object)adaptor.create(TOKEN901);
            adaptor.addChild(root_0, TOKEN901_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:615:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:615:4: ( 'VBD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:615:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal902=(Token)match(input,184,FOLLOW_184_in_vbd4144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal902_tree = (Object)adaptor.create(string_literal902);
            adaptor.addChild(root_0, string_literal902_tree);
            }
            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd4146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN903_tree = (Object)adaptor.create(TOKEN903);
            adaptor.addChild(root_0, TOKEN903_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:618:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:618:4: ( 'VBG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:618:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal904=(Token)match(input,185,FOLLOW_185_in_vbg4153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal904_tree = (Object)adaptor.create(string_literal904);
            adaptor.addChild(root_0, string_literal904_tree);
            }
            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg4155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN905_tree = (Object)adaptor.create(TOKEN905);
            adaptor.addChild(root_0, TOKEN905_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:621:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:621:4: ( 'VBN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:621:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal906=(Token)match(input,186,FOLLOW_186_in_vbn4162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal906_tree = (Object)adaptor.create(string_literal906);
            adaptor.addChild(root_0, string_literal906_tree);
            }
            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn4164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN907_tree = (Object)adaptor.create(TOKEN907);
            adaptor.addChild(root_0, TOKEN907_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:624:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:624:4: ( 'VBZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:624:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal908=(Token)match(input,187,FOLLOW_187_in_vbz4171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal908_tree = (Object)adaptor.create(string_literal908);
            adaptor.addChild(root_0, string_literal908_tree);
            }
            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz4173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN909_tree = (Object)adaptor.create(TOKEN909);
            adaptor.addChild(root_0, TOKEN909_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:627:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:627:4: ( 'WDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:627:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal910=(Token)match(input,188,FOLLOW_188_in_wdt4180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal910_tree = (Object)adaptor.create(string_literal910);
            adaptor.addChild(root_0, string_literal910_tree);
            }
            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt4182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN911_tree = (Object)adaptor.create(TOKEN911);
            adaptor.addChild(root_0, TOKEN911_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:630:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:630:8: ( 'WP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:630:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal912=(Token)match(input,189,FOLLOW_189_in_wp_poss4189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal912_tree = (Object)adaptor.create(string_literal912);
            adaptor.addChild(root_0, string_literal912_tree);
            }
            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss4191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN913_tree = (Object)adaptor.create(TOKEN913);
            adaptor.addChild(root_0, TOKEN913_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:634:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:634:4: ( 'WPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:634:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal914=(Token)match(input,190,FOLLOW_190_in_wpo4199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal914_tree = (Object)adaptor.create(string_literal914);
            adaptor.addChild(root_0, string_literal914_tree);
            }
            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo4201); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN915_tree = (Object)adaptor.create(TOKEN915);
            adaptor.addChild(root_0, TOKEN915_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:637:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:637:4: ( 'WPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:637:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal916=(Token)match(input,191,FOLLOW_191_in_wps4208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal916_tree = (Object)adaptor.create(string_literal916);
            adaptor.addChild(root_0, string_literal916_tree);
            }
            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps4210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN917_tree = (Object)adaptor.create(TOKEN917);
            adaptor.addChild(root_0, TOKEN917_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:641:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:641:4: ( 'WQL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:641:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal918=(Token)match(input,192,FOLLOW_192_in_wql4218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal918_tree = (Object)adaptor.create(string_literal918);
            adaptor.addChild(root_0, string_literal918_tree);
            }
            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql4220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN919_tree = (Object)adaptor.create(TOKEN919);
            adaptor.addChild(root_0, TOKEN919_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:644:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:644:4: ( 'WRB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:644:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal920=(Token)match(input,193,FOLLOW_193_in_wrb4227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal920_tree = (Object)adaptor.create(string_literal920);
            adaptor.addChild(root_0, string_literal920_tree);
            }
            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb4229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN921_tree = (Object)adaptor.create(TOKEN921);
            adaptor.addChild(root_0, TOKEN921_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:646:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:646:6: ( 'PDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:646:8: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal922=(Token)match(input,194,FOLLOW_194_in_pdt4238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal922_tree = (Object)adaptor.create(string_literal922);
            adaptor.addChild(root_0, string_literal922_tree);
            }
            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN923_tree = (Object)adaptor.create(TOKEN923);
            adaptor.addChild(root_0, TOKEN923_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: ( sentence )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
        {
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker230);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
        {
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker240);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: ( nounphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker253);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: ( verbphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker255);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: ( prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker257);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker262);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: ( colon )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker264);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:66: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:66: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker270);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:78: ( rbconj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:78: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker272);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred13_ChemicalChunker306);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred14_ChemicalChunker308);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
        {
        pushFollow(FOLLOW_verb_in_synpred15_ChemicalChunker310);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
        {
        pushFollow(FOLLOW_dt_in_synpred17_ChemicalChunker314);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:33: ( oscarcd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:33: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred19_ChemicalChunker318);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:41: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:41: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred20_ChemicalChunker320);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:49: ( oscarrn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:49: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred21_ChemicalChunker322);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:57: ( oscaront )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:57: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred22_ChemicalChunker324);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred23_ChemicalChunker
    public final void synpred23_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:66: ( brackets )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:66: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred23_ChemicalChunker326);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_ChemicalChunker

    // $ANTLR start synpred24_ChemicalChunker
    public final void synpred24_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:75: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:75: sym
        {
        pushFollow(FOLLOW_sym_in_synpred24_ChemicalChunker328);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_ChemicalChunker

    // $ANTLR start synpred28_ChemicalChunker
    public final void synpred28_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:92: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:92: number
        {
        pushFollow(FOLLOW_number_in_synpred28_ChemicalChunker336);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: comma
        {
        pushFollow(FOLLOW_comma_in_synpred29_ChemicalChunker338);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:105: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:105: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred30_ChemicalChunker340);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: ( nounphraseStructure1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred32_ChemicalChunker379);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:11: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred34_ChemicalChunker414);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:15: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred35_ChemicalChunker417);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:25: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred36_ChemicalChunker422);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:40: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:40: noun
        {
        pushFollow(FOLLOW_noun_in_synpred37_ChemicalChunker424);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: number
        {
        pushFollow(FOLLOW_number_in_synpred38_ChemicalChunker426);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:52: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:52: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred39_ChemicalChunker428);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred40_ChemicalChunker436);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred41_ChemicalChunker439);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred42_ChemicalChunker443);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred43_ChemicalChunker
    public final void synpred43_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: noun
        {
        pushFollow(FOLLOW_noun_in_synpred43_ChemicalChunker445);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_ChemicalChunker

    // $ANTLR start synpred44_ChemicalChunker
    public final void synpred44_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: number
        {
        pushFollow(FOLLOW_number_in_synpred44_ChemicalChunker447);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )*
        loop154:
        do {
            int alt154=2;
            alt154 = dfa154.predict(input);
            switch (alt154) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred45_ChemicalChunker436);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop154;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: ( advAdj )*
        loop155:
        do {
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred45_ChemicalChunker439);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop155;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:85: ( dissolvePhrase | noun | number | ratio )
        int alt156=4;
        alt156 = dfa156.predict(input);
        switch (alt156) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred45_ChemicalChunker443);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: noun
                {
                pushFollow(FOLLOW_noun_in_synpred45_ChemicalChunker445);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: number
                {
                pushFollow(FOLLOW_number_in_synpred45_ChemicalChunker447);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:113: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred45_ChemicalChunker449);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred47_ChemicalChunker
    public final void synpred47_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred47_ChemicalChunker465);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_ChemicalChunker

    // $ANTLR start synpred48_ChemicalChunker
    public final void synpred48_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN )
        int alt157=2;
        switch ( input.LA(1) ) {
        case 27:
            {
            alt157=1;
            }
            break;
        case 21:
            {
            alt157=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 157, 0, input);

            throw nvae;
        }

        switch (alt157) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:127: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred48_ChemicalChunker459);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:141: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred48_ChemicalChunker462);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: ( dissolvePhrase )?
        int alt158=2;
        switch ( input.LA(1) ) {
            case 11:
            case 12:
            case 13:
            case 38:
            case 54:
            case 101:
            case 109:
            case 125:
            case 143:
            case 144:
            case 145:
            case 146:
            case 154:
                {
                alt158=1;
                }
                break;
        }

        switch (alt158) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred48_ChemicalChunker465);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred48_ChemicalChunker

    // $ANTLR start synpred49_ChemicalChunker
    public final void synpred49_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:5: ( dissolveStructure1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:5: dissolveStructure1
        {
        pushFollow(FOLLOW_dissolveStructure1_in_synpred49_ChemicalChunker480);
        dissolveStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_ChemicalChunker

    // $ANTLR start synpred50_ChemicalChunker
    public final void synpred50_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:24: ( dissolveStructure2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:24: dissolveStructure2
        {
        pushFollow(FOLLOW_dissolveStructure2_in_synpred50_ChemicalChunker482);
        dissolveStructure2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_ChemicalChunker

    // $ANTLR start synpred51_ChemicalChunker
    public final void synpred51_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: adj
        {
        pushFollow(FOLLOW_adj_in_synpred51_ChemicalChunker513);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_ChemicalChunker

    // $ANTLR start synpred53_ChemicalChunker
    public final void synpred53_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:19: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:19: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred53_ChemicalChunker520);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_ChemicalChunker

    // $ANTLR start synpred55_ChemicalChunker
    public final void synpred55_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:58: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:58: adj
        {
        pushFollow(FOLLOW_adj_in_synpred55_ChemicalChunker531);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_ChemicalChunker

    // $ANTLR start synpred57_ChemicalChunker
    public final void synpred57_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:69: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:69: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred57_ChemicalChunker538);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_ChemicalChunker

    // $ANTLR start synpred59_ChemicalChunker
    public final void synpred59_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred59_ChemicalChunker554);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_ChemicalChunker

    // $ANTLR start synpred61_ChemicalChunker
    public final void synpred61_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:15: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:15: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred61_ChemicalChunker561);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_ChemicalChunker

    // $ANTLR start synpred63_ChemicalChunker
    public final void synpred63_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:54: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:54: adj
        {
        pushFollow(FOLLOW_adj_in_synpred63_ChemicalChunker572);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_ChemicalChunker

    // $ANTLR start synpred65_ChemicalChunker
    public final void synpred65_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:65: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:65: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred65_ChemicalChunker579);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_ChemicalChunker

    // $ANTLR start synpred66_ChemicalChunker
    public final void synpred66_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:42: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
        {
        pushFollow(FOLLOW_inin_in_synpred66_ChemicalChunker567);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:47: ( dtTHE )?
        int alt163=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt163=1;
                }
                break;
        }

        switch (alt163) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred66_ChemicalChunker569);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:54: ( adj )?
        int alt164=2;
        alt164 = dfa164.predict(input);
        switch (alt164) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred66_ChemicalChunker572);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:59: ( nnp )?
        int alt165=2;
        switch ( input.LA(1) ) {
            case 154:
                {
                alt165=1;
                }
                break;
        }

        switch (alt165) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred66_ChemicalChunker575);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:64: ( molecule | unnamedmolecule )
        int alt166=2;
        alt166 = dfa166.predict(input);
        switch (alt166) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:65: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred66_ChemicalChunker579);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:74: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred66_ChemicalChunker581);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred66_ChemicalChunker

    // $ANTLR start synpred68_ChemicalChunker
    public final void synpred68_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:14: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:14: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred68_ChemicalChunker600);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_ChemicalChunker

    // $ANTLR start synpred69_ChemicalChunker
    public final void synpred69_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:23: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:23: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred69_ChemicalChunker602);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_ChemicalChunker

    // $ANTLR start synpred71_ChemicalChunker
    public final void synpred71_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:66: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:66: adj
        {
        pushFollow(FOLLOW_adj_in_synpred71_ChemicalChunker613);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_ChemicalChunker

    // $ANTLR start synpred73_ChemicalChunker
    public final void synpred73_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:77: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:77: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred73_ChemicalChunker620);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_ChemicalChunker

    // $ANTLR start synpred74_ChemicalChunker
    public final void synpred74_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:54: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
        {
        pushFollow(FOLLOW_inin_in_synpred74_ChemicalChunker608);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( dtTHE )?
        int alt167=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt167=1;
                }
                break;
        }

        switch (alt167) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred74_ChemicalChunker610);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:66: ( adj )?
        int alt168=2;
        alt168 = dfa168.predict(input);
        switch (alt168) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred74_ChemicalChunker613);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:71: ( nnp )?
        int alt169=2;
        switch ( input.LA(1) ) {
            case 154:
                {
                alt169=1;
                }
                break;
        }

        switch (alt169) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred74_ChemicalChunker616);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:76: ( molecule | unnamedmolecule )
        int alt170=2;
        alt170 = dfa170.predict(input);
        switch (alt170) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:77: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred74_ChemicalChunker620);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:86: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred74_ChemicalChunker622);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred74_ChemicalChunker

    // $ANTLR start synpred77_ChemicalChunker
    public final void synpred77_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:28: ( to )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:28: to
        {
        pushFollow(FOLLOW_to_in_synpred77_ChemicalChunker672);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_ChemicalChunker

    // $ANTLR start synpred78_ChemicalChunker
    public final void synpred78_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:32: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred78_ChemicalChunker675);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred78_ChemicalChunker

    // $ANTLR start synpred84_ChemicalChunker
    public final void synpred84_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:71: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred84_ChemicalChunker694);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:77: ( md )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:77: md
        {
        pushFollow(FOLLOW_md_in_synpred85_ChemicalChunker697);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:81: ( adv )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred86_ChemicalChunker700);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:86: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred87_ChemicalChunker703);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:91: ( neg )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred88_ChemicalChunker706);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:49: ( md )*
        loop171:
        do {
            int alt171=2;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt171=1;
                }
                break;

            }

            switch (alt171) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred89_ChemicalChunker682);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop171;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:53: ( rbconj )?
        int alt172=2;
        switch ( input.LA(1) ) {
            case 174:
                {
                alt172=1;
                }
                break;
        }

        switch (alt172) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred89_ChemicalChunker685);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:61: ( adv )*
        loop173:
        do {
            int alt173=2;
            switch ( input.LA(1) ) {
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
                {
                alt173=1;
                }
                break;

            }

            switch (alt173) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred89_ChemicalChunker688);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop173;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:66: ( adj )?
        int alt174=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt174=1;
                }
                break;
        }

        switch (alt174) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred89_ChemicalChunker691);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:71: ( verb )+
        int cnt175=0;
        loop175:
        do {
            int alt175=2;
            switch ( input.LA(1) ) {
            case 55:
            case 56:
            case 57:
            case 58:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 70:
            case 72:
            case 73:
            case 74:
            case 75:
            case 77:
            case 79:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 87:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 96:
            case 97:
            case 98:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
                {
                alt175=1;
                }
                break;

            }

            switch (alt175) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred89_ChemicalChunker694);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt175 >= 1 ) break loop175;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(175, input);
                    throw eee;
            }
            cnt175++;
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:77: ( md )*
        loop176:
        do {
            int alt176=2;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt176=1;
                }
                break;

            }

            switch (alt176) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred89_ChemicalChunker697);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop176;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:81: ( adv )*
        loop177:
        do {
            int alt177=2;
            switch ( input.LA(1) ) {
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
                {
                alt177=1;
                }
                break;

            }

            switch (alt177) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred89_ChemicalChunker700);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop177;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:86: ( adj )?
        int alt178=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt178=1;
                }
                break;
        }

        switch (alt178) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred89_ChemicalChunker703);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:91: ( neg )?
        int alt179=2;
        switch ( input.LA(1) ) {
            case 103:
                {
                alt179=1;
                }
                break;
        }

        switch (alt179) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred89_ChemicalChunker706);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:99: ( inoff )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred90_ChemicalChunker712);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:107: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:107: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:107: ( cc )?
        int alt180=2;
        switch ( input.LA(1) ) {
            case 124:
                {
                alt180=1;
                }
                break;
        }

        switch (alt180) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred93_ChemicalChunker716);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:111: ( comma )?
        int alt181=2;
        switch ( input.LA(1) ) {
            case 101:
                {
                alt181=1;
                }
                break;
        }

        switch (alt181) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred93_ChemicalChunker719);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred93_ChemicalChunker722);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:58: ( degassMultiVerb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred103_ChemicalChunker752);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:174: ( vbdegass )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:174: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred115_ChemicalChunker776);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred136_ChemicalChunker
    public final void synpred136_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:22: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred136_ChemicalChunker847);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_ChemicalChunker

    // $ANTLR start synpred137_ChemicalChunker
    public final void synpred137_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:26: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred137_ChemicalChunker849);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred137_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:24: ( dash nounStructure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred142_ChemicalChunker870);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred142_ChemicalChunker872);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:22: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:22: citation
        {
        pushFollow(FOLLOW_citation_in_synpred144_ChemicalChunker885);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred145_ChemicalChunker
    public final void synpred145_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:31: ( cycles )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:31: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred145_ChemicalChunker887);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_ChemicalChunker

    // $ANTLR start synpred146_ChemicalChunker
    public final void synpred146_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:38: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred146_ChemicalChunker889);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_ChemicalChunker

    // $ANTLR start synpred147_ChemicalChunker
    public final void synpred147_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:47: ( apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:47: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred147_ChemicalChunker891);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_ChemicalChunker

    // $ANTLR start synpred148_ChemicalChunker
    public final void synpred148_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:57: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:57: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred148_ChemicalChunker893);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_ChemicalChunker

    // $ANTLR start synpred150_ChemicalChunker
    public final void synpred150_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:81: ( nnstate )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:81: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred150_ChemicalChunker897);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:89: ( nn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:89: nn
        {
        pushFollow(FOLLOW_nn_in_synpred151_ChemicalChunker899);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred154_ChemicalChunker
    public final void synpred154_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:100: ( nnadd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:100: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred154_ChemicalChunker905);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_ChemicalChunker

    // $ANTLR start synpred158_ChemicalChunker
    public final void synpred158_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:143: ( range )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:143: range
        {
        pushFollow(FOLLOW_range_in_synpred158_ChemicalChunker913);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_ChemicalChunker

    // $ANTLR start synpred159_ChemicalChunker
    public final void synpred159_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:149: ( amount )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:149: amount
        {
        pushFollow(FOLLOW_amount_in_synpred159_ChemicalChunker915);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_ChemicalChunker

    // $ANTLR start synpred160_ChemicalChunker
    public final void synpred160_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:156: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:156: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred160_ChemicalChunker917);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:189: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:189: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred164_ChemicalChunker925);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:198: ( nnchementity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:198: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred165_ChemicalChunker927);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred166_ChemicalChunker
    public final void synpred166_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:211: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:211: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred166_ChemicalChunker929);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:267: ( nnpressure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:267: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred172_ChemicalChunker941);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:358: ( wdt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:358: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred181_ChemicalChunker959);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:362: ( wp_poss )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:362: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred182_ChemicalChunker961);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:370: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:370: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred183_ChemicalChunker963);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:374: ( wps )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:374: wps
        {
        pushFollow(FOLLOW_wps_in_synpred184_ChemicalChunker965);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:426: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:426: number
        {
        pushFollow(FOLLOW_number_in_synpred190_ChemicalChunker977);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:433: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:433: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred191_ChemicalChunker979);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred205_ChemicalChunker
    public final void synpred205_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:10: ( numberratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred205_ChemicalChunker1073);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_ChemicalChunker

    // $ANTLR start synpred206_ChemicalChunker
    public final void synpred206_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:20: ( colon cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:20: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred206_ChemicalChunker1102);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred206_ChemicalChunker1104);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_ChemicalChunker

    // $ANTLR start synpred207_ChemicalChunker
    public final void synpred207_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:12: ( colon noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred207_ChemicalChunker1121);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred207_ChemicalChunker1123);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_ChemicalChunker

    // $ANTLR start synpred217_ChemicalChunker
    public final void synpred217_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:20: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred217_ChemicalChunker1279);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_ChemicalChunker

    // $ANTLR start synpred218_ChemicalChunker
    public final void synpred218_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:23: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred218_ChemicalChunker1281);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_ChemicalChunker

    // $ANTLR start synpred219_ChemicalChunker
    public final void synpred219_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:28: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:28: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred219_ChemicalChunker1283);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred219_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:44: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:44: stop
        {
        pushFollow(FOLLOW_stop_in_synpred221_ChemicalChunker1287);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:49: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:49: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred222_ChemicalChunker1289);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:63: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:63: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred223_ChemicalChunker1291);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred224_ChemicalChunker
    public final void synpred224_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:72: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:72: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred224_ChemicalChunker1293);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:93: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:93: sym
        {
        pushFollow(FOLLOW_sym_in_synpred226_ChemicalChunker1297);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:97: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:97: cd
        {
        pushFollow(FOLLOW_cd_in_synpred227_ChemicalChunker1299);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:100: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:100: noun
        {
        pushFollow(FOLLOW_noun_in_synpred228_ChemicalChunker1301);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:105: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:105: inof
        {
        pushFollow(FOLLOW_inof_in_synpred229_ChemicalChunker1303);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:110: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:110: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred230_ChemicalChunker1305);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:116: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:116: cd
        {
        pushFollow(FOLLOW_cd_in_synpred231_ChemicalChunker1307);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:119: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:119: comma
        {
        pushFollow(FOLLOW_comma_in_synpred232_ChemicalChunker1309);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:125: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:125: adj
        {
        pushFollow(FOLLOW_adj_in_synpred233_ChemicalChunker1311);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:142: ( minimixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:142: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred235_ChemicalChunker1319);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred236_ChemicalChunker
    public final void synpred236_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:154: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:154: fw
        {
        pushFollow(FOLLOW_fw_in_synpred236_ChemicalChunker1321);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_ChemicalChunker

    // $ANTLR start synpred237_ChemicalChunker
    public final void synpred237_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:157: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:157: verb
        {
        pushFollow(FOLLOW_verb_in_synpred237_ChemicalChunker1323);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:162: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:162: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred238_ChemicalChunker1325);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:175: ( nnyield )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:175: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred239_ChemicalChunker1327);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:186: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:186: stop
        {
        pushFollow(FOLLOW_stop_in_synpred241_ChemicalChunker1331);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred242_ChemicalChunker
    public final void synpred242_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:191: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:191: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred242_ChemicalChunker1333);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_ChemicalChunker

    // $ANTLR start synpred243_ChemicalChunker
    public final void synpred243_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:205: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:205: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred243_ChemicalChunker1335);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:214: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:214: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred244_ChemicalChunker1337);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:235: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:235: sym
        {
        pushFollow(FOLLOW_sym_in_synpred246_ChemicalChunker1341);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred247_ChemicalChunker
    public final void synpred247_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:239: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:239: cd
        {
        pushFollow(FOLLOW_cd_in_synpred247_ChemicalChunker1343);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:242: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:242: noun
        {
        pushFollow(FOLLOW_noun_in_synpred248_ChemicalChunker1345);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:247: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:247: inof
        {
        pushFollow(FOLLOW_inof_in_synpred249_ChemicalChunker1347);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:252: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:252: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred250_ChemicalChunker1349);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:258: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:258: cd
        {
        pushFollow(FOLLOW_cd_in_synpred251_ChemicalChunker1351);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:261: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:261: comma
        {
        pushFollow(FOLLOW_comma_in_synpred252_ChemicalChunker1353);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:267: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:267: adj
        {
        pushFollow(FOLLOW_adj_in_synpred253_ChemicalChunker1355);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:277: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:105:277: stop
        {
        pushFollow(FOLLOW_stop_in_synpred255_ChemicalChunker1359);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:24: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:24: fw
        {
        pushFollow(FOLLOW_fw_in_synpred257_ChemicalChunker1421);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:27: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:27: verb
        {
        pushFollow(FOLLOW_verb_in_synpred258_ChemicalChunker1423);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:32: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:32: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred259_ChemicalChunker1425);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:48: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:48: stop
        {
        pushFollow(FOLLOW_stop_in_synpred261_ChemicalChunker1429);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:53: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:53: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred262_ChemicalChunker1431);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:67: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:67: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred263_ChemicalChunker1433);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:76: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:76: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred264_ChemicalChunker1435);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:97: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:97: sym
        {
        pushFollow(FOLLOW_sym_in_synpred266_ChemicalChunker1439);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:101: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:101: cd
        {
        pushFollow(FOLLOW_cd_in_synpred267_ChemicalChunker1441);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:104: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:104: noun
        {
        pushFollow(FOLLOW_noun_in_synpred268_ChemicalChunker1443);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:109: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:109: inof
        {
        pushFollow(FOLLOW_inof_in_synpred269_ChemicalChunker1445);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:114: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:114: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred270_ChemicalChunker1447);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:120: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:120: cd
        {
        pushFollow(FOLLOW_cd_in_synpred271_ChemicalChunker1449);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:123: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:123: comma
        {
        pushFollow(FOLLOW_comma_in_synpred272_ChemicalChunker1451);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:129: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:129: adj
        {
        pushFollow(FOLLOW_adj_in_synpred273_ChemicalChunker1453);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:146: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:146: fw
        {
        pushFollow(FOLLOW_fw_in_synpred275_ChemicalChunker1461);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:149: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:149: verb
        {
        pushFollow(FOLLOW_verb_in_synpred276_ChemicalChunker1463);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:154: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:154: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred277_ChemicalChunker1465);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:167: ( nnyield )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:167: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred278_ChemicalChunker1467);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:178: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:178: stop
        {
        pushFollow(FOLLOW_stop_in_synpred280_ChemicalChunker1471);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:183: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:183: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred281_ChemicalChunker1473);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:197: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:197: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred282_ChemicalChunker1475);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:206: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:206: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred283_ChemicalChunker1477);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:227: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:227: sym
        {
        pushFollow(FOLLOW_sym_in_synpred285_ChemicalChunker1481);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:231: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:231: cd
        {
        pushFollow(FOLLOW_cd_in_synpred286_ChemicalChunker1483);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:234: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:234: noun
        {
        pushFollow(FOLLOW_noun_in_synpred287_ChemicalChunker1485);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:239: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:239: inof
        {
        pushFollow(FOLLOW_inof_in_synpred288_ChemicalChunker1487);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:244: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:244: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred289_ChemicalChunker1489);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:250: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:250: cd
        {
        pushFollow(FOLLOW_cd_in_synpred290_ChemicalChunker1491);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:253: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:253: comma
        {
        pushFollow(FOLLOW_comma_in_synpred291_ChemicalChunker1493);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:259: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:259: adj
        {
        pushFollow(FOLLOW_adj_in_synpred292_ChemicalChunker1495);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:269: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:269: stop
        {
        pushFollow(FOLLOW_stop_in_synpred294_ChemicalChunker1499);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred305_ChemicalChunker1552);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred306_ChemicalChunker1554);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred307_ChemicalChunker1556);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred308_ChemicalChunker1558);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred312_ChemicalChunker1662);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred317_ChemicalChunker
    public final void synpred317_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:35: ( nntime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred317_ChemicalChunker1678);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:16: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred319_ChemicalChunker1742);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:33: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred320_ChemicalChunker1747);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:5: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred338_ChemicalChunker1822);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred343_ChemicalChunker
    public final void synpred343_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:36: ( nntemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred343_ChemicalChunker1837);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_ChemicalChunker

    // $ANTLR start synpred350_ChemicalChunker
    public final void synpred350_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:15: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred350_ChemicalChunker2009);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_ChemicalChunker

    // $ANTLR start synpred351_ChemicalChunker
    public final void synpred351_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:15: ( ( conjunction )* apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:15: ( conjunction )* apparatus
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:15: ( conjunction )*
        loop183:
        do {
            int alt183=2;
            alt183 = dfa183.predict(input);
            switch (alt183) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred351_ChemicalChunker2009);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop183;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred351_ChemicalChunker2012);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred351_ChemicalChunker

    // $ANTLR start synpred354_ChemicalChunker
    public final void synpred354_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:22: ( nnApp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred354_ChemicalChunker2030);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_ChemicalChunker

    // $ANTLR start synpred355_ChemicalChunker
    public final void synpred355_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:4: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred355_ChemicalChunker2059);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:18: ( dash nnapparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred356_ChemicalChunker2063);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred356_ChemicalChunker2065);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:8: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred357_ChemicalChunker2079);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred358_ChemicalChunker
    public final void synpred358_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:17: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred358_ChemicalChunker2081);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_ChemicalChunker

    // $ANTLR start synpred359_ChemicalChunker
    public final void synpred359_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:21: ( nnpressure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred359_ChemicalChunker2083);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred359_ChemicalChunker

    // $ANTLR start synpred360_ChemicalChunker
    public final void synpred360_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:32: ( nnadd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred360_ChemicalChunker2085);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_ChemicalChunker

    // $ANTLR start synpred361_ChemicalChunker
    public final void synpred361_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:38: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred361_ChemicalChunker2087);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_ChemicalChunker

    // $ANTLR start synpred362_ChemicalChunker
    public final void synpred362_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:47: ( nnchementity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred362_ChemicalChunker2089);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_ChemicalChunker

    // $ANTLR start synpred363_ChemicalChunker
    public final void synpred363_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:60: ( nnstate )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred363_ChemicalChunker2091);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred363_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:68: ( nn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred364_ChemicalChunker2093);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred367_ChemicalChunker
    public final void synpred367_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:43: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred367_ChemicalChunker2119);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:25: ( measurementtypes )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred368_ChemicalChunker2131);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred374_ChemicalChunker
    public final void synpred374_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:24: ( oscarCompound1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:24: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred374_ChemicalChunker2183);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_ChemicalChunker

    // $ANTLR start synpred376_ChemicalChunker
    public final void synpred376_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:54: ( oscarCompound3 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:54: oscarCompound3
        {
        pushFollow(FOLLOW_oscarCompound3_in_synpred376_ChemicalChunker2187);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_ChemicalChunker

    // $ANTLR start synpred378_ChemicalChunker
    public final void synpred378_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:93: ( reference )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:93: reference
        {
        pushFollow(FOLLOW_reference_in_synpred378_ChemicalChunker2194);
        reference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred378_ChemicalChunker

    // $ANTLR start synpred379_ChemicalChunker
    public final void synpred379_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:27: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:27: dash
        {
        pushFollow(FOLLOW_dash_in_synpred379_ChemicalChunker2235);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_ChemicalChunker

    // $ANTLR start synpred381_ChemicalChunker
    public final void synpred381_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:27: ( dash oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:27: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred381_ChemicalChunker2268);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred381_ChemicalChunker2270);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:42: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:42: dash
        {
        pushFollow(FOLLOW_dash_in_synpred382_ChemicalChunker2274);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred383_ChemicalChunker2307);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred384_ChemicalChunker2332);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred385_ChemicalChunker2334);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred386_ChemicalChunker2350);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred387_ChemicalChunker
    public final void synpred387_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred387_ChemicalChunker2352);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:23: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred388_ChemicalChunker2356);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:40: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred389_ChemicalChunker2361);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:49: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred390_ChemicalChunker2363);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred391_ChemicalChunker
    public final void synpred391_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:58: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred391_ChemicalChunker2365);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_ChemicalChunker

    // $ANTLR start synpred392_ChemicalChunker
    public final void synpred392_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:18: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:18: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred392_ChemicalChunker2376);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:26: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:26: citation
        {
        pushFollow(FOLLOW_citation_in_synpred396_ChemicalChunker2463);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:35: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:35: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred397_ChemicalChunker2465);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:44: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:44: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred398_ChemicalChunker2467);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:18: ( jj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred399_ChemicalChunker2488);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:18: ( ( jj )? noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:18: ( jj )? noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:18: ( jj )?
        int alt184=2;
        switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA184_3 = input.LA(3);

                        if ( (synpred399_ChemicalChunker()) ) {
                            alt184=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt184) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred400_ChemicalChunker2488);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred400_ChemicalChunker2491);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred401_ChemicalChunker2504);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:4: ( unnamedmoleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:4: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred402_ChemicalChunker2518);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:29: ( unnamedmoleculeamount2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:29: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred403_ChemicalChunker2522);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:54: ( unnamedmoleculeamount3 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:54: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred404_ChemicalChunker2526);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred409_ChemicalChunker2635);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred409_ChemicalChunker2638);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred414_ChemicalChunker
    public final void synpred414_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:9: ( lrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred414_ChemicalChunker2686);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:13: ( rrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred415_ChemicalChunker2688);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:17: ( lsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred416_ChemicalChunker2690);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:22: ( rsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred417_ChemicalChunker2692);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA183 dfa183 = new DFA183(this);
    static final String DFA2_eotS =
        "\u0086\uffff";
    static final String DFA2_eofS =
        "\1\2\u0085\uffff";
    static final String DFA2_minS =
        "\1\13\1\0\1\uffff\u0081\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00c2\1\0\1\uffff\u0081\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\u0081\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\176\1\uffff\1\104\1\15\1\43\1\36\1\123\1\132\1\143\1"+
        "\147\1\107\1\136\1\167\1\154\1\41\1\121\1\42\1\73\1\56\1\103\1\22"+
        "\1\175\1\7\1\24\1\173\1\74\1\45\1\141\1\135\1\102\1\6\1\60\1\50"+
        "\1\152\1\17\1\40\1\35\1\142\1\161\1\u0080\1\3\1\2\1\66\1\46\1\125"+
        "\1\105\1\21\1\62\1\4\1\26\1\67\1\72\1\113\1\44\1\124\1\133\1\63"+
        "\1\116\1\57\1\20\1\53\1\111\1\150\1\174\1\77\1\165\1\10\1\34\1\31"+
        "\1\61\1\160\1\52\1\156\1\131\1\54\1\122\1\16\1\13\1\33\1\27\1\137"+
        "\1\145\1\37\1\5\1\70\1\164\1\117\1\112\1\153\1\101\1\71\1\171\1"+
        "\162\1\126\1\157\1\u0081\1\23\1\100\1\172\1\1\1\55\1\134\1\127\1"+
        "\114\1\110\1\166\1\155\1\144\1\0\1\75\1\51\1\130\1\106\1\177\1\151"+
        "\1\47\1\65\1\11\1\25\1\146\1\163\1\115\1\140\1\64\1\76\1\12\1\32"+
        "\1\170\1\14\1\30\1\120\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\33\1\13\1\14\1\41\1\71\2\uffff\1\111\1\112\1\110\1\116\1"+
            "\117\1\126\1\127\1\113\1\125\1\120\1\122\1\114\1\115\1\124\1"+
            "\123\1\121\1\40\1\21\1\42\1\uffff\1\6\1\51\1\43\1\44\1\60\1"+
            "\20\1\45\1\46\1\47\1\50\1\15\1\52\1\53\1\54\1\55\1\56\1\17\1"+
            "\140\1\177\1\141\1\144\1\16\1\67\1\145\1\146\1\147\1\150\1\151"+
            "\1\152\1\153\1\154\1\23\1\155\1\57\1\156\1\143\1\157\1\160\1"+
            "\72\1\161\1\73\1\162\1\74\1\163\1\164\1\142\1\165\1\166\1\75"+
            "\1\167\1\61\1\170\1\171\1\172\1\76\1\173\1\37\1\66\1\174\1\175"+
            "\1\176\1\35\1\u0083\1\1\1\uffff\1\u0080\1\uffff\1\2\1\uffff"+
            "\1\70\1\u0082\1\4\1\u0081\16\uffff\1\5\4\uffff\1\3\1\24\3\uffff"+
            "\1\104\1\77\1\100\4\uffff\1\107\1\7\1\10\1\11\1\12\1\130\1\uffff"+
            "\1\22\1\uffff\1\36\2\uffff\1\32\13\uffff\1\34\5\uffff\1\25\1"+
            "\26\1\131\1\27\1\31\1\uffff\1\30\1\101\1\106\1\uffff\1\132\1"+
            "\133\1\135\1\134\1\137\1\136\1\62\1\63\1\64\1\65\1\102\1\103"+
            "\1\105",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 36:13: ( sentence | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\u0084\uffff";
    static final String DFA4_eofS =
        "\1\14\u0083\uffff";
    static final String DFA4_minS =
        "\1\13\13\0\1\uffff\164\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00c2\13\0\1\uffff\164\0\3\uffff";
    static final String DFA4_acceptS =
        "\14\uffff\1\4\164\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\1\uffff\1\64\1\165\1\126\1\31\1\26\1\147\1\152\1\70\1\124\1\133"+
        "\1\146\1\uffff\1\140\1\161\1\25\1\13\1\112\1\5\1\123\1\1\1\4\1\166"+
        "\1\36\1\76\1\14\1\16\1\12\1\52\1\57\1\43\1\113\1\11\1\106\1\42\1"+
        "\131\1\125\1\175\1\22\1\65\1\110\1\135\1\51\1\21\1\37\1\50\1\62"+
        "\1\136\1\34\1\164\1\132\1\157\1\73\1\46\1\174\1\130\1\153\1\63\1"+
        "\55\1\72\1\156\1\102\1\101\1\17\1\155\1\104\1\115\1\116\1\44\1\41"+
        "\1\66\1\6\1\40\1\67\1\143\1\77\1\170\1\114\1\24\1\122\1\105\1\10"+
        "\1\154\1\150\1\117\1\23\1\127\1\74\1\32\1\173\1\141\1\121\1\71\1"+
        "\54\1\20\1\3\1\2\1\163\1\100\1\145\1\134\1\60\1\45\1\30\1\33\1\15"+
        "\1\171\1\144\1\162\1\111\1\75\1\7\1\35\1\151\1\103\1\47\1\53\1\0"+
        "\1\27\1\160\1\107\1\120\1\137\1\172\1\142\1\56\1\61\1\167\1\176"+
        "\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\34\1\12\1\13\1\42\1\72\2\uffff\1\112\1\113\1\111\1\117\1"+
            "\120\1\127\1\130\1\114\1\126\1\121\1\123\1\115\1\116\1\125\1"+
            "\124\1\122\1\41\1\27\1\43\1\uffff\1\22\1\52\1\44\1\45\1\61\1"+
            "\26\1\46\1\47\1\50\1\51\1\23\1\53\1\54\1\55\1\56\1\57\1\25\1"+
            "\140\1\177\1\141\1\144\1\24\1\70\1\145\1\146\1\147\1\150\1\151"+
            "\1\152\1\153\1\154\1\31\1\155\1\60\1\156\1\143\1\157\1\160\1"+
            "\73\1\161\1\74\1\162\1\75\1\163\1\164\1\142\1\165\1\166\1\76"+
            "\1\167\1\62\1\170\1\171\1\172\1\77\1\173\1\40\1\67\1\174\1\175"+
            "\1\176\1\36\1\14\1\15\1\uffff\1\u0080\1\uffff\1\14\1\uffff\1"+
            "\71\1\14\1\20\1\14\15\uffff\1\14\1\21\4\uffff\1\17\1\32\3\uffff"+
            "\1\105\1\100\1\101\4\uffff\1\110\1\6\1\7\1\10\1\11\1\131\1\uffff"+
            "\1\30\1\uffff\1\37\2\uffff\1\33\13\uffff\1\35\5\uffff\1\1\1"+
            "\2\1\16\1\3\1\5\1\uffff\1\4\1\102\1\107\1\uffff\1\132\1\133"+
            "\1\135\1\134\1\137\1\136\1\63\1\64\1\65\1\66\1\103\1\104\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\34\uffff";
    static final String DFA5_eofS =
        "\1\1\33\uffff";
    static final String DFA5_minS =
        "\1\13\1\uffff\14\12\14\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00c2\1\uffff\14\12\14\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\30\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\16\uffff\1\6\1\2\1\7\1\3\1\13\1\5\1\1\1\11\1\10\1\12\1\0\1\4\2"+
        "\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\6\1\7\2\1\2\uffff\23\1\1\uffff\76\1\1\15\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff"+
            "\3\1\4\uffff\1\1\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\1\1\5\uffff\1\10\1\11\1\1\1\12\1\14\1"+
            "\uffff\1\13\2\1\1\uffff\15\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 38:48: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\u008d\uffff";
    static final String DFA7_eofS =
        "\u008d\uffff";
    static final String DFA7_minS =
        "\1\13\1\0\1\uffff\3\0\1\uffff\10\0\6\uffff\1\0\3\uffff\1\0\30\uffff"+
        "\2\0\6\uffff\1\0\122\uffff";
    static final String DFA7_maxS =
        "\1\u00c2\1\0\1\uffff\3\0\1\uffff\10\0\6\uffff\1\0\3\uffff\1\0\30"+
        "\uffff\2\0\6\uffff\1\0\122\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\2\74\uffff\1\3\45\uffff\1\4\21\uffff\1\6\1\13\1\uffff"+
        "\1\15\1\16\1\17\1\22\4\uffff\1\23\1\1\1\21\1\20\1\11\1\10\1\5\1"+
        "\7\1\24\1\12\1\14";
    static final String DFA7_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\6\uffff\1\14\3\uffff\1\15\30\uffff\1\16\1\17\6\uffff"+
        "\1\20\122\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\25\1\13\1\14\1\2\1\63\2\uffff\20\145\3\2\1\uffff\20\2\1\15"+
            "\4\77\2\2\10\77\1\2\1\77\1\2\4\77\1\2\1\77\1\2\1\77\1\2\5\77"+
            "\1\2\1\77\1\2\3\77\1\2\1\77\1\31\1\2\3\77\1\2\1\172\1\4\1\uffff"+
            "\1\174\3\uffff\1\62\1\170\1\3\1\170\16\uffff\1\5\4\uffff\1\16"+
            "\1\167\3\uffff\1\2\1\1\1\2\4\uffff\1\145\1\7\1\10\1\11\1\12"+
            "\1\173\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\2\175\1\u0082\2\175\1\uffff\1\175\1\72\1\145\1\uffff\6\77\7"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "45:4: ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred23_ChemicalChunker()) ) {s = 120;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred29_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred28_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_21 = input.LA(1);

                         
                        int index7_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred28_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index7_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_25 = input.LA(1);

                         
                        int index7_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index7_25);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_50 = input.LA(1);

                         
                        int index7_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred23_ChemicalChunker()) ) {s = 120;}

                        else if ( (true) ) {s = 138;}

                         
                        input.seek(index7_50);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_51 = input.LA(1);

                         
                        int index7_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index7_51);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA7_58 = input.LA(1);

                         
                        int index7_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred24_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index7_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\106\uffff";
    static final String DFA8_eofS =
        "\106\uffff";
    static final String DFA8_minS =
        "\1\13\22\0\63\uffff";
    static final String DFA8_maxS =
        "\1\u00c2\22\0\63\uffff";
    static final String DFA8_acceptS =
        "\23\uffff\1\2\61\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\63\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\23\1\11\1\12\2\23\22\uffff\1\23\1\20\1\23\1\uffff\1\4\4\23"+
            "\1\17\4\23\1\13\5\23\1\16\4\uffff\1\14\1\23\10\uffff\1\22\1"+
            "\uffff\1\23\4\uffff\1\23\1\uffff\1\23\1\uffff\1\23\5\uffff\1"+
            "\23\1\uffff\1\23\3\uffff\1\23\1\uffff\2\23\3\uffff\1\23\1\uffff"+
            "\1\15\5\uffff\1\23\1\uffff\1\2\17\uffff\1\3\4\uffff\1\1\1\23"+
            "\3\uffff\3\23\5\uffff\1\5\1\6\1\7\1\10\2\uffff\1\21\1\uffff"+
            "\1\23\2\uffff\1\23\13\uffff\1\23\5\uffff\2\23\1\uffff\2\23\1"+
            "\uffff\2\23\10\uffff\7\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "51:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\17\uffff";
    static final String DFA11_eofS =
        "\17\uffff";
    static final String DFA11_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA11_maxS =
        "\1\u00c2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA11_specialS =
        "\11\uffff\1\4\1\0\1\1\1\2\1\3\1\5}>";
    static final String[] DFA11_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\2\10\1\uffff\2\10\1\uffff\1\10\1\1"+
            "\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\104\uffff";
    static final String DFA12_eofS =
        "\1\1\103\uffff";
    static final String DFA12_minS =
        "\1\13\1\uffff\76\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00c2\1\uffff\76\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\76\uffff\1\1\1\2\1\4\1\3";
    static final String DFA12_specialS =
        "\2\uffff\1\54\1\3\1\22\1\40\1\41\1\47\1\42\1\33\1\5\1\25\1\0\1\66"+
        "\1\43\1\2\1\60\1\74\1\57\1\16\1\70\1\27\1\75\1\62\1\52\1\21\1\44"+
        "\1\50\1\11\1\20\1\67\1\65\1\24\1\71\1\46\1\1\1\14\1\36\1\53\1\4"+
        "\1\30\1\55\1\34\1\35\1\26\1\15\1\17\1\6\1\23\1\10\1\63\1\13\1\73"+
        "\1\31\1\72\1\12\1\32\1\37\1\45\1\51\1\56\1\7\1\61\1\64\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\16\1\7\1\10\1\33\1\63\2\uffff\20\1\1\32\1\24\1\34\1\uffff"+
            "\1\14\1\43\1\35\1\36\1\52\1\23\1\37\1\40\1\41\1\42\1\21\1\44"+
            "\1\45\1\46\1\47\1\50\1\15\4\1\1\22\1\61\10\1\1\26\1\1\1\51\4"+
            "\1\1\64\1\1\1\65\1\1\1\66\5\1\1\67\1\1\1\53\3\1\1\70\1\1\1\31"+
            "\1\60\3\1\1\27\1\1\1\2\1\uffff\3\1\1\uffff\1\62\1\1\1\11\1\1"+
            "\15\uffff\1\1\1\13\4\uffff\1\20\1\1\3\uffff\1\76\1\71\1\72\4"+
            "\uffff\1\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\25\1\uffff\1\30\2\uffff"+
            "\1\12\13\uffff\1\17\5\uffff\5\1\1\uffff\1\1\1\73\1\1\1\uffff"+
            "\6\1\1\54\1\55\1\56\1\57\1\74\1\75\1\77",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 56:24: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA16_eotS =
        "\107\uffff";
    static final String DFA16_eofS =
        "\1\1\106\uffff";
    static final String DFA16_minS =
        "\1\13\1\uffff\104\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00c2\1\uffff\104\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\71\1\102\1\35\1\45\1\20\1\1\1\53\1\0\1\52\1\10\1\46\1"+
        "\36\1\64\1\7\1\31\1\74\1\34\1\75\1\70\1\62\1\40\1\51\1\76\1\32\1"+
        "\12\1\54\1\103\1\22\1\23\1\21\1\6\1\27\1\60\1\77\1\2\1\30\1\67\1"+
        "\43\1\17\1\50\1\25\1\47\1\11\1\37\1\55\1\4\1\57\1\3\1\5\1\101\1"+
        "\16\1\41\1\73\1\26\1\15\1\61\1\44\1\66\1\14\1\42\1\65\1\100\1\63"+
        "\1\13\1\72\1\56\1\24\1\33\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\33\1\13\1\14\1\41\1\71\2\uffff\20\1\1\40\1\27\1\42\1\uffff"+
            "\1\22\1\51\1\43\1\44\1\60\1\26\1\45\1\46\1\47\1\50\1\23\1\52"+
            "\1\53\1\54\1\55\1\56\1\25\4\1\1\24\1\67\10\1\1\31\1\1\1\57\4"+
            "\1\1\72\1\1\1\73\1\1\1\74\5\1\1\75\1\1\1\61\3\1\1\76\1\1\1\37"+
            "\1\66\3\1\1\35\1\1\1\16\1\uffff\3\1\1\uffff\1\70\1\1\1\20\1"+
            "\1\15\uffff\1\15\1\21\4\uffff\1\17\1\1\3\uffff\1\104\1\77\1"+
            "\100\4\uffff\1\1\1\7\1\10\1\11\1\12\1\1\1\uffff\1\30\1\uffff"+
            "\1\36\2\uffff\1\32\13\uffff\1\34\5\uffff\1\2\1\3\1\1\1\4\1\6"+
            "\1\uffff\1\5\1\101\1\1\1\uffff\6\1\1\62\1\63\1\64\1\65\1\102"+
            "\1\103\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\105\uffff";
    static final String DFA13_eofS =
        "\105\uffff";
    static final String DFA13_minS =
        "\1\13\17\uffff\1\0\64\uffff";
    static final String DFA13_maxS =
        "\1\u00c2\17\uffff\1\0\64\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\102\uffff\1\1";
    static final String DFA13_specialS =
        "\20\uffff\1\0\64\uffff}>";
    static final String[] DFA13_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\20\5\uffff"+
            "\1\1\1\uffff\1\1\16\uffff\1\104\1\1\4\uffff\1\1\4\uffff\3\1"+
            "\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1"+
            "\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00c2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\0\1\5\1\2\1\1\1\3\1\4}>";
    static final String[] DFA14_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\2\10\1\uffff\2\10\1\uffff\1\10\1\1"+
            "\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\103\uffff";
    static final String DFA15_eofS =
        "\103\uffff";
    static final String DFA15_minS =
        "\1\13\76\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00c2\76\0\4\uffff";
    static final String DFA15_acceptS =
        "\77\uffff\1\1\1\2\1\4\1\3";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\15\1\6\1\7\1\32\1\62\22\uffff\1\31\1\23\1\33\1\uffff\1\12"+
            "\1\42\1\34\1\35\1\51\1\22\1\36\1\37\1\40\1\41\1\20\1\43\1\44"+
            "\1\45\1\46\1\47\1\14\4\uffff\1\21\1\60\10\uffff\1\25\1\uffff"+
            "\1\50\4\uffff\1\63\1\uffff\1\64\1\uffff\1\65\5\uffff\1\66\1"+
            "\uffff\1\52\3\uffff\1\67\1\uffff\1\30\1\57\3\uffff\1\26\1\uffff"+
            "\1\13\5\uffff\1\61\1\uffff\1\1\17\uffff\1\11\4\uffff\1\17\4"+
            "\uffff\1\75\1\70\1\71\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\24\1"+
            "\uffff\1\27\2\uffff\1\10\13\uffff\1\16\14\uffff\1\72\10\uffff"+
            "\1\53\1\54\1\55\1\56\1\73\1\74\1\76",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "56:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\20\uffff";
    static final String DFA18_eofS =
        "\1\16\17\uffff";
    static final String DFA18_minS =
        "\1\13\15\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00c2\15\0\2\uffff";
    static final String DFA18_acceptS =
        "\16\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\6\1\5\1\14\1\4\1\3\1\12\1\2\1\10\1\0\1\7\1\13\1\11\1"+
        "\1\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\15\1\6\1\7\2\16\2\uffff\23\16\1\uffff\1\12\17\16\1\14\56"+
            "\16\1\13\1\uffff\3\16\1\uffff\2\16\1\1\1\16\15\uffff\1\16\1"+
            "\11\4\uffff\2\16\3\uffff\3\16\4\uffff\1\16\1\2\1\3\1\4\1\5\1"+
            "\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\10\13\uffff\1\16\5\uffff"+
            "\5\16\1\uffff\3\16\1\uffff\15\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "56:155: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\20\uffff";
    static final String DFA20_eofS =
        "\20\uffff";
    static final String DFA20_minS =
        "\1\13\10\0\7\uffff";
    static final String DFA20_maxS =
        "\1\u009a\10\0\7\uffff";
    static final String DFA20_acceptS =
        "\11\uffff\1\2\4\uffff\1\1\1\3";
    static final String DFA20_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\7\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\11\1\6\1\7\30\uffff\1\11\17\uffff\1\11\56\uffff\1\11\7\uffff"+
            "\1\1\17\uffff\1\11\21\uffff\1\2\1\3\1\4\1\5\7\uffff\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "58:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_2 = input.LA(1);

                         
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_6 = input.LA(1);

                         
                        int index20_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA21_eotS =
        "\17\uffff";
    static final String DFA21_eofS =
        "\17\uffff";
    static final String DFA21_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA21_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA21_specialS =
        "\10\uffff\1\5\1\0\1\3\1\1\1\4\1\2\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "61:8: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA23_eotS =
        "\15\uffff";
    static final String DFA23_eofS =
        "\15\uffff";
    static final String DFA23_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA23_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA23_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "61:18: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA25_eotS =
        "\17\uffff";
    static final String DFA25_eofS =
        "\17\uffff";
    static final String DFA25_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA25_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA25_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA25_specialS =
        "\10\uffff\1\5\1\3\1\2\1\1\1\4\1\0\1\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "61:58: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\15\uffff";
    static final String DFA27_eofS =
        "\15\uffff";
    static final String DFA27_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA27_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA27_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "61:68: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\17\uffff";
    static final String DFA29_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\1\1\2\1\5\1\0\1\3\1\4\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "63:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\15\uffff";
    static final String DFA31_eofS =
        "\15\uffff";
    static final String DFA31_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA31_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA31_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA31_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "63:14: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\17\uffff";
    static final String DFA33_eofS =
        "\17\uffff";
    static final String DFA33_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA33_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA33_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA33_specialS =
        "\10\uffff\1\5\1\0\1\2\1\1\1\4\1\3\1\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "63:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_11 = input.LA(1);

                         
                        int index33_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index33_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_10 = input.LA(1);

                         
                        int index33_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index33_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_13 = input.LA(1);

                         
                        int index33_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index33_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_12 = input.LA(1);

                         
                        int index33_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index33_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_8 = input.LA(1);

                         
                        int index33_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index33_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\15\uffff";
    static final String DFA35_eofS =
        "\15\uffff";
    static final String DFA35_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA35_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA35_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA35_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "63:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_1 = input.LA(1);

                         
                        int index35_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index35_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\16\uffff";
    static final String DFA38_eofS =
        "\16\uffff";
    static final String DFA38_minS =
        "\1\13\4\0\11\uffff";
    static final String DFA38_maxS =
        "\1\u0092\4\0\11\uffff";
    static final String DFA38_acceptS =
        "\5\uffff\1\1\6\uffff\1\2\1\3";
    static final String DFA38_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\11\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\14\2\5\30\uffff\1\3\4\uffff\1\15\12\uffff\1\5\56\uffff\1"+
            "\4\7\uffff\1\1\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "66:13: ( molecule | unnamedmolecule | nnchementity )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_1 = input.LA(1);

                         
                        int index38_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred69_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index38_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA38_2 = input.LA(1);

                         
                        int index38_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred69_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index38_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA38_3 = input.LA(1);

                         
                        int index38_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred69_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index38_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA38_4 = input.LA(1);

                         
                        int index38_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred69_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index38_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\17\uffff";
    static final String DFA40_eofS =
        "\17\uffff";
    static final String DFA40_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA40_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA40_specialS =
        "\10\uffff\1\1\1\0\1\5\1\3\1\4\1\2\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "66:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\15\uffff";
    static final String DFA42_eofS =
        "\15\uffff";
    static final String DFA42_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA42_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA42_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA42_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "66:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_1 = input.LA(1);

                         
                        int index42_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index42_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_2 = input.LA(1);

                         
                        int index42_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index42_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_3 = input.LA(1);

                         
                        int index42_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index42_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_4 = input.LA(1);

                         
                        int index42_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index42_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\67\uffff";
    static final String DFA58_eofS =
        "\1\1\66\uffff";
    static final String DFA58_minS =
        "\1\13\1\uffff\64\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00c2\1\uffff\64\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA58_specialS =
        "\2\uffff\1\25\1\32\1\26\1\46\1\37\1\5\1\52\1\42\1\15\1\34\1\31\1"+
        "\12\1\14\1\45\1\54\1\33\1\20\1\6\1\57\1\44\1\43\1\2\1\55\1\60\1"+
        "\53\1\0\1\11\1\61\1\47\1\63\1\36\1\24\1\7\1\30\1\3\1\35\1\21\1\62"+
        "\1\27\1\1\1\40\1\10\1\22\1\51\1\16\1\41\1\56\1\23\1\50\1\4\1\17"+
        "\1\13\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\1\1\13\1\14\2\1\2\uffff\23\1\1\uffff\21\1\1\26\1\65\1\27"+
            "\1\32\2\1\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1"+
            "\1\1\44\1\31\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\30"+
            "\1\53\1\54\1\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\16\1\1\1\62"+
            "\1\63\1\64\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\1\1\1\7\1\10\1\11\1\12"+
            "\1\17\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\15\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1\20\1\21\1\23"+
            "\1\22\1\25\1\24\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()+ loopback of 75:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_27 = input.LA(1);

                         
                        int index58_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_41 = input.LA(1);

                         
                        int index58_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_41);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_23 = input.LA(1);

                         
                        int index58_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_23);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA58_36 = input.LA(1);

                         
                        int index58_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA58_51 = input.LA(1);

                         
                        int index58_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_51);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA58_7 = input.LA(1);

                         
                        int index58_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA58_19 = input.LA(1);

                         
                        int index58_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_19);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA58_34 = input.LA(1);

                         
                        int index58_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_34);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA58_43 = input.LA(1);

                         
                        int index58_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_43);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA58_28 = input.LA(1);

                         
                        int index58_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA58_53 = input.LA(1);

                         
                        int index58_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA58_10 = input.LA(1);

                         
                        int index58_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_10);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA58_46 = input.LA(1);

                         
                        int index58_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_46);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA58_52 = input.LA(1);

                         
                        int index58_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA58_18 = input.LA(1);

                         
                        int index58_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA58_38 = input.LA(1);

                         
                        int index58_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_38);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA58_44 = input.LA(1);

                         
                        int index58_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_44);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA58_49 = input.LA(1);

                         
                        int index58_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_49);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA58_33 = input.LA(1);

                         
                        int index58_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_33);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA58_2 = input.LA(1);

                         
                        int index58_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_2);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA58_4 = input.LA(1);

                         
                        int index58_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_4);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA58_40 = input.LA(1);

                         
                        int index58_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_40);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA58_35 = input.LA(1);

                         
                        int index58_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_35);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA58_12 = input.LA(1);

                         
                        int index58_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_12);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA58_3 = input.LA(1);

                         
                        int index58_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_3);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_17);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA58_11 = input.LA(1);

                         
                        int index58_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_11);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA58_37 = input.LA(1);

                         
                        int index58_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_37);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA58_32 = input.LA(1);

                         
                        int index58_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA58_6 = input.LA(1);

                         
                        int index58_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_6);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA58_42 = input.LA(1);

                         
                        int index58_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_42);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA58_47 = input.LA(1);

                         
                        int index58_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_47);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA58_9 = input.LA(1);

                         
                        int index58_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_9);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA58_22 = input.LA(1);

                         
                        int index58_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_22);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA58_21 = input.LA(1);

                         
                        int index58_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_21);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA58_5 = input.LA(1);

                         
                        int index58_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_5);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA58_30 = input.LA(1);

                         
                        int index58_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_30);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA58_50 = input.LA(1);

                         
                        int index58_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_50);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA58_45 = input.LA(1);

                         
                        int index58_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_45);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA58_8 = input.LA(1);

                         
                        int index58_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_8);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA58_26 = input.LA(1);

                         
                        int index58_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_26);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA58_16 = input.LA(1);

                         
                        int index58_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_16);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA58_24 = input.LA(1);

                         
                        int index58_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_24);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA58_48 = input.LA(1);

                         
                        int index58_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA58_20 = input.LA(1);

                         
                        int index58_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_20);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA58_25 = input.LA(1);

                         
                        int index58_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_25);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA58_29 = input.LA(1);

                         
                        int index58_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_29);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA58_39 = input.LA(1);

                         
                        int index58_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_39);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA58_31 = input.LA(1);

                         
                        int index58_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA53_eotS =
        "\52\uffff";
    static final String DFA53_eofS =
        "\1\1\51\uffff";
    static final String DFA53_minS =
        "\1\13\1\uffff\47\0\1\uffff";
    static final String DFA53_maxS =
        "\1\u00c2\1\uffff\47\0\1\uffff";
    static final String DFA53_acceptS =
        "\1\uffff\1\2\47\uffff\1\1";
    static final String DFA53_specialS =
        "\2\uffff\1\24\1\3\1\26\1\31\1\12\1\32\1\6\1\42\1\21\1\33\1\22\1"+
        "\2\1\13\1\43\1\25\1\0\1\27\1\5\1\35\1\10\1\11\1\7\1\1\1\23\1\30"+
        "\1\45\1\41\1\4\1\40\1\20\1\15\1\37\1\14\1\44\1\34\1\36\1\16\1\46"+
        "\1\17\1\uffff}>";
    static final String[] DFA53_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\21\1\1\11\1\50\1\12\1\15\2\1\1\16"+
            "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\1\1\26\1\1\1\27\1\14\1"+
            "\30\1\31\1\1\1\32\1\1\1\33\1\1\1\34\1\35\1\13\1\36\1\37\1\1"+
            "\1\40\1\1\1\41\1\42\1\43\1\1\1\44\1\2\1\1\1\45\1\46\1\47\3\1"+
            "\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\2"+
            "\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1\6"+
            "\1\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "()+ loopback of 75:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_17 = input.LA(1);

                         
                        int index53_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA53_24 = input.LA(1);

                         
                        int index53_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA53_13 = input.LA(1);

                         
                        int index53_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA53_3 = input.LA(1);

                         
                        int index53_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA53_29 = input.LA(1);

                         
                        int index53_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_29);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA53_19 = input.LA(1);

                         
                        int index53_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA53_8 = input.LA(1);

                         
                        int index53_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA53_23 = input.LA(1);

                         
                        int index53_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA53_21 = input.LA(1);

                         
                        int index53_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_21);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA53_22 = input.LA(1);

                         
                        int index53_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_22);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA53_6 = input.LA(1);

                         
                        int index53_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_6);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA53_14 = input.LA(1);

                         
                        int index53_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA53_34 = input.LA(1);

                         
                        int index53_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_34);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA53_32 = input.LA(1);

                         
                        int index53_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_32);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA53_38 = input.LA(1);

                         
                        int index53_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_38);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA53_40 = input.LA(1);

                         
                        int index53_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_40);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA53_31 = input.LA(1);

                         
                        int index53_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_31);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA53_10 = input.LA(1);

                         
                        int index53_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_10);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA53_12 = input.LA(1);

                         
                        int index53_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_12);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA53_25 = input.LA(1);

                         
                        int index53_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA53_2 = input.LA(1);

                         
                        int index53_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_2);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA53_16 = input.LA(1);

                         
                        int index53_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_16);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA53_4 = input.LA(1);

                         
                        int index53_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_4);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA53_18 = input.LA(1);

                         
                        int index53_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_18);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA53_26 = input.LA(1);

                         
                        int index53_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA53_5 = input.LA(1);

                         
                        int index53_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_5);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA53_7 = input.LA(1);

                         
                        int index53_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_7);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA53_11 = input.LA(1);

                         
                        int index53_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_11);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA53_36 = input.LA(1);

                         
                        int index53_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_36);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA53_20 = input.LA(1);

                         
                        int index53_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_20);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA53_37 = input.LA(1);

                         
                        int index53_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_37);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA53_33 = input.LA(1);

                         
                        int index53_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA53_30 = input.LA(1);

                         
                        int index53_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_30);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA53_28 = input.LA(1);

                         
                        int index53_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_28);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA53_9 = input.LA(1);

                         
                        int index53_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_9);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA53_15 = input.LA(1);

                         
                        int index53_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_15);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA53_35 = input.LA(1);

                         
                        int index53_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_35);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA53_27 = input.LA(1);

                         
                        int index53_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_27);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA53_39 = input.LA(1);

                         
                        int index53_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA55_eotS =
        "\15\uffff";
    static final String DFA55_eofS =
        "\1\1\14\uffff";
    static final String DFA55_minS =
        "\1\13\1\uffff\5\12\5\0\1\uffff";
    static final String DFA55_maxS =
        "\1\u00c2\1\uffff\5\12\5\0\1\uffff";
    static final String DFA55_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA55_specialS =
        "\7\uffff\1\3\1\1\1\0\1\2\1\4\1\uffff}>";
    static final String[] DFA55_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\100\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\1\2\1\3\1"+
            "\1\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA55_9 = input.LA(1);

                         
                        int index55_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA55_8 = input.LA(1);

                         
                        int index55_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA55_10 = input.LA(1);

                         
                        int index55_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA55_7 = input.LA(1);

                         
                        int index55_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA55_11 = input.LA(1);

                         
                        int index55_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 55, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\17\uffff";
    static final String DFA56_eofS =
        "\1\7\16\uffff";
    static final String DFA56_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA56_maxS =
        "\1\u00c2\6\12\1\uffff\6\0\1\uffff";
    static final String DFA56_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA56_specialS =
        "\10\uffff\1\0\1\1\1\3\1\2\1\4\1\5\1\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\23\7\1\uffff\100\7\1\uffff\1\7\1\uffff"+
            "\1\7\1\uffff\4\7\15\uffff\2\7\4\uffff\2\7\3\uffff\3\7\4\uffff"+
            "\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\13\uffff\1\7\5\uffff\5\7\1\uffff\3\7\1\uffff\15\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "75:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_8 = input.LA(1);

                         
                        int index56_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index56_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA62_eotS =
        "\u0087\uffff";
    static final String DFA62_eofS =
        "\1\14\u0086\uffff";
    static final String DFA62_minS =
        "\1\13\13\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\21\uffff\1\0\2\uffff"+
        "\1\0\40\uffff\22\0\47\uffff\1\0\3\uffff";
    static final String DFA62_maxS =
        "\1\u00c2\13\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\21\uffff\1\0\2"+
        "\uffff\1\0\40\uffff\22\0\47\uffff\1\0\3\uffff";
    static final String DFA62_acceptS =
        "\14\uffff\1\2\171\uffff\1\1";
    static final String DFA62_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff"+
        "\1\13\1\14\3\uffff\1\15\1\uffff\1\16\21\uffff\1\17\2\uffff\1\20"+
        "\40\uffff\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\47\uffff\1\43\3\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\14\1\12\1\13\2\14\2\uffff\1\115\1\116\1\114\1\122\1\123\1"+
            "\132\1\133\1\117\1\131\1\124\1\126\1\120\1\121\1\130\1\127\1"+
            "\125\2\14\1\46\1\uffff\6\14\1\51\70\14\1\16\1\uffff\1\u0083"+
            "\1\uffff\1\14\1\uffff\4\14\15\uffff\1\15\1\24\4\uffff\1\22\1"+
            "\14\3\uffff\3\14\4\uffff\1\113\1\6\1\7\1\10\1\11\1\14\1\uffff"+
            "\1\14\1\uffff\1\14\2\uffff\1\14\13\uffff\1\14\5\uffff\1\1\1"+
            "\2\1\14\1\3\1\5\1\uffff\1\4\1\14\1\112\1\uffff\15\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA62_1 = input.LA(1);

                         
                        int index62_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA62_2 = input.LA(1);

                         
                        int index62_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA62_3 = input.LA(1);

                         
                        int index62_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA62_4 = input.LA(1);

                         
                        int index62_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA62_5 = input.LA(1);

                         
                        int index62_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA62_6 = input.LA(1);

                         
                        int index62_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA62_7 = input.LA(1);

                         
                        int index62_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA62_8 = input.LA(1);

                         
                        int index62_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA62_9 = input.LA(1);

                         
                        int index62_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA62_10 = input.LA(1);

                         
                        int index62_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA62_11 = input.LA(1);

                         
                        int index62_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA62_13 = input.LA(1);

                         
                        int index62_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA62_14 = input.LA(1);

                         
                        int index62_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA62_18 = input.LA(1);

                         
                        int index62_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_18);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA62_20 = input.LA(1);

                         
                        int index62_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA62_38 = input.LA(1);

                         
                        int index62_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_38);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA62_41 = input.LA(1);

                         
                        int index62_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_41);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA62_74 = input.LA(1);

                         
                        int index62_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_74);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA62_75 = input.LA(1);

                         
                        int index62_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_75);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA62_76 = input.LA(1);

                         
                        int index62_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_76);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA62_77 = input.LA(1);

                         
                        int index62_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_77);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA62_78 = input.LA(1);

                         
                        int index62_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_78);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA62_79 = input.LA(1);

                         
                        int index62_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_79);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA62_80 = input.LA(1);

                         
                        int index62_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_80);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA62_81 = input.LA(1);

                         
                        int index62_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_81);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA62_82 = input.LA(1);

                         
                        int index62_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_82);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA62_83 = input.LA(1);

                         
                        int index62_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_83);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA62_84 = input.LA(1);

                         
                        int index62_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_84);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA62_85 = input.LA(1);

                         
                        int index62_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_85);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA62_86 = input.LA(1);

                         
                        int index62_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_86);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA62_87 = input.LA(1);

                         
                        int index62_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_87);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA62_88 = input.LA(1);

                         
                        int index62_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_88);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA62_89 = input.LA(1);

                         
                        int index62_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_89);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA62_90 = input.LA(1);

                         
                        int index62_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_90);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA62_91 = input.LA(1);

                         
                        int index62_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_91);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA62_131 = input.LA(1);

                         
                        int index62_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index62_131);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 62, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA63_eotS =
        "\57\uffff";
    static final String DFA63_eofS =
        "\50\uffff\1\51\2\uffff\1\51\3\uffff";
    static final String DFA63_minS =
        "\1\67\11\uffff\1\12\35\uffff\1\13\1\uffff\1\12\1\13\1\12\1\0\1\uffff";
    static final String DFA63_maxS =
        "\1\u00bb\11\uffff\1\12\35\uffff\1\u00c2\1\uffff\1\12\1\u00c2\1\12"+
        "\1\0\1\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\27\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\uffff\1\26\4\uffff\1\12";
    static final String DFA63_specialS =
        "\55\uffff\1\0\1\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\7\1\47\1\10\1\13\2\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\uffff\1\24\1\uffff\1\25\1\12\1\26\1\27\1\uffff\1"+
            "\30\1\uffff\1\31\1\uffff\1\32\1\33\1\11\1\34\1\35\1\uffff\1"+
            "\36\1\uffff\1\37\1\40\1\41\1\uffff\1\42\1\43\1\uffff\1\44\1"+
            "\45\1\46\123\uffff\1\1\1\2\1\4\1\3\1\6\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\5\51\2\uffff\23\51\1\uffff\100\51\1\uffff\3\51\1\uffff\4\51"+
            "\15\uffff\1\52\1\51\4\uffff\2\51\3\uffff\3\51\4\uffff\6\51\1"+
            "\uffff\1\51\1\uffff\1\51\2\uffff\1\51\13\uffff\1\51\5\uffff"+
            "\5\51\1\uffff\3\51\1\uffff\15\51",
            "",
            "\1\53",
            "\5\51\2\uffff\23\51\1\uffff\33\51\1\54\44\51\1\uffff\1\51\1"+
            "\uffff\1\51\1\uffff\4\51\15\uffff\2\51\4\uffff\2\51\3\uffff"+
            "\3\51\4\uffff\6\51\1\uffff\1\51\1\uffff\1\51\2\uffff\1\51\13"+
            "\uffff\1\51\5\uffff\5\51\1\uffff\3\51\1\uffff\15\51",
            "\1\55",
            "\1\uffff",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "76:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA63_45 = input.LA(1);

                         
                        int index63_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 46;}

                        else if ( (synpred115_ChemicalChunker()) ) {s = 41;}

                         
                        input.seek(index63_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA65_eotS =
        "\14\uffff";
    static final String DFA65_eofS =
        "\14\uffff";
    static final String DFA65_minS =
        "\1\u0087\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA65_maxS =
        "\1\u00c2\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA65_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\7\64\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "81:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred137_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA67_eotS =
        "\123\uffff";
    static final String DFA67_eofS =
        "\123\uffff";
    static final String DFA67_minS =
        "\1\13\1\uffff\13\0\1\uffff\5\0\1\uffff\1\0\26\uffff\4\0\44\uffff";
    static final String DFA67_maxS =
        "\1\u00c2\1\uffff\13\0\1\uffff\5\0\1\uffff\1\0\26\uffff\4\0\44\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\1\13\uffff\1\5\7\uffff\1\7\1\12\1\13\1\15\1\16\1\17\1"+
        "\23\1\24\1\25\1\31\1\32\1\33\1\34\1\35\1\37\1\40\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\4\uffff\1\53\1\54\1\55\1\56\1\57\1\62\1\63\1\64"+
        "\1\65\1\66\1\67\1\70\1\71\3\uffff\1\2\1\4\1\6\1\22\1\26\1\61\1\3"+
        "\1\20\1\21\1\30\1\60\1\36\1\14\1\27\1\10\1\11\1\47\1\50\1\51\1\52";
    static final String DFA67_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff"+
        "\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\26\uffff\1\21\1\22\1\23\1"+
        "\24\44\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\24\1\12\1\13\1\32\1\62\22\uffff\1\31\1\21\1\33\1\uffff\1"+
            "\5\1\42\1\34\1\35\1\51\1\20\1\36\1\37\1\40\1\41\1\16\1\43\1"+
            "\44\1\45\1\46\1\47\1\14\4\uffff\1\17\1\60\10\uffff\1\15\1\uffff"+
            "\1\50\4\uffff\1\63\1\uffff\1\64\1\uffff\1\65\5\uffff\1\66\1"+
            "\uffff\1\52\3\uffff\1\67\1\uffff\1\30\1\57\3\uffff\1\25\1\uffff"+
            "\1\3\5\uffff\1\61\1\uffff\1\2\17\uffff\1\4\4\uffff\1\15\4\uffff"+
            "\1\73\1\70\1\71\5\uffff\1\6\1\7\1\10\1\11\2\uffff\1\22\1\uffff"+
            "\1\26\2\uffff\1\27\13\uffff\1\1\14\uffff\1\72\10\uffff\1\53"+
            "\1\54\1\55\1\56\3\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "84:1: nounStructure : ( prp | citation | cycles | molecule | apparatus | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA67_2 = input.LA(1);

                         
                        int index67_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred148_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred160_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred164_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA67_3 = input.LA(1);

                         
                        int index67_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred148_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred160_ChemicalChunker()) ) {s = 66;}

                         
                        input.seek(index67_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA67_4 = input.LA(1);

                         
                        int index67_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred148_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred158_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred159_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred164_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index67_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA67_5 = input.LA(1);

                         
                        int index67_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred148_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred164_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index67_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA67_6 = input.LA(1);

                         
                        int index67_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA67_7 = input.LA(1);

                         
                        int index67_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA67_8 = input.LA(1);

                         
                        int index67_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA67_9 = input.LA(1);

                         
                        int index67_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA67_10 = input.LA(1);

                         
                        int index67_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA67_11 = input.LA(1);

                         
                        int index67_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA67_12 = input.LA(1);

                         
                        int index67_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index67_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA67_14 = input.LA(1);

                         
                        int index67_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index67_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA67_15 = input.LA(1);

                         
                        int index67_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index67_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA67_16 = input.LA(1);

                         
                        int index67_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index67_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA67_17 = input.LA(1);

                         
                        int index67_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred150_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index67_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA67_18 = input.LA(1);

                         
                        int index67_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index67_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA67_20 = input.LA(1);

                         
                        int index67_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index67_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA67_43 = input.LA(1);

                         
                        int index67_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 79;}

                        else if ( (true) ) {s = 59;}

                         
                        input.seek(index67_43);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA67_44 = input.LA(1);

                         
                        int index67_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 59;}

                         
                        input.seek(index67_44);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA67_45 = input.LA(1);

                         
                        int index67_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 81;}

                        else if ( (true) ) {s = 59;}

                         
                        input.seek(index67_45);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA67_46 = input.LA(1);

                         
                        int index67_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 82;}

                        else if ( (true) ) {s = 59;}

                         
                        input.seek(index67_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 67, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA79_eotS =
        "\u0088\uffff";
    static final String DFA79_eofS =
        "\u0088\uffff";
    static final String DFA79_minS =
        "\1\13\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\57\uffff"+
        "\1\0\37\uffff";
    static final String DFA79_maxS =
        "\1\u00c2\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\57"+
        "\uffff\1\0\37\uffff";
    static final String DFA79_acceptS =
        "\2\uffff\1\2\50\uffff\1\4\13\uffff\1\11\1\uffff\1\14\57\uffff\1"+
        "\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\21\1"+
        "\20\1\12\1\15";
    static final String DFA79_specialS =
        "\1\uffff\1\0\42\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\57\uffff\1\20"+
        "\37\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\66\1\61\1\62\2\71\2\uffff\11\151\1\150\6\151\3\71\1\uffff"+
            "\1\52\17\71\1\63\4\2\2\71\10\2\1\71\1\2\1\71\4\2\1\71\1\2\1"+
            "\71\1\2\1\71\5\2\1\71\1\2\1\71\3\2\1\71\1\2\1\44\1\71\3\2\1"+
            "\71\1\172\1\65\2\uffff\1\67\1\54\1\uffff\1\71\1\uffff\1\64\17"+
            "\uffff\1\51\4\uffff\1\71\4\uffff\1\71\1\1\1\71\4\uffff\1\151"+
            "\1\55\1\56\1\57\1\60\1\53\1\uffff\1\71\1\uffff\1\71\2\uffff"+
            "\1\71\13\uffff\1\71\14\uffff\1\70\1\151\1\uffff\6\2\7\71",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "105:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_1 = input.LA(1);

                         
                        int index79_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index79_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA79_36 = input.LA(1);

                         
                        int index79_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred218_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index79_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA79_41 = input.LA(1);

                         
                        int index79_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred224_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index79_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA79_42 = input.LA(1);

                         
                        int index79_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred224_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index79_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA79_44 = input.LA(1);

                         
                        int index79_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 130;}

                         
                        input.seek(index79_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA79_45 = input.LA(1);

                         
                        int index79_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index79_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA79_46 = input.LA(1);

                         
                        int index79_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index79_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA79_47 = input.LA(1);

                         
                        int index79_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index79_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA79_48 = input.LA(1);

                         
                        int index79_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index79_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA79_49 = input.LA(1);

                         
                        int index79_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index79_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA79_50 = input.LA(1);

                         
                        int index79_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index79_50);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA79_51 = input.LA(1);

                         
                        int index79_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index79_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA79_52 = input.LA(1);

                         
                        int index79_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred224_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index79_52);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA79_53 = input.LA(1);

                         
                        int index79_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred224_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred232_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index79_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA79_54 = input.LA(1);

                         
                        int index79_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index79_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA79_56 = input.LA(1);

                         
                        int index79_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index79_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA79_104 = input.LA(1);

                         
                        int index79_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 105;}

                         
                        input.seek(index79_104);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA80_eotS =
        "\u008b\uffff";
    static final String DFA80_eofS =
        "\u008b\uffff";
    static final String DFA80_minS =
        "\1\13\1\uffff\3\0\42\uffff\1\0\4\uffff\3\0\1\uffff\11\0\1\uffff"+
        "\1\0\56\uffff\1\0\41\uffff";
    static final String DFA80_maxS =
        "\1\u00c2\1\uffff\3\0\42\uffff\1\0\4\uffff\3\0\1\uffff\11\0\1\uffff"+
        "\1\0\56\uffff\1\0\41\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\26\3\uffff\1\3\51\uffff\1\6\11\uffff\1\13\1\uffff\1\16"+
        "\56\uffff\1\20\20\uffff\1\24\1\1\1\11\1\12\1\22\1\10\1\2\1\4\1\15"+
        "\1\21\1\5\1\7\1\25\1\23\1\14\1\17";
    static final String DFA80_specialS =
        "\2\uffff\1\0\1\1\1\2\42\uffff\1\3\4\uffff\1\4\1\5\1\6\1\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\56\uffff"+
        "\1\21\41\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\70\1\65\1\66\2\73\2\uffff\11\152\1\151\6\152\3\73\1\uffff"+
            "\1\55\17\73\1\67\4\5\2\73\10\5\1\73\1\5\1\73\4\5\1\73\1\5\1"+
            "\73\1\5\1\73\5\5\1\73\1\5\1\73\3\5\1\73\1\5\1\47\1\73\3\5\1"+
            "\56\1\173\1\2\2\uffff\1\71\1\60\1\uffff\1\73\1\uffff\1\3\1\1"+
            "\16\uffff\1\54\4\uffff\1\73\4\uffff\1\73\1\4\1\73\4\uffff\1"+
            "\152\1\61\1\62\1\63\1\64\1\57\1\uffff\1\73\1\uffff\1\73\2\uffff"+
            "\1\73\13\uffff\1\73\14\uffff\1\72\1\152\1\uffff\6\5\7\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "()+ loopback of 105:141: ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_2 = input.LA(1);

                         
                        int index80_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred252_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index80_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA80_3 = input.LA(1);

                         
                        int index80_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA80_4 = input.LA(1);

                         
                        int index80_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA80_39 = input.LA(1);

                         
                        int index80_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_39);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA80_44 = input.LA(1);

                         
                        int index80_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred251_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index80_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA80_45 = input.LA(1);

                         
                        int index80_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA80_46 = input.LA(1);

                         
                        int index80_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA80_48 = input.LA(1);

                         
                        int index80_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred255_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index80_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA80_49 = input.LA(1);

                         
                        int index80_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index80_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA80_50 = input.LA(1);

                         
                        int index80_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index80_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA80_51 = input.LA(1);

                         
                        int index80_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index80_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA80_52 = input.LA(1);

                         
                        int index80_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index80_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA80_53 = input.LA(1);

                         
                        int index80_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index80_53);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA80_54 = input.LA(1);

                         
                        int index80_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred253_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index80_54);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA80_55 = input.LA(1);

                         
                        int index80_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_55);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA80_56 = input.LA(1);

                         
                        int index80_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA80_58 = input.LA(1);

                         
                        int index80_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index80_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA80_105 = input.LA(1);

                         
                        int index80_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 106;}

                         
                        input.seek(index80_105);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\u0088\uffff";
    static final String DFA82_eofS =
        "\u0088\uffff";
    static final String DFA82_minS =
        "\1\13\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\57\uffff"+
        "\1\0\37\uffff";
    static final String DFA82_maxS =
        "\1\u00c2\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\57"+
        "\uffff\1\0\37\uffff";
    static final String DFA82_acceptS =
        "\2\uffff\1\2\50\uffff\1\4\13\uffff\1\11\1\uffff\1\14\57\uffff\1"+
        "\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\21\1"+
        "\20\1\12\1\15";
    static final String DFA82_specialS =
        "\1\uffff\1\0\42\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\57\uffff\1\20"+
        "\37\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\66\1\61\1\62\2\71\2\uffff\11\151\1\150\6\151\3\71\1\uffff"+
            "\1\52\17\71\1\63\4\2\2\71\10\2\1\71\1\2\1\71\4\2\1\71\1\2\1"+
            "\71\1\2\1\71\5\2\1\71\1\2\1\71\3\2\1\71\1\2\1\44\1\71\3\2\1"+
            "\71\1\172\1\65\2\uffff\1\67\1\54\1\uffff\1\71\1\uffff\1\64\17"+
            "\uffff\1\51\4\uffff\1\71\4\uffff\1\71\1\1\1\71\4\uffff\1\151"+
            "\1\55\1\56\1\57\1\60\1\53\1\uffff\1\71\1\uffff\1\71\2\uffff"+
            "\1\71\13\uffff\1\71\14\uffff\1\70\1\151\1\uffff\6\2\7\71",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "110:23: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_1 = input.LA(1);

                         
                        int index82_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index82_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA82_36 = input.LA(1);

                         
                        int index82_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index82_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA82_41 = input.LA(1);

                         
                        int index82_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred267_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred271_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index82_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA82_42 = input.LA(1);

                         
                        int index82_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index82_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA82_44 = input.LA(1);

                         
                        int index82_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 130;}

                         
                        input.seek(index82_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA82_45 = input.LA(1);

                         
                        int index82_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index82_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA82_46 = input.LA(1);

                         
                        int index82_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index82_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA82_47 = input.LA(1);

                         
                        int index82_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index82_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA82_48 = input.LA(1);

                         
                        int index82_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index82_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA82_49 = input.LA(1);

                         
                        int index82_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index82_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA82_50 = input.LA(1);

                         
                        int index82_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index82_50);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA82_51 = input.LA(1);

                         
                        int index82_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index82_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA82_52 = input.LA(1);

                         
                        int index82_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index82_52);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA82_53 = input.LA(1);

                         
                        int index82_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred272_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index82_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA82_54 = input.LA(1);

                         
                        int index82_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index82_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA82_56 = input.LA(1);

                         
                        int index82_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index82_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA82_104 = input.LA(1);

                         
                        int index82_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred270_ChemicalChunker()) ) {s = 105;}

                         
                        input.seek(index82_104);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\u008a\uffff";
    static final String DFA83_eofS =
        "\1\1\u0089\uffff";
    static final String DFA83_minS =
        "\1\13\1\uffff\1\0\42\uffff\1\0\4\uffff\3\0\1\uffff\13\0\1\uffff"+
        "\1\0\56\uffff\1\0\40\uffff";
    static final String DFA83_maxS =
        "\1\u00c2\1\uffff\1\0\42\uffff\1\0\4\uffff\3\0\1\uffff\13\0\1\uffff"+
        "\1\0\56\uffff\1\0\40\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\25\1\uffff\1\2\51\uffff\1\5\13\uffff\1\12\1\uffff\1\15"+
        "\56\uffff\1\17\20\uffff\1\23\1\1\1\3\1\10\1\11\1\14\1\20\1\4\1\6"+
        "\1\24\1\7\1\22\1\21\1\13\1\16";
    static final String DFA83_specialS =
        "\2\uffff\1\0\42\uffff\1\1\4\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\56\uffff"+
        "\1\21\40\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\70\1\63\1\64\2\73\2\uffff\11\152\1\151\6\152\3\73\1\uffff"+
            "\1\53\17\73\1\65\4\3\2\73\10\3\1\73\1\3\1\73\4\3\1\73\1\3\1"+
            "\73\1\3\1\73\5\3\1\73\1\3\1\73\3\3\1\73\1\3\1\45\1\73\3\3\1"+
            "\54\1\173\1\67\2\uffff\1\71\1\56\1\uffff\1\73\1\uffff\1\66\17"+
            "\uffff\1\52\4\uffff\1\73\4\uffff\1\73\1\2\1\73\4\uffff\1\152"+
            "\1\57\1\60\1\61\1\62\1\55\1\uffff\1\73\1\uffff\1\73\2\uffff"+
            "\1\73\13\uffff\1\73\14\uffff\1\72\1\152\1\uffff\6\3\7\73",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "()+ loopback of 110:145: ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_2 = input.LA(1);

                         
                        int index83_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_37 = input.LA(1);

                         
                        int index83_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_37);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA83_42 = input.LA(1);

                         
                        int index83_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred283_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index83_42);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA83_43 = input.LA(1);

                         
                        int index83_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred283_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA83_44 = input.LA(1);

                         
                        int index83_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA83_46 = input.LA(1);

                         
                        int index83_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index83_46);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA83_47 = input.LA(1);

                         
                        int index83_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index83_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA83_48 = input.LA(1);

                         
                        int index83_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index83_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA83_49 = input.LA(1);

                         
                        int index83_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index83_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA83_50 = input.LA(1);

                         
                        int index83_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index83_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA83_51 = input.LA(1);

                         
                        int index83_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index83_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA83_52 = input.LA(1);

                         
                        int index83_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index83_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA83_53 = input.LA(1);

                         
                        int index83_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_53);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA83_54 = input.LA(1);

                         
                        int index83_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred283_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_54);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA83_55 = input.LA(1);

                         
                        int index83_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred283_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index83_55);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA83_56 = input.LA(1);

                         
                        int index83_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA83_58 = input.LA(1);

                         
                        int index83_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index83_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA83_105 = input.LA(1);

                         
                        int index83_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 106;}

                         
                        input.seek(index83_105);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\45\uffff";
    static final String DFA87_eofS =
        "\45\uffff";
    static final String DFA87_minS =
        "\1\14\37\0\5\uffff";
    static final String DFA87_maxS =
        "\1\u00b4\37\0\5\uffff";
    static final String DFA87_acceptS =
        "\40\uffff\1\2\1\3\1\1\1\5\1\4";
    static final String DFA87_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\5\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\13\1\14\4\uffff\1\17\1\20\1\16\1\24\1\25\1\33\1\34\1\21\1"+
            "\32\1\26\1\30\1\22\1\23\1\1\1\31\1\27\2\uffff\1\40\7\uffff\1"+
            "\41\120\uffff\1\37\4\uffff\1\36\13\uffff\1\15\1\7\1\10\1\11"+
            "\1\12\31\uffff\1\2\1\3\1\uffff\1\4\1\6\1\uffff\1\5\1\uffff\1"+
            "\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "118:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_1 = input.LA(1);

                         
                        int index87_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA87_2 = input.LA(1);

                         
                        int index87_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA87_3 = input.LA(1);

                         
                        int index87_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA87_4 = input.LA(1);

                         
                        int index87_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA87_5 = input.LA(1);

                         
                        int index87_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA87_6 = input.LA(1);

                         
                        int index87_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA87_7 = input.LA(1);

                         
                        int index87_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA87_8 = input.LA(1);

                         
                        int index87_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA87_9 = input.LA(1);

                         
                        int index87_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA87_10 = input.LA(1);

                         
                        int index87_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA87_11 = input.LA(1);

                         
                        int index87_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA87_12 = input.LA(1);

                         
                        int index87_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA87_13 = input.LA(1);

                         
                        int index87_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA87_14 = input.LA(1);

                         
                        int index87_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA87_15 = input.LA(1);

                         
                        int index87_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA87_16 = input.LA(1);

                         
                        int index87_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA87_17 = input.LA(1);

                         
                        int index87_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA87_18 = input.LA(1);

                         
                        int index87_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA87_19 = input.LA(1);

                         
                        int index87_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA87_20 = input.LA(1);

                         
                        int index87_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA87_21 = input.LA(1);

                         
                        int index87_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA87_22 = input.LA(1);

                         
                        int index87_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA87_23 = input.LA(1);

                         
                        int index87_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA87_24 = input.LA(1);

                         
                        int index87_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA87_25 = input.LA(1);

                         
                        int index87_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA87_26 = input.LA(1);

                         
                        int index87_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA87_27 = input.LA(1);

                         
                        int index87_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA87_28 = input.LA(1);

                         
                        int index87_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA87_29 = input.LA(1);

                         
                        int index87_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index87_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA87_30 = input.LA(1);

                         
                        int index87_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                         
                        input.seek(index87_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA87_31 = input.LA(1);

                         
                        int index87_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 33;}

                         
                        input.seek(index87_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA91_eotS =
        "\31\uffff";
    static final String DFA91_eofS =
        "\31\uffff";
    static final String DFA91_minS =
        "\1\14\1\uffff\13\12\13\0\1\uffff";
    static final String DFA91_maxS =
        "\1\u00b4\1\uffff\13\12\13\0\1\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\2\26\uffff\1\1";
    static final String DFA91_specialS =
        "\15\uffff\1\12\1\5\1\11\1\1\1\6\1\4\1\2\1\7\1\3\1\0\1\10\1\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\13\1\14\4\uffff\20\1\2\uffff\1\1\130\uffff\1\1\4\uffff\1"+
            "\1\13\uffff\1\1\1\7\1\10\1\11\1\12\31\uffff\1\2\1\3\1\uffff"+
            "\1\4\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "()* loopback of 130:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_22 = input.LA(1);

                         
                        int index91_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA91_16 = input.LA(1);

                         
                        int index91_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA91_19 = input.LA(1);

                         
                        int index91_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA91_21 = input.LA(1);

                         
                        int index91_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA91_18 = input.LA(1);

                         
                        int index91_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_18);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA91_14 = input.LA(1);

                         
                        int index91_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA91_17 = input.LA(1);

                         
                        int index91_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA91_20 = input.LA(1);

                         
                        int index91_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_20);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA91_23 = input.LA(1);

                         
                        int index91_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA91_15 = input.LA(1);

                         
                        int index91_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA91_13 = input.LA(1);

                         
                        int index91_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index91_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA98_eotS =
        "\17\uffff";
    static final String DFA98_eofS =
        "\17\uffff";
    static final String DFA98_minS =
        "\1\14\1\uffff\6\12\1\uffff\6\0";
    static final String DFA98_maxS =
        "\1\u00b2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA98_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA98_specialS =
        "\11\uffff\1\1\1\5\1\3\1\0\1\4\1\2}>";
    static final String[] DFA98_transitionS = {
            "\1\6\1\7\30\uffff\1\1\17\uffff\1\1\56\uffff\1\1\7\uffff\1\1"+
            "\17\uffff\1\1\21\uffff\1\2\1\3\1\4\1\5\31\uffff\2\10\1\uffff"+
            "\2\10\1\uffff\1\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()* loopback of 138:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_12 = input.LA(1);

                         
                        int index98_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA98_9 = input.LA(1);

                         
                        int index98_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA98_14 = input.LA(1);

                         
                        int index98_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA98_11 = input.LA(1);

                         
                        int index98_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA98_13 = input.LA(1);

                         
                        int index98_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA98_10 = input.LA(1);

                         
                        int index98_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA101_eotS =
        "\31\uffff";
    static final String DFA101_eofS =
        "\31\uffff";
    static final String DFA101_minS =
        "\1\14\13\12\1\uffff\13\0\1\uffff";
    static final String DFA101_maxS =
        "\1\u00b4\13\12\1\uffff\13\0\1\uffff";
    static final String DFA101_acceptS =
        "\14\uffff\1\2\13\uffff\1\1";
    static final String DFA101_specialS =
        "\15\uffff\1\7\1\2\1\10\1\4\1\0\1\3\1\6\1\11\1\1\1\5\1\12\1\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\12\1\13\4\uffff\20\14\12\uffff\1\14\120\uffff\1\14\4\uffff"+
            "\1\14\13\uffff\1\14\1\6\1\7\1\10\1\11\31\uffff\1\1\1\2\1\uffff"+
            "\1\3\1\5\1\uffff\1\4\1\uffff\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "145:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_17 = input.LA(1);

                         
                        int index101_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_21 = input.LA(1);

                         
                        int index101_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_21);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_14 = input.LA(1);

                         
                        int index101_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_18 = input.LA(1);

                         
                        int index101_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_16 = input.LA(1);

                         
                        int index101_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_22 = input.LA(1);

                         
                        int index101_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_19 = input.LA(1);

                         
                        int index101_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_19);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA101_13 = input.LA(1);

                         
                        int index101_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA101_15 = input.LA(1);

                         
                        int index101_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA101_20 = input.LA(1);

                         
                        int index101_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_20);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA101_23 = input.LA(1);

                         
                        int index101_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index101_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA114_eotS =
        "\u0088\uffff";
    static final String DFA114_eofS =
        "\1\1\u0087\uffff";
    static final String DFA114_minS =
        "\1\13\5\uffff\6\0\1\uffff\2\0\3\uffff\13\0\153\uffff";
    static final String DFA114_maxS =
        "\1\u00c2\5\uffff\6\0\1\uffff\2\0\3\uffff\13\0\153\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\2\u0085\uffff\1\1";
    static final String DFA114_specialS =
        "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\153\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\1\1\12\1\13\2\1\2\uffff\21\1\1\32\1\1\1\uffff\1\25\4\1\1"+
            "\31\4\1\1\26\5\1\1\30\4\1\1\27\11\1\1\34\37\1\1\16\1\uffff\3"+
            "\1\1\uffff\2\1\1\23\1\1\15\uffff\1\15\1\24\4\uffff\1\22\1\1"+
            "\3\uffff\3\1\4\uffff\1\1\1\6\1\7\1\10\1\11\1\1\1\uffff\1\33"+
            "\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\3"+
            "\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "()* loopback of 158:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_6 = input.LA(1);

                         
                        int index114_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA114_7 = input.LA(1);

                         
                        int index114_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA114_8 = input.LA(1);

                         
                        int index114_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA114_9 = input.LA(1);

                         
                        int index114_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA114_10 = input.LA(1);

                         
                        int index114_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA114_11 = input.LA(1);

                         
                        int index114_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA114_13 = input.LA(1);

                         
                        int index114_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_13);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA114_14 = input.LA(1);

                         
                        int index114_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA114_20 = input.LA(1);

                         
                        int index114_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA114_21 = input.LA(1);

                         
                        int index114_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA114_22 = input.LA(1);

                         
                        int index114_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA114_23 = input.LA(1);

                         
                        int index114_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA114_24 = input.LA(1);

                         
                        int index114_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA114_25 = input.LA(1);

                         
                        int index114_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA114_26 = input.LA(1);

                         
                        int index114_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA114_27 = input.LA(1);

                         
                        int index114_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA114_28 = input.LA(1);

                         
                        int index114_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA113_eotS =
        "\24\uffff";
    static final String DFA113_eofS =
        "\24\uffff";
    static final String DFA113_minS =
        "\1\14\14\uffff\1\0\6\uffff";
    static final String DFA113_maxS =
        "\1\u0095\14\uffff\1\0\6\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA113_specialS =
        "\15\uffff\1\0\6\uffff}>";
    static final String[] DFA113_transitionS = {
            "\2\1\25\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\5\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\1\37\uffff\1\15\7\uffff\1\1\16\uffff"+
            "\1\23\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "()* loopback of 158:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_13 = input.LA(1);

                         
                        int index113_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\32\uffff";
    static final String DFA120_eofS =
        "\1\1\31\uffff";
    static final String DFA120_minS =
        "\1\14\1\uffff\20\0\10\uffff";
    static final String DFA120_maxS =
        "\1\u0095\1\uffff\20\0\10\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\11\20\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA120_specialS =
        "\2\uffff\1\2\1\17\1\0\1\4\1\5\1\15\1\6\1\1\1\7\1\16\1\12\1\10\1"+
        "\14\1\3\1\13\1\11\10\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\11\1\12\25\uffff\1\20\2\uffff\1\4\4\uffff\1\17\4\uffff\1"+
            "\13\5\uffff\1\16\4\uffff\1\14\11\uffff\1\1\37\uffff\1\15\7\uffff"+
            "\1\2\17\uffff\1\3\21\uffff\1\5\1\6\1\7\1\10\2\uffff\1\21",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()+ loopback of 165:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_4 = input.LA(1);

                         
                        int index120_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA120_9 = input.LA(1);

                         
                        int index120_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA120_2 = input.LA(1);

                         
                        int index120_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA120_15 = input.LA(1);

                         
                        int index120_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA120_5 = input.LA(1);

                         
                        int index120_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA120_6 = input.LA(1);

                         
                        int index120_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA120_8 = input.LA(1);

                         
                        int index120_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA120_10 = input.LA(1);

                         
                        int index120_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA120_13 = input.LA(1);

                         
                        int index120_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA120_17 = input.LA(1);

                         
                        int index120_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA120_12 = input.LA(1);

                         
                        int index120_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA120_16 = input.LA(1);

                         
                        int index120_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA120_14 = input.LA(1);

                         
                        int index120_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA120_7 = input.LA(1);

                         
                        int index120_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_7);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA120_11 = input.LA(1);

                         
                        int index120_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_11);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA120_3 = input.LA(1);

                         
                        int index120_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred361_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\35\uffff";
    static final String DFA124_eofS =
        "\1\3\3\uffff\1\3\11\uffff\1\3\1\uffff\1\3\11\uffff\1\3\2\uffff";
    static final String DFA124_minS =
        "\1\13\2\12\1\uffff\1\13\1\0\7\12\1\uffff\1\13\1\0\1\13\4\0\4\12"+
        "\1\0\1\13\2\0";
    static final String DFA124_maxS =
        "\1\u00c2\2\12\1\uffff\1\u00c2\1\0\7\12\1\uffff\1\u00c2\1\0\1\u00c2"+
        "\4\0\4\12\1\0\1\u00c2\2\0";
    static final String DFA124_acceptS =
        "\3\uffff\1\2\11\uffff\1\1\17\uffff";
    static final String DFA124_specialS =
        "\5\uffff\1\3\11\uffff\1\0\1\uffff\1\7\1\10\1\1\1\2\4\uffff\1\5\1"+
        "\uffff\1\4\1\6}>";
    static final String[] DFA124_transitionS = {
            "\5\3\2\uffff\23\3\1\uffff\1\2\77\3\1\uffff\3\3\1\uffff\4\3\15"+
            "\uffff\1\3\1\1\4\uffff\2\3\3\uffff\3\3\4\uffff\6\3\1\uffff\1"+
            "\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff\5\3\1\uffff"+
            "\3\3\1\uffff\15\3",
            "\1\4",
            "\1\5",
            "",
            "\5\3\1\uffff\24\3\1\12\1\13\1\7\2\3\1\14\73\3\1\uffff\3\3\1"+
            "\11\4\3\15\uffff\1\3\1\10\4\uffff\2\3\3\uffff\3\3\4\uffff\6"+
            "\3\1\uffff\1\6\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff"+
            "\5\3\1\uffff\3\3\1\uffff\15\3",
            "\1\uffff",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "",
            "\5\3\2\uffff\23\3\1\uffff\100\3\1\uffff\3\3\1\11\4\3\15\uffff"+
            "\2\3\4\uffff\2\3\3\uffff\3\3\4\uffff\6\3\1\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff\5\3\1\uffff\3\3\1\uffff"+
            "\15\3",
            "\1\uffff",
            "\5\3\1\uffff\24\3\1\30\1\13\1\27\2\3\1\25\73\3\1\uffff\10\3"+
            "\15\uffff\1\3\1\26\4\uffff\2\3\3\uffff\3\3\4\uffff\6\3\1\uffff"+
            "\1\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff\5\3\1\uffff"+
            "\3\3\1\uffff\15\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\uffff",
            "\5\3\1\uffff\24\3\1\30\1\13\1\27\2\3\1\25\73\3\1\uffff\10\3"+
            "\15\uffff\1\3\1\26\4\uffff\2\3\3\uffff\3\3\4\uffff\6\3\1\uffff"+
            "\1\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff\5\3\1\uffff"+
            "\3\3\1\uffff\15\3",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "168:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_15 = input.LA(1);

                         
                        int index124_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_19 = input.LA(1);

                         
                        int index124_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_20 = input.LA(1);

                         
                        int index124_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_5 = input.LA(1);

                         
                        int index124_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_27 = input.LA(1);

                         
                        int index124_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_27);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_25 = input.LA(1);

                         
                        int index124_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_28 = input.LA(1);

                         
                        int index124_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_28);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_17 = input.LA(1);

                         
                        int index124_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_18 = input.LA(1);

                         
                        int index124_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index124_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\12\uffff";
    static final String DFA125_eofS =
        "\12\uffff";
    static final String DFA125_minS =
        "\1\46\1\12\1\uffff\1\45\1\uffff\1\12\3\uffff\1\45";
    static final String DFA125_maxS =
        "\1\175\1\12\1\uffff\1\u0095\1\uffff\1\12\3\uffff\1\175";
    static final String DFA125_acceptS =
        "\2\uffff\1\1\1\uffff\1\5\1\uffff\1\3\1\4\1\2\1\uffff";
    static final String DFA125_specialS =
        "\12\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\126\uffff\1\1",
            "\1\3",
            "",
            "\1\6\1\2\1\10\2\uffff\1\4\77\uffff\1\7\22\uffff\1\5\27\uffff"+
            "\1\7",
            "",
            "\1\11",
            "",
            "",
            "",
            "\1\6\1\2\1\10\2\uffff\1\4\122\uffff\1\5"
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "169:1: measurementtypes : ( molar | amount | mass | percent | volume );";
        }
    }
    static final String DFA127_eotS =
        "\14\uffff";
    static final String DFA127_eofS =
        "\3\uffff\1\4\10\uffff";
    static final String DFA127_minS =
        "\1\66\1\12\1\uffff\1\13\1\uffff\2\12\1\uffff\1\66\1\0\2\uffff";
    static final String DFA127_maxS =
        "\1\155\1\12\1\uffff\1\u00c2\1\uffff\2\12\1\uffff\1\66\1\0\2\uffff";
    static final String DFA127_acceptS =
        "\2\uffff\1\4\1\uffff\1\5\2\uffff\1\3\2\uffff\1\2\1\1";
    static final String DFA127_specialS =
        "\10\uffff\1\0\1\1\2\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\1\66\uffff\1\2",
            "\1\3",
            "",
            "\5\4\2\uffff\23\4\1\uffff\20\4\1\6\57\4\1\7\1\4\1\5\1\4\1\uffff"+
            "\4\4\15\uffff\2\4\4\uffff\2\4\3\uffff\3\4\4\uffff\6\4\1\uffff"+
            "\1\4\1\uffff\1\4\2\uffff\1\4\13\uffff\1\4\5\uffff\5\4\1\uffff"+
            "\3\4\1\uffff\15\4",
            "",
            "\1\10",
            "\1\11",
            "",
            "\1\12",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "173:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_8 = input.LA(1);

                         
                        int index127_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_8==54) ) {s = 10;}

                        else if ( (synpred376_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA127_9 = input.LA(1);

                         
                        int index127_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred374_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index127_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\14\uffff";
    static final String DFA134_eofS =
        "\14\uffff";
    static final String DFA134_minS =
        "\1\14\7\uffff\1\0\3\uffff";
    static final String DFA134_maxS =
        "\1\u0092\7\uffff\1\0\3\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\3\7\uffff\1\1\1\uffff\1\2";
    static final String DFA134_specialS =
        "\10\uffff\1\0\3\uffff}>";
    static final String[] DFA134_transitionS = {
            "\2\1\30\uffff\1\11\17\uffff\1\1\56\uffff\1\13\7\uffff\1\10\17"+
            "\uffff\1\11\21\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 186:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_8 = input.LA(1);

                         
                        int index134_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred386_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred387_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\13\uffff";
    static final String DFA135_eofS =
        "\1\2\12\uffff";
    static final String DFA135_minS =
        "\1\13\1\0\1\uffff\7\0\1\uffff";
    static final String DFA135_maxS =
        "\1\u00c2\1\0\1\uffff\7\0\1\uffff";
    static final String DFA135_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA135_specialS =
        "\1\uffff\1\1\1\uffff\1\4\1\2\1\5\1\3\1\0\1\7\1\6\1\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\2\1\7\1\10\2\2\2\uffff\23\2\1\uffff\20\2\1\11\57\2\1\uffff"+
            "\3\2\1\uffff\2\2\1\1\1\2\15\uffff\2\2\4\uffff\2\2\3\uffff\3"+
            "\2\4\uffff\1\2\1\3\1\4\1\5\1\6\1\2\1\uffff\1\2\1\uffff\1\2\2"+
            "\uffff\1\2\13\uffff\1\2\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()+ loopback of 186:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_7 = input.LA(1);

                         
                        int index135_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_1 = input.LA(1);

                         
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA135_4 = input.LA(1);

                         
                        int index135_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA135_6 = input.LA(1);

                         
                        int index135_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA135_3 = input.LA(1);

                         
                        int index135_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA135_5 = input.LA(1);

                         
                        int index135_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA135_9 = input.LA(1);

                         
                        int index135_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA135_8 = input.LA(1);

                         
                        int index135_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\u008a\uffff";
    static final String DFA136_eofS =
        "\1\1\u0089\uffff";
    static final String DFA136_minS =
        "\1\13\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA136_maxS =
        "\1\u00c2\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA136_acceptS =
        "\1\uffff\1\4\u0085\uffff\1\1\1\3\1\2";
    static final String DFA136_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\uffff\1\2\1\3\166\uffff}>";
    static final String[] DFA136_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\23\76\1\1\4\1\uffff\3\1\1\uffff"+
            "\2\1\1\20\1\1\15\uffff\1\1\1\22\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()* loopback of 186:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_4 = input.LA(1);

                         
                        int index136_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index136_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_16 = input.LA(1);

                         
                        int index136_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index136_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA136_18 = input.LA(1);

                         
                        int index136_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index136_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA136_19 = input.LA(1);

                         
                        int index136_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index136_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\15\uffff";
    static final String DFA137_eofS =
        "\15\uffff";
    static final String DFA137_minS =
        "\1\14\4\0\10\uffff";
    static final String DFA137_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA137_acceptS =
        "\5\uffff\1\2\6\uffff\1\1";
    static final String DFA137_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA137_transitionS = {
            "\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1\17\uffff"+
            "\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "187:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_1 = input.LA(1);

                         
                        int index137_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred392_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index137_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA137_2 = input.LA(1);

                         
                        int index137_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred392_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index137_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA137_3 = input.LA(1);

                         
                        int index137_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred392_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index137_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA137_4 = input.LA(1);

                         
                        int index137_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred392_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index137_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\u008a\uffff";
    static final String DFA141_eofS =
        "\1\1\u0089\uffff";
    static final String DFA141_minS =
        "\1\13\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA141_maxS =
        "\1\u00c2\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA141_acceptS =
        "\1\uffff\1\4\u0085\uffff\1\1\1\3\1\2";
    static final String DFA141_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\uffff\1\2\1\3\166\uffff}>";
    static final String[] DFA141_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\23\76\1\1\4\1\uffff\3\1\1\uffff"+
            "\2\1\1\20\1\1\15\uffff\1\1\1\22\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:25: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_4 = input.LA(1);

                         
                        int index141_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred398_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA141_16 = input.LA(1);

                         
                        int index141_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred398_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA141_18 = input.LA(1);

                         
                        int index141_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA141_19 = input.LA(1);

                         
                        int index141_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\101\uffff";
    static final String DFA143_eofS =
        "\1\1\100\uffff";
    static final String DFA143_minS =
        "\1\13\1\uffff\76\0\1\uffff";
    static final String DFA143_maxS =
        "\1\u00c2\1\uffff\76\0\1\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\2\76\uffff\1\1";
    static final String DFA143_specialS =
        "\2\uffff\1\55\1\22\1\63\1\25\1\44\1\35\1\13\1\21\1\0\1\64\1\67\1"+
        "\11\1\23\1\47\1\15\1\36\1\66\1\46\1\16\1\2\1\51\1\17\1\10\1\73\1"+
        "\75\1\70\1\24\1\74\1\7\1\57\1\33\1\54\1\34\1\26\1\53\1\3\1\30\1"+
        "\56\1\1\1\40\1\43\1\37\1\72\1\4\1\71\1\27\1\62\1\6\1\52\1\31\1\65"+
        "\1\50\1\20\1\12\1\14\1\41\1\60\1\42\1\5\1\61\1\45\1\32\1\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\16\1\7\1\10\1\33\1\63\2\uffff\20\1\1\32\1\24\1\34\1\uffff"+
            "\1\14\1\43\1\35\1\36\1\52\1\23\1\37\1\40\1\41\1\42\1\21\1\44"+
            "\1\45\1\46\1\47\1\50\1\15\4\1\1\22\1\61\10\1\1\26\1\1\1\51\4"+
            "\1\1\64\1\1\1\65\1\1\1\66\5\1\1\67\1\1\1\53\3\1\1\70\1\1\1\31"+
            "\1\60\3\1\1\27\1\1\1\2\1\uffff\3\1\1\uffff\1\62\1\1\1\11\1\1"+
            "\15\uffff\1\1\1\13\4\uffff\1\20\1\1\3\uffff\1\76\1\71\1\72\4"+
            "\uffff\1\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\25\1\uffff\1\30\2\uffff"+
            "\1\12\13\uffff\1\17\5\uffff\5\1\1\uffff\1\1\1\73\1\1\1\uffff"+
            "\6\1\1\54\1\55\1\56\1\57\1\74\1\75\1\77",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()+ loopback of 204:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_10 = input.LA(1);

                         
                        int index143_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_40 = input.LA(1);

                         
                        int index143_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA143_21 = input.LA(1);

                         
                        int index143_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA143_37 = input.LA(1);

                         
                        int index143_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_37);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA143_45 = input.LA(1);

                         
                        int index143_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA143_60 = input.LA(1);

                         
                        int index143_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_60);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA143_49 = input.LA(1);

                         
                        int index143_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_49);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA143_30 = input.LA(1);

                         
                        int index143_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_30);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA143_24 = input.LA(1);

                         
                        int index143_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA143_13 = input.LA(1);

                         
                        int index143_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA143_55 = input.LA(1);

                         
                        int index143_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_55);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA143_8 = input.LA(1);

                         
                        int index143_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_8);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA143_56 = input.LA(1);

                         
                        int index143_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_56);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA143_16 = input.LA(1);

                         
                        int index143_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA143_20 = input.LA(1);

                         
                        int index143_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA143_23 = input.LA(1);

                         
                        int index143_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_23);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA143_54 = input.LA(1);

                         
                        int index143_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA143_9 = input.LA(1);

                         
                        int index143_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_9);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA143_14 = input.LA(1);

                         
                        int index143_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_14);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA143_28 = input.LA(1);

                         
                        int index143_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_28);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA143_5 = input.LA(1);

                         
                        int index143_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_5);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA143_35 = input.LA(1);

                         
                        int index143_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_35);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA143_47 = input.LA(1);

                         
                        int index143_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_47);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA143_38 = input.LA(1);

                         
                        int index143_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA143_51 = input.LA(1);

                         
                        int index143_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_51);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA143_63 = input.LA(1);

                         
                        int index143_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA143_32 = input.LA(1);

                         
                        int index143_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_32);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA143_34 = input.LA(1);

                         
                        int index143_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA143_7 = input.LA(1);

                         
                        int index143_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_7);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA143_17 = input.LA(1);

                         
                        int index143_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_17);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA143_43 = input.LA(1);

                         
                        int index143_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_43);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA143_41 = input.LA(1);

                         
                        int index143_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_41);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA143_57 = input.LA(1);

                         
                        int index143_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_57);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA143_59 = input.LA(1);

                         
                        int index143_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_59);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA143_42 = input.LA(1);

                         
                        int index143_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_42);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA143_6 = input.LA(1);

                         
                        int index143_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_6);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA143_62 = input.LA(1);

                         
                        int index143_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_62);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA143_19 = input.LA(1);

                         
                        int index143_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_19);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA143_15 = input.LA(1);

                         
                        int index143_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_15);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA143_53 = input.LA(1);

                         
                        int index143_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_53);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA143_22 = input.LA(1);

                         
                        int index143_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_22);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA143_50 = input.LA(1);

                         
                        int index143_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_50);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA143_36 = input.LA(1);

                         
                        int index143_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_36);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA143_33 = input.LA(1);

                         
                        int index143_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_33);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA143_39 = input.LA(1);

                         
                        int index143_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_39);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA143_31 = input.LA(1);

                         
                        int index143_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_31);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA143_58 = input.LA(1);

                         
                        int index143_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_58);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA143_61 = input.LA(1);

                         
                        int index143_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_61);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA143_48 = input.LA(1);

                         
                        int index143_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_48);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA143_4 = input.LA(1);

                         
                        int index143_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_4);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA143_11 = input.LA(1);

                         
                        int index143_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_11);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA143_52 = input.LA(1);

                         
                        int index143_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_52);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA143_18 = input.LA(1);

                         
                        int index143_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_18);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA143_12 = input.LA(1);

                         
                        int index143_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_12);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA143_27 = input.LA(1);

                         
                        int index143_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_27);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA143_46 = input.LA(1);

                         
                        int index143_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_46);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA143_44 = input.LA(1);

                         
                        int index143_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_44);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA143_25 = input.LA(1);

                         
                        int index143_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_25);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA143_29 = input.LA(1);

                         
                        int index143_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_29);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA143_26 = input.LA(1);

                         
                        int index143_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\u0088\uffff";
    static final String DFA150_eofS =
        "\1\1\u0087\uffff";
    static final String DFA150_minS =
        "\1\13\1\uffff\1\0\u0085\uffff";
    static final String DFA150_maxS =
        "\1\u00c2\1\uffff\1\0\u0085\uffff";
    static final String DFA150_acceptS =
        "\1\uffff\1\2\u0085\uffff\1\1";
    static final String DFA150_specialS =
        "\2\uffff\1\0\u0085\uffff}>";
    static final String[] DFA150_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\77\1\1\2\1\uffff\3\1\1\uffff\4\1\15"+
            "\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1"+
            "\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1"+
            "\1\uffff\15\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 222:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_2 = input.LA(1);

                         
                        int index150_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\12\uffff";
    static final String DFA153_eofS =
        "\1\1\11\uffff";
    static final String DFA153_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA153_maxS =
        "\1\u00c2\1\uffff\4\0\4\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\3\1\2\1\4";
    static final String DFA153_specialS =
        "\2\uffff\1\2\1\0\1\3\1\1\4\uffff}>";
    static final String[] DFA153_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\100\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\3\1\5\1\2\1\4\16\uffff\1\1\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()+ loopback of 226:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_3 = input.LA(1);

                         
                        int index153_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_5 = input.LA(1);

                         
                        int index153_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA153_2 = input.LA(1);

                         
                        int index153_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred414_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA153_4 = input.LA(1);

                         
                        int index153_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\105\uffff";
    static final String DFA154_eofS =
        "\105\uffff";
    static final String DFA154_minS =
        "\1\13\17\uffff\1\0\64\uffff";
    static final String DFA154_maxS =
        "\1\u00c2\17\uffff\1\0\64\uffff";
    static final String DFA154_acceptS =
        "\1\uffff\1\2\102\uffff\1\1";
    static final String DFA154_specialS =
        "\20\uffff\1\0\64\uffff}>";
    static final String[] DFA154_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\20\5\uffff"+
            "\1\1\1\uffff\1\1\16\uffff\1\104\1\1\4\uffff\1\1\4\uffff\3\1"+
            "\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1"+
            "\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_16 = input.LA(1);

                         
                        int index154_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index154_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\17\uffff";
    static final String DFA155_eofS =
        "\17\uffff";
    static final String DFA155_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA155_maxS =
        "\1\u00c2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA155_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA155_specialS =
        "\11\uffff\1\5\1\0\1\3\1\2\1\1\1\4}>";
    static final String[] DFA155_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\5\uffff\2\10\1\uffff\2\10\1\uffff\1\10\1\1"+
            "\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_10 = input.LA(1);

                         
                        int index155_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_13 = input.LA(1);

                         
                        int index155_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA155_12 = input.LA(1);

                         
                        int index155_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA155_11 = input.LA(1);

                         
                        int index155_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA155_14 = input.LA(1);

                         
                        int index155_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA155_9 = input.LA(1);

                         
                        int index155_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\103\uffff";
    static final String DFA156_eofS =
        "\103\uffff";
    static final String DFA156_minS =
        "\1\13\76\0\4\uffff";
    static final String DFA156_maxS =
        "\1\u00c2\76\0\4\uffff";
    static final String DFA156_acceptS =
        "\77\uffff\1\1\1\2\1\4\1\3";
    static final String DFA156_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\4\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\15\1\6\1\7\1\32\1\62\22\uffff\1\31\1\23\1\33\1\uffff\1\12"+
            "\1\42\1\34\1\35\1\51\1\22\1\36\1\37\1\40\1\41\1\20\1\43\1\44"+
            "\1\45\1\46\1\47\1\14\4\uffff\1\21\1\60\10\uffff\1\25\1\uffff"+
            "\1\50\4\uffff\1\63\1\uffff\1\64\1\uffff\1\65\5\uffff\1\66\1"+
            "\uffff\1\52\3\uffff\1\67\1\uffff\1\30\1\57\3\uffff\1\26\1\uffff"+
            "\1\13\5\uffff\1\61\1\uffff\1\1\17\uffff\1\11\4\uffff\1\17\4"+
            "\uffff\1\75\1\70\1\71\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\24\1"+
            "\uffff\1\27\2\uffff\1\10\13\uffff\1\16\14\uffff\1\72\10\uffff"+
            "\1\53\1\54\1\55\1\56\1\73\1\74\1\76",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "56:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_3 = input.LA(1);

                         
                        int index156_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_4 = input.LA(1);

                         
                        int index156_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_5 = input.LA(1);

                         
                        int index156_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_6 = input.LA(1);

                         
                        int index156_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_7 = input.LA(1);

                         
                        int index156_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_8 = input.LA(1);

                         
                        int index156_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA156_9 = input.LA(1);

                         
                        int index156_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA156_10 = input.LA(1);

                         
                        int index156_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA156_11 = input.LA(1);

                         
                        int index156_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA156_12 = input.LA(1);

                         
                        int index156_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA156_13 = input.LA(1);

                         
                        int index156_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA156_14 = input.LA(1);

                         
                        int index156_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA156_15 = input.LA(1);

                         
                        int index156_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA156_16 = input.LA(1);

                         
                        int index156_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA156_17 = input.LA(1);

                         
                        int index156_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA156_18 = input.LA(1);

                         
                        int index156_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA156_19 = input.LA(1);

                         
                        int index156_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA156_20 = input.LA(1);

                         
                        int index156_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA156_21 = input.LA(1);

                         
                        int index156_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA156_22 = input.LA(1);

                         
                        int index156_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA156_23 = input.LA(1);

                         
                        int index156_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA156_24 = input.LA(1);

                         
                        int index156_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA156_25 = input.LA(1);

                         
                        int index156_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA156_26 = input.LA(1);

                         
                        int index156_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA156_27 = input.LA(1);

                         
                        int index156_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA156_28 = input.LA(1);

                         
                        int index156_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA156_29 = input.LA(1);

                         
                        int index156_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA156_30 = input.LA(1);

                         
                        int index156_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA156_31 = input.LA(1);

                         
                        int index156_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA156_32 = input.LA(1);

                         
                        int index156_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA156_33 = input.LA(1);

                         
                        int index156_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA156_34 = input.LA(1);

                         
                        int index156_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA156_35 = input.LA(1);

                         
                        int index156_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA156_36 = input.LA(1);

                         
                        int index156_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA156_37 = input.LA(1);

                         
                        int index156_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA156_38 = input.LA(1);

                         
                        int index156_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA156_39 = input.LA(1);

                         
                        int index156_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA156_40 = input.LA(1);

                         
                        int index156_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA156_41 = input.LA(1);

                         
                        int index156_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA156_42 = input.LA(1);

                         
                        int index156_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA156_43 = input.LA(1);

                         
                        int index156_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA156_44 = input.LA(1);

                         
                        int index156_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA156_45 = input.LA(1);

                         
                        int index156_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA156_46 = input.LA(1);

                         
                        int index156_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA156_47 = input.LA(1);

                         
                        int index156_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA156_48 = input.LA(1);

                         
                        int index156_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA156_49 = input.LA(1);

                         
                        int index156_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA156_50 = input.LA(1);

                         
                        int index156_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA156_51 = input.LA(1);

                         
                        int index156_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA156_52 = input.LA(1);

                         
                        int index156_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA156_53 = input.LA(1);

                         
                        int index156_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA156_54 = input.LA(1);

                         
                        int index156_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA156_55 = input.LA(1);

                         
                        int index156_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA156_56 = input.LA(1);

                         
                        int index156_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA156_57 = input.LA(1);

                         
                        int index156_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA156_58 = input.LA(1);

                         
                        int index156_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA156_59 = input.LA(1);

                         
                        int index156_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA156_60 = input.LA(1);

                         
                        int index156_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA156_61 = input.LA(1);

                         
                        int index156_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA156_62 = input.LA(1);

                         
                        int index156_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 64;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index156_62);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\17\uffff";
    static final String DFA164_eofS =
        "\17\uffff";
    static final String DFA164_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA164_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA164_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA164_specialS =
        "\10\uffff\1\3\1\2\1\0\1\4\1\5\1\1\1\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "63:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_10 = input.LA(1);

                         
                        int index164_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index164_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA164_13 = input.LA(1);

                         
                        int index164_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index164_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA164_9 = input.LA(1);

                         
                        int index164_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index164_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA164_8 = input.LA(1);

                         
                        int index164_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index164_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA164_11 = input.LA(1);

                         
                        int index164_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index164_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA164_12 = input.LA(1);

                         
                        int index164_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index164_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\15\uffff";
    static final String DFA166_eofS =
        "\15\uffff";
    static final String DFA166_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA166_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA166_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA166_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "63:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_1 = input.LA(1);

                         
                        int index166_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index166_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA166_2 = input.LA(1);

                         
                        int index166_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index166_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA166_3 = input.LA(1);

                         
                        int index166_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index166_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA166_4 = input.LA(1);

                         
                        int index166_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index166_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\17\uffff";
    static final String DFA168_eofS =
        "\17\uffff";
    static final String DFA168_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA168_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA168_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA168_specialS =
        "\10\uffff\1\3\1\4\1\0\1\2\1\5\1\1\1\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "66:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_10 = input.LA(1);

                         
                        int index168_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA168_13 = input.LA(1);

                         
                        int index168_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA168_11 = input.LA(1);

                         
                        int index168_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA168_8 = input.LA(1);

                         
                        int index168_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA168_9 = input.LA(1);

                         
                        int index168_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA168_12 = input.LA(1);

                         
                        int index168_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA170_eotS =
        "\15\uffff";
    static final String DFA170_eofS =
        "\15\uffff";
    static final String DFA170_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA170_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA170_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA170_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "66:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_1 = input.LA(1);

                         
                        int index170_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index170_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_2 = input.LA(1);

                         
                        int index170_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index170_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_3 = input.LA(1);

                         
                        int index170_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index170_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_4 = input.LA(1);

                         
                        int index170_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index170_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA183_eotS =
        "\24\uffff";
    static final String DFA183_eofS =
        "\24\uffff";
    static final String DFA183_minS =
        "\1\14\14\uffff\1\0\6\uffff";
    static final String DFA183_maxS =
        "\1\u0095\14\uffff\1\0\6\uffff";
    static final String DFA183_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA183_specialS =
        "\15\uffff\1\0\6\uffff}>";
    static final String[] DFA183_transitionS = {
            "\2\1\25\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\5\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\1\37\uffff\1\15\7\uffff\1\1\16\uffff"+
            "\1\23\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;

    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "()* loopback of 158:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA183_13 = input.LA(1);

                         
                        int index183_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index183_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 183, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document208 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x200078BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_sentence_in_sentences230 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20007ABFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences232 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20007ABFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_sentences240 = new BitSet(new long[]{0x0000000000000002L,0x0000022000000000L});
    public static final BitSet FOLLOW_stop_in_sentences242 = new BitSet(new long[]{0x0000000000000002L,0x0000022000000000L});
    public static final BitSet FOLLOW_nounphrase_in_sentence253 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_verbphrase_in_sentence255 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphrase_in_sentence257 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_sentence262 = new BitSet(new long[]{0x0000000000003002L,0x1000003000000000L,0x0005F00000078000L});
    public static final BitSet FOLLOW_colon_in_sentence264 = new BitSet(new long[]{0x0000000000003002L,0x1000003000000000L,0x0005F00000078000L});
    public static final BitSet FOLLOW_conjunction_in_sentence270 = new BitSet(new long[]{0x0000000000000002L,0x1000002000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rbconj_in_sentence272 = new BitSet(new long[]{0x0000000000000002L,0x1000002000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_unmatchedTokens316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_unmatchedTokens340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_unmatchedTokens342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_unmatchedTokens344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2411 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2414 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2417 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2422 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2424 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2426 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2428 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2436 = new BitSet(new long[]{0x187FFFDC0000F800L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2439 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2443 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2445 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2447 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2449 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2459 = new BitSet(new long[]{0x0040004008203802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2462 = new BitSet(new long[]{0x0040004008203802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2465 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_dissolvePhrase480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_dissolvePhrase482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure3_in_dissolvePhrase484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_dissolveStructure1511 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1513 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1516 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1520 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1522 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure1526 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078008L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure1528 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1531 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1534 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1538 = new BitSet(new long[]{0x0000000000200000L,0x0000400000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1540 = new BitSet(new long[]{0x0000000000200000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_dissolveStructure1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2554 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2557 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2561 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2563 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure2567 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078008L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure2569 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2572 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2575 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2579 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2581 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure3594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3597 = new BitSet(new long[]{0x0040084000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3600 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3602 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure3604 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure3608 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078008L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure3610 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure3613 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3616 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3620 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3622 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_cc_in_conjunction638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_verbphraseStructure669 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure672 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure675 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure678 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure682 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure685 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure688 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure691 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure694 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure697 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure700 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure703 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure706 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure712 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure716 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure719 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure722 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_vb_in_verb734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbimmerse_in_verb750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_degassMultiVerb_in_verb752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb822 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_cc_in_degassMultiVerb824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounStructure_in_noun867 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_noun870 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nounStructure_in_noun872 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_prp_in_nounStructure883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_nounStructure885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_nounStructure887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_nounStructure889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_nounStructure891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_nounStructure895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_nounStructure897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_nounStructure899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_nounStructure901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_nounStructure903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_nounStructure905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_nounStructure909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_nounStructure911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_nounStructure913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_nounStructure915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_nounStructure917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_nounStructure919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_nounStructure923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_nounStructure925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_nounStructure927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_nounStructure929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_nounStructure931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_nounStructure933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_nounStructure935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_nounStructure937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_nounStructure939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_nounStructure941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_nounStructure943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_nounStructure949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_nounStructure951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_nounStructure955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_nounStructure957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_nounStructure959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_nounStructure961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_nounStructure963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_nounStructure965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_nounStructure969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_nounStructure971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_nounStructure973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nndry_in_nounStructure975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_nounStructure977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_nounStructure981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_nounStructure983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_nounStructure987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_nounStructure989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_nounStructure991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_nounStructure993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_nounStructure995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_range1001 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_range1003 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_range1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycleStructure_in_cycles1012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_cycleStructure1030 = new BitSet(new long[]{0x0851084800003000L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_dashNN_in_cycleStructure1032 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_nncycle_in_cycleStructure1035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dashNN1045 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_nn_in_dashNN1047 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_cd_in_dashNN1049 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_dashNN1053 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_adj_in_dashNN1056 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_nn_in_dashNN1058 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_cd_in_dashNN1060 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_numberratio_in_ratio1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio1099 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_colon_in_numberratio1102 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_numberratio1104 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_noun_in_nounratio1117 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_colon_in_nounratio1121 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_nounratio1123 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_lsqb_in_reference1137 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_reference1139 = new BitSet(new long[]{0x0000000000000000L,0x0000780000000000L});
    public static final BitSet FOLLOW_rsqb_in_reference1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure1_in_citation1148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure2_in_citation1150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_citationStructure11173 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure11175 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure11177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_citationStructure21183 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_lrb_in_citationStructure21185 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure21187 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure21189 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_citationStructure21191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_citationContent1200 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_fw_in_citationContent1202 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_cd_in_citationContent1204 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1206 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_nnp_in_citationContent1210 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_fw_in_citationContent1212 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_cd_in_citationContent1214 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1216 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture1228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21251 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure21253 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure21255 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure21257 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11266 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11268 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1279 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1281 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1283 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_mixtureContent1285 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1287 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1289 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1291 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1293 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1295 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1297 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1299 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1301 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1303 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1305 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1307 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1309 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1311 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1313 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1315 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_minimixture_in_mixtureContent1319 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1321 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1323 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1325 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nnyield_in_mixtureContent1327 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_mixtureContent1329 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1331 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1333 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1335 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1337 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1339 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1341 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1343 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1345 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1347 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1349 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1351 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1353 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1355 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1357 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1359 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture1370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21393 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure21395 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure21397 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure21399 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure11408 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure11410 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure11412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1421 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1423 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1425 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_minimixtureContent1427 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1429 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1431 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1433 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1435 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1437 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1439 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1441 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1443 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1445 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1447 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1449 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1451 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1453 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1455 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1457 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1461 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1463 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1465 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nnyield_in_minimixtureContent1467 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_minimixtureContent1469 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1471 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1473 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1475 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1477 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1479 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1481 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1483 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1485 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1487 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1489 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1491 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1493 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1495 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1497 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1499 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20002B3FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_jj_in_adj1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj1514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj1516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj1518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv1527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv1531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv1533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase1548 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_advAdj1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_advAdj1576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1585 = new BitSet(new long[]{0x00000003FFFC3000L,0x0000000000000000L,0x0015B0000007C000L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther1588 = new BitSet(new long[]{0x187FFFDFFFFCF800L,0x20002828D14150A0L,0xF01DB04004A7C38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1619 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1662 = new BitSet(new long[]{0x00000013FFFC3000L,0x2000000000000000L,0x0015B0000007C004L});
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1665 = new BitSet(new long[]{0x0000001000003000L,0x2000000000000000L,0x0005B00000078004L});
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1669 = new BitSet(new long[]{0x0000001000003000L,0x2000000000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1672 = new BitSet(new long[]{0x0000001000003000L,0x2000000000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1675 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1678 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1690 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1736 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0005B00000078004L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1739 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1742 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1745 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1822 = new BitSet(new long[]{0x00001003FFFC3000L,0x2000000000000000L,0x0015B0000007C004L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1825 = new BitSet(new long[]{0x0000100000003000L,0x2000000000000000L,0x0005B00000078004L});
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1828 = new BitSet(new long[]{0x0000100000003000L,0x2000000000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1831 = new BitSet(new long[]{0x0000100000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1834 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1837 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_cd_in_amount1852 = new BitSet(new long[]{0x0000008000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1877 = new BitSet(new long[]{0x0000002000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass1880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1902 = new BitSet(new long[]{0x0841084800003000L,0x2000242000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nn_in_percent1904 = new BitSet(new long[]{0x0841084800003000L,0x2000242000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1931 = new BitSet(new long[]{0x0000040000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar1956 = new BitSet(new long[]{0x0000004000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1983 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase1985 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1988 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2006 = new BitSet(new long[]{0x0841084800003002L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_conjunction_in_multiApparatus2009 = new BitSet(new long[]{0x0841084800003000L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2012 = new BitSet(new long[]{0x0841084800003002L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_dt_in_apparatus2024 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus2027 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnApp_in_apparatus2030 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2059 = new BitSet(new long[]{0x0841084800003002L,0x2000212000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_dash_in_nnApp2063 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2065 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_quantity_in_preapparatus2079 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_adj_in_preapparatus2081 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus2083 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus2085 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_molecule_in_preapparatus2087 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus2089 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus2091 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nn_in_preapparatus2093 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_cd_in_measurements2104 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nn_in_measurements2106 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_multiple_in_measurements2111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements2113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_dt_in_measurements2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_multiple2127 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_cdunicode_in_multiple2129 = new BitSet(new long[]{0x0000004000000002L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurementtypes_in_multiple2131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes2161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes2163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes2165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_oscarCompound2179 = new BitSet(new long[]{0x0040000000003000L,0x0000200000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound2183 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound2185 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound2187 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound2189 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2191 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_reference_in_oscarCompound2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound42203 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound42206 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound42208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound32232 = new BitSet(new long[]{0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound32235 = new BitSet(new long[]{0x0000000000000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound32237 = new BitSet(new long[]{0x0000000000000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound22265 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound22268 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound22270 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound22274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12305 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12307 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount12332 = new BitSet(new long[]{0x0000004008000000L,0x2000202000000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount12334 = new BitSet(new long[]{0x0000004008000000L,0x2000202000000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount12338 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount12340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22350 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22352 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount22356 = new BitSet(new long[]{0x0040004000003002L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_citation_in_moleculeamount22361 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22363 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22365 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount2376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount2380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule2401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarcdType2424 = new BitSet(new long[]{0x0000000000000800L,0x2000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_oscarcdType2427 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_cd_in_oscarcdType2429 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarcdType2432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount12441 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount12443 = new BitSet(new long[]{0x0000000000000800L,0x2000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount12446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount12448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount22457 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_oscarcdType_in_unnamedmoleculeamount22459 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount22463 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount22465 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount22467 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32483 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32485 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32488 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32491 = new BitSet(new long[]{0x187FFFDC0000F802L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount42504 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount42506 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount42509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity2565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity2567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity12593 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12595 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_comma_in_quantity12598 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12601 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_comma_in_quantity12606 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12608 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_stop_in_quantity12613 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12615 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_rrb_in_quantity12620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity22632 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_quantity22635 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity22638 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_nngeneral_in_method2653 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nn_in_method2655 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method2659 = new BitSet(new long[]{0x0000000000000802L,0x2000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets2686 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_rrb_in_brackets2688 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets2690 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets2692 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_11_in_oscarcd2705 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd2707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj2712 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn2719 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr2726 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront2734 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront2736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode2741 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode2748 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas2757 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore2764 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter2771 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter2773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin2778 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin2780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto2785 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto2787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith2792 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith2794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout2799 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout2801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby2806 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia2813 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof2820 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof2822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon2827 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon2829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor2834 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom2841 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder2848 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover2855 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff2862 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff2864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnexample2871 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample2873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnstate2878 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate2880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nntime2885 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnmass2892 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass2894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnmolar2900 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar2903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnamount2908 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount2910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnatmosphere2915 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere2917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nneq2922 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nnvol2929 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol2931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnchementity2936 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity2938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nntemp2943 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnflash2950 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash2952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nngeneral2957 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral2959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnmethod2964 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod2966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnpressure2972 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nncolumn2979 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn2981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nnchromatography2986 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nnvacuum2993 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nncycle3000 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle3002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_nntimes3007 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes3009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_oscarcm3016 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbuse3025 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse3027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbchange3032 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange3034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbsubmerge3039 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbsubject3046 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_nnadd3055 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd3057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_nnmixture3062 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbadd3069 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbcharge3076 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbcontain3083 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbdrop3090 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbfill3097 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill3099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbsuspend3104 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbtreat3111 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbapparatus3120 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnapparatus3127 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbconcentrate3136 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate3138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nnconcentrate3143 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate3145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbcool3152 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool3154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdegass3161 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbdissolve3170 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbdry3179 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry3181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nndry3186 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry3188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbextract3195 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract3197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnextract3202 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract3204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbfilter3211 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nnfilter3218 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbheat3227 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat3229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbincrease3234 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease3236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbimmerse3246 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbpartition3255 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_vbprecipitate3264 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate3266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_nnprecipitate3271 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate3273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_vbpurify3280 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify3282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_nnpurify3287 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbquench3296 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench3298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbrecover3305 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover3307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_vbremove3314 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_nnremove3321 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbstir3330 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir3332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_vbsynthesize3339 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize3341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_nnsynthesize3346 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize3348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbwait3355 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait3357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_vbwash3364 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_vbyield3373 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield3375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_nnyield3382 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnyield3384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_colon3390 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon3392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_comma3397 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_apost3404 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_neg3411 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg3413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_dash3418 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash3420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_stop3425 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop3427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_nnpercent3432 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent3434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_lsqb3439 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb3441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_rsqb3446 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb3448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_lrb3454 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_rrb3461 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb3463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_abl3472 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl3474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_abn3481 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn3483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_abx3490 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx3492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_ap3499 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap3501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_at3508 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at3510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_be3517 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_bed3526 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed3528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_bedz3535 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz3537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_beg3544 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_bem3553 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem3555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_ben3562 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_ber3571 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_bez3580 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez3582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cc3589 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc3591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_cd3598 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd3600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_cs3607 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_dotok3617 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok3619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dod3626 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod3628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_doz3635 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz3637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dt3644 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt3646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_dtTHE3654 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtTHE3656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_dti3662 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti3664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_dts3671 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts3673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_dtx3680 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx3682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_ex3689 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_fw3698 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw3700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_fwin3707 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin3709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_hv3716 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_hvd3725 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_hvg3734 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_hvn3743 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn3745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_in3752 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in3754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_jj3761 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj3763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_jjr3770 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr3772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_jjs3779 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs3781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_jjt3788 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt3790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_md3797 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md3799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_nc3806 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc3808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nn3815 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_nn_poss3824 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss3826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nns3833 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns3835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_nns_poss3842 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_np3851 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_nnp3861 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp3863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_np_poss3871 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_nps3880 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps3882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_nps_poss3889 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_nr3898 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr3900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_od3907 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od3909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_pn3916 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn3918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_pn_poss3925 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss3927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_pp_poss3934 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_pp_poss_poss3943 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppl3952 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ppls3961 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_prp3971 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp3974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ppo3981 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo3983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_pps3990 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_ppss3999 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss4001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_ql4008 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql4010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_qlp4017 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_rb4026 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb4028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_rbr4035 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr4037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_rbconj4046 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_rbt4057 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt4059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_rbs4066 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs4068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_rn4076 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn4078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_rp4085 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_sym4096 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym4098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_to4105 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to4107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_uh4114 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_vb4123 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb4125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_vbp4133 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp4135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_vbd4144 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd4146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_vbg4153 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg4155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_vbn4162 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn4164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_vbz4171 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz4173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_wdt4180 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt4182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_wp_poss4189 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss4191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_wpo4199 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo4201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_wps4208 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_wql4218 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql4220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_wrb4227 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb4229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_pdt4238 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt4240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred13_ChemicalChunker306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred14_ChemicalChunker308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred15_ChemicalChunker310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred17_ChemicalChunker314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred19_ChemicalChunker318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred20_ChemicalChunker320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred21_ChemicalChunker322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred22_ChemicalChunker324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred23_ChemicalChunker326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred24_ChemicalChunker328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred28_ChemicalChunker336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred29_ChemicalChunker338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred30_ChemicalChunker340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred32_ChemicalChunker379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred34_ChemicalChunker414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred35_ChemicalChunker417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred36_ChemicalChunker422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred37_ChemicalChunker424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred38_ChemicalChunker426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred39_ChemicalChunker428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred40_ChemicalChunker436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred41_ChemicalChunker439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred42_ChemicalChunker443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred43_ChemicalChunker445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred44_ChemicalChunker447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred45_ChemicalChunker436 = new BitSet(new long[]{0x187FFFDC0000F800L,0x30002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_synpred45_ChemicalChunker439 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred45_ChemicalChunker443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred45_ChemicalChunker445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred45_ChemicalChunker447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred45_ChemicalChunker449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred47_ChemicalChunker465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred48_ChemicalChunker459 = new BitSet(new long[]{0x0040004000003802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred48_ChemicalChunker462 = new BitSet(new long[]{0x0040004000003802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred48_ChemicalChunker465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_synpred49_ChemicalChunker480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_synpred50_ChemicalChunker482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred51_ChemicalChunker513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred53_ChemicalChunker520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred55_ChemicalChunker531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred57_ChemicalChunker538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred59_ChemicalChunker554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred61_ChemicalChunker561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred63_ChemicalChunker572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred65_ChemicalChunker579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred66_ChemicalChunker567 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078008L});
    public static final BitSet FOLLOW_dtTHE_in_synpred66_ChemicalChunker569 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_synpred66_ChemicalChunker572 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_synpred66_ChemicalChunker575 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_synpred66_ChemicalChunker579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred66_ChemicalChunker581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred68_ChemicalChunker600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred69_ChemicalChunker602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred71_ChemicalChunker613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred73_ChemicalChunker620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred74_ChemicalChunker608 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078008L});
    public static final BitSet FOLLOW_dtTHE_in_synpred74_ChemicalChunker610 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_synpred74_ChemicalChunker613 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_synpred74_ChemicalChunker616 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_synpred74_ChemicalChunker620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred74_ChemicalChunker622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred77_ChemicalChunker672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred78_ChemicalChunker675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred84_ChemicalChunker694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred85_ChemicalChunker697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred86_ChemicalChunker700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred87_ChemicalChunker703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred88_ChemicalChunker706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred89_ChemicalChunker682 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_rbconj_in_synpred89_ChemicalChunker685 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adv_in_synpred89_ChemicalChunker688 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adj_in_synpred89_ChemicalChunker691 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_verb_in_synpred89_ChemicalChunker694 = new BitSet(new long[]{0xE7800003FFFC3002L,0x000000876EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_md_in_synpred89_ChemicalChunker697 = new BitSet(new long[]{0x0000000000003002L,0x0000008000000000L,0x0005B000000F8000L});
    public static final BitSet FOLLOW_adv_in_synpred89_ChemicalChunker700 = new BitSet(new long[]{0x0000000000003002L,0x0000008000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_adj_in_synpred89_ChemicalChunker703 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_neg_in_synpred89_ChemicalChunker706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_synpred90_ChemicalChunker712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred93_ChemicalChunker716 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_synpred93_ChemicalChunker719 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200028AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphrase_in_synpred93_ChemicalChunker722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred103_ChemicalChunker752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_synpred115_ChemicalChunker776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred136_ChemicalChunker847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred137_ChemicalChunker849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred142_ChemicalChunker870 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nounStructure_in_synpred142_ChemicalChunker872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred144_ChemicalChunker885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_synpred145_ChemicalChunker887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred146_ChemicalChunker889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred147_ChemicalChunker891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred148_ChemicalChunker893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred150_ChemicalChunker897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred151_ChemicalChunker899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred154_ChemicalChunker905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_synpred158_ChemicalChunker913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred159_ChemicalChunker915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred160_ChemicalChunker917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred164_ChemicalChunker925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred165_ChemicalChunker927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred166_ChemicalChunker929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred172_ChemicalChunker941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred181_ChemicalChunker959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred182_ChemicalChunker961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred183_ChemicalChunker963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred184_ChemicalChunker965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred190_ChemicalChunker977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred191_ChemicalChunker979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred205_ChemicalChunker1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred206_ChemicalChunker1102 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_synpred206_ChemicalChunker1104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred207_ChemicalChunker1121 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_synpred207_ChemicalChunker1123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred217_ChemicalChunker1279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred218_ChemicalChunker1281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred219_ChemicalChunker1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred221_ChemicalChunker1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred222_ChemicalChunker1289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred223_ChemicalChunker1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred224_ChemicalChunker1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred226_ChemicalChunker1297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred227_ChemicalChunker1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred228_ChemicalChunker1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred229_ChemicalChunker1303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred230_ChemicalChunker1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred231_ChemicalChunker1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred232_ChemicalChunker1309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred233_ChemicalChunker1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minimixture_in_synpred235_ChemicalChunker1319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred236_ChemicalChunker1321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred237_ChemicalChunker1323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred238_ChemicalChunker1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred239_ChemicalChunker1327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred241_ChemicalChunker1331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred242_ChemicalChunker1333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred243_ChemicalChunker1335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred244_ChemicalChunker1337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred246_ChemicalChunker1341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred247_ChemicalChunker1343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred248_ChemicalChunker1345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred249_ChemicalChunker1347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred250_ChemicalChunker1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred251_ChemicalChunker1351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred252_ChemicalChunker1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred253_ChemicalChunker1355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred255_ChemicalChunker1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred257_ChemicalChunker1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred258_ChemicalChunker1423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred259_ChemicalChunker1425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred261_ChemicalChunker1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred262_ChemicalChunker1431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred263_ChemicalChunker1433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred264_ChemicalChunker1435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred266_ChemicalChunker1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred267_ChemicalChunker1441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred268_ChemicalChunker1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred269_ChemicalChunker1445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred270_ChemicalChunker1447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred271_ChemicalChunker1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred272_ChemicalChunker1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred273_ChemicalChunker1453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred275_ChemicalChunker1461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred276_ChemicalChunker1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred277_ChemicalChunker1465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred278_ChemicalChunker1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred280_ChemicalChunker1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred281_ChemicalChunker1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred282_ChemicalChunker1475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred283_ChemicalChunker1477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred285_ChemicalChunker1481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred286_ChemicalChunker1483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred287_ChemicalChunker1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred288_ChemicalChunker1487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred289_ChemicalChunker1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred290_ChemicalChunker1491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred291_ChemicalChunker1493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred292_ChemicalChunker1495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred294_ChemicalChunker1499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred305_ChemicalChunker1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred306_ChemicalChunker1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred307_ChemicalChunker1556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred308_ChemicalChunker1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred312_ChemicalChunker1662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred317_ChemicalChunker1678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred319_ChemicalChunker1742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred320_ChemicalChunker1747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred338_ChemicalChunker1822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred343_ChemicalChunker1837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred350_ChemicalChunker2009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred351_ChemicalChunker2009 = new BitSet(new long[]{0x0841084800003000L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_apparatus_in_synpred351_ChemicalChunker2012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnApp_in_synpred354_ChemicalChunker2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred355_ChemicalChunker2059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred356_ChemicalChunker2063 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred356_ChemicalChunker2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred357_ChemicalChunker2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred358_ChemicalChunker2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred359_ChemicalChunker2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred360_ChemicalChunker2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred361_ChemicalChunker2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred362_ChemicalChunker2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred363_ChemicalChunker2091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred364_ChemicalChunker2093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred367_ChemicalChunker2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurementtypes_in_synpred368_ChemicalChunker2131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred374_ChemicalChunker2183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_synpred376_ChemicalChunker2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_synpred378_ChemicalChunker2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred379_ChemicalChunker2235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred381_ChemicalChunker2268 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred381_ChemicalChunker2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred382_ChemicalChunker2274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred383_ChemicalChunker2307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred384_ChemicalChunker2332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred385_ChemicalChunker2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred386_ChemicalChunker2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred387_ChemicalChunker2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred388_ChemicalChunker2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred389_ChemicalChunker2361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred390_ChemicalChunker2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred391_ChemicalChunker2365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred392_ChemicalChunker2376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred396_ChemicalChunker2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred397_ChemicalChunker2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred398_ChemicalChunker2467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred399_ChemicalChunker2488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred400_ChemicalChunker2488 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002828D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_synpred400_ChemicalChunker2491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred401_ChemicalChunker2504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred402_ChemicalChunker2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred403_ChemicalChunker2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred404_ChemicalChunker2526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred409_ChemicalChunker2635 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_synpred409_ChemicalChunker2638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred414_ChemicalChunker2686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred415_ChemicalChunker2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred416_ChemicalChunker2690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred417_ChemicalChunker2692 = new BitSet(new long[]{0x0000000000000002L});

}