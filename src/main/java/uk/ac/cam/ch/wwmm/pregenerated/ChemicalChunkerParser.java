// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-08-17 18:48:30

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=33;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=35;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=34;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[776+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean followedByNumberWhichIsNotAReference(TokenStream stream){
    	if ("CD".equals(input.LT(1).getText())){
    		String tokenTypeFollowingTheCD = stream.LT(3).getText();
    		if ("NN-TIMES".equals(tokenTypeFollowingTheCD) || "COLON".equals(tokenTypeFollowingTheCD)){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean precededByProduct(TokenStream stream){
    	Token previousToken = stream.LT(-1);
    	if (previousToken !=null && previousToken.getText().equalsIgnoreCase("product")){
    		return true;
    	}
    	return false;
    }

    public boolean suitableVbYieldOrSynthesizeForReference(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("VB-YIELD".equals(nextTokenType.getText()) || "VB-SYNTHESIZE".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.toLowerCase().endsWith("ed")){
    			return true;
    		}
    	}
    	return false;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:1: document : ( sentence )+ -> ( ^( Sentence sentence ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence1 = null;


        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:9: ( ( sentence )+ -> ( ^( Sentence sentence ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:11: ( sentence )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:11: ( sentence )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_document202_static.FOLLOW_sentence_in_document202);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:20: -> ( ^( Sentence sentence ) )+
            {
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:23: ^( Sentence sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:1: sentence : ( procedureNounPhrase | sentenceStructure | unmatchedPhrase ) ( sentenceStructure | unmatchedPhrase )* ( stop )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);
        int sentence_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase2 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure3 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase4 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure5 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase6 = null;

        ChemicalChunkerParser.stop_return stop7 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:9: ( ( procedureNounPhrase | sentenceStructure | unmatchedPhrase ) ( sentenceStructure | unmatchedPhrase )* ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:12: ( procedureNounPhrase | sentenceStructure | unmatchedPhrase ) ( sentenceStructure | unmatchedPhrase )* ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:12: ( procedureNounPhrase | sentenceStructure | unmatchedPhrase )
            int alt2=3;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:13: procedureNounPhrase
                    {
                    pushFollow(FOLLOW_procedureNounPhrase_in_sentence223_static.FOLLOW_procedureNounPhrase_in_sentence223);
                    procedureNounPhrase2=procedureNounPhrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNounPhrase2.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:33: sentenceStructure
                    {
                    pushFollow(FOLLOW_sentenceStructure_in_sentence225_static.FOLLOW_sentenceStructure_in_sentence225);
                    sentenceStructure3=sentenceStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure3.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:51: unmatchedPhrase
                    {
                    pushFollow(FOLLOW_unmatchedPhrase_in_sentence227_static.FOLLOW_unmatchedPhrase_in_sentence227);
                    unmatchedPhrase4=unmatchedPhrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase4.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:68: ( sentenceStructure | unmatchedPhrase )*
            loop3:
            do {
                int alt3=3;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:69: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentence231_static.FOLLOW_sentenceStructure_in_sentence231);
            	    sentenceStructure5=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:87: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentence233_static.FOLLOW_unmatchedPhrase_in_sentence233);
            	    unmatchedPhrase6=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase6.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:105: ( stop )*
            loop4:
            do {
                int alt4=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt4=1;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentence237_static.FOLLOW_stop_in_sentence237);
            	    stop7=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop7.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentence_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase8 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase9 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase10 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter11 = null;

        ChemicalChunkerParser.advAdj_return advAdj12 = null;

        ChemicalChunkerParser.colon_return colon13 = null;

        ChemicalChunkerParser.conjunction_return conjunction14 = null;

        ChemicalChunkerParser.rbconj_return rbconj15 = null;

        ChemicalChunkerParser.comma_return comma16 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt5=0;
            loop5:
            do {
                int alt5=5;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure247_static.FOLLOW_nounphrase_in_sentenceStructure247);
            	    nounphrase8=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase8.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure249_static.FOLLOW_verbphrase_in_sentenceStructure249);
            	    verbphrase9=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase9.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure251_static.FOLLOW_prepphrase_in_sentenceStructure251);
            	    prepphrase10=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase10.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure253_static.FOLLOW_prepphraseAfter_in_sentenceStructure253);
            	    prepphraseAfter11=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter11.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:73: ( advAdj | colon )*
            loop6:
            do {
                int alt6=3;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure258_static.FOLLOW_advAdj_in_sentenceStructure258);
            	    advAdj12=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj12.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure260_static.FOLLOW_colon_in_sentenceStructure260);
            	    colon13=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:89: ( conjunction | rbconj | comma )*
            loop7:
            do {
                int alt7=4;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure265_static.FOLLOW_conjunction_in_sentenceStructure265);
            	    conjunction14=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction14.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure267_static.FOLLOW_rbconj_in_sentenceStructure267);
            	    rbconj15=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj15.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure269_static.FOLLOW_comma_in_sentenceStructure269);
            	    comma16=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma16.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken17 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase281_static.FOLLOW_unmatchedToken_in_unmatchedPhrase281);
            unmatchedToken17=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken17.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 94:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric18 = null;

        ChemicalChunkerParser.advAdj_return advAdj19 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode20 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode21 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp22 = null;

        ChemicalChunkerParser.inAll_return inAll23 = null;

        ChemicalChunkerParser.nnexample_return nnexample24 = null;

        ChemicalChunkerParser.nnstate_return nnstate25 = null;

        ChemicalChunkerParser.nntime_return nntime26 = null;

        ChemicalChunkerParser.nnmass_return nnmass27 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar28 = null;

        ChemicalChunkerParser.nnamount_return nnamount29 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere30 = null;

        ChemicalChunkerParser.nneq_return nneq31 = null;

        ChemicalChunkerParser.nnvol_return nnvol32 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity33 = null;

        ChemicalChunkerParser.nntemp_return nntemp34 = null;

        ChemicalChunkerParser.nnph_return nnph35 = null;

        ChemicalChunkerParser.nnflash_return nnflash36 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral37 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod38 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure39 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn40 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography41 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum42 = null;

        ChemicalChunkerParser.nncycle_return nncycle43 = null;

        ChemicalChunkerParser.nntimes_return nntimes44 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm45 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts46 = null;

        ChemicalChunkerParser.oscarase_return oscarase47 = null;

        ChemicalChunkerParser.verb_return verb48 = null;

        ChemicalChunkerParser.nnadd_return nnadd49 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture50 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus51 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate52 = null;

        ChemicalChunkerParser.nndry_return nndry53 = null;

        ChemicalChunkerParser.nnextract_return nnextract54 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter55 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate56 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify57 = null;

        ChemicalChunkerParser.nnremove_return nnremove58 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize59 = null;

        ChemicalChunkerParser.nnyield_return nnyield60 = null;

        ChemicalChunkerParser.colon_return colon61 = null;

        ChemicalChunkerParser.apost_return apost62 = null;

        ChemicalChunkerParser.neg_return neg63 = null;

        ChemicalChunkerParser.dash_return dash64 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent65 = null;

        ChemicalChunkerParser.lsqb_return lsqb66 = null;

        ChemicalChunkerParser.rsqb_return rsqb67 = null;

        ChemicalChunkerParser.lrb_return lrb68 = null;

        ChemicalChunkerParser.rrb_return rrb69 = null;

        ChemicalChunkerParser.cc_return cc70 = null;

        ChemicalChunkerParser.dt_return dt71 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE72 = null;

        ChemicalChunkerParser.fw_return fw73 = null;

        ChemicalChunkerParser.md_return md74 = null;

        ChemicalChunkerParser.nn_return nn75 = null;

        ChemicalChunkerParser.nns_return nns76 = null;

        ChemicalChunkerParser.nnp_return nnp77 = null;

        ChemicalChunkerParser.prp_return prp78 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss79 = null;

        ChemicalChunkerParser.rbconj_return rbconj80 = null;

        ChemicalChunkerParser.sym_return sym81 = null;

        ChemicalChunkerParser.uh_return uh82 = null;

        ChemicalChunkerParser.clause_return clause83 = null;

        ChemicalChunkerParser.comma_return comma84 = null;

        ChemicalChunkerParser.ls_return ls85 = null;

        ChemicalChunkerParser.nnps_return nnps86 = null;

        ChemicalChunkerParser.pos_return pos87 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier88 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt8=71;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt8=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt8=2;
                }
                break;
            case 43:
                {
                alt8=3;
                }
                break;
            case 44:
                {
                alt8=4;
                }
                break;
            case 46:
                {
                alt8=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 150:
            case 169:
                {
                alt8=6;
                }
                break;
            case 83:
                {
                alt8=7;
                }
                break;
            case 63:
                {
                alt8=8;
                }
                break;
            case 64:
                {
                alt8=9;
                }
                break;
            case 65:
                {
                alt8=10;
                }
                break;
            case 67:
                {
                alt8=11;
                }
                break;
            case 66:
                {
                alt8=12;
                }
                break;
            case 68:
                {
                alt8=13;
                }
                break;
            case 69:
                {
                alt8=14;
                }
                break;
            case 70:
                {
                alt8=15;
                }
                break;
            case 71:
                {
                alt8=16;
                }
                break;
            case 72:
                {
                alt8=17;
                }
                break;
            case 73:
                {
                alt8=18;
                }
                break;
            case 74:
                {
                alt8=19;
                }
                break;
            case 75:
                {
                alt8=20;
                }
                break;
            case 76:
                {
                alt8=21;
                }
                break;
            case 77:
                {
                alt8=22;
                }
                break;
            case 78:
                {
                alt8=23;
                }
                break;
            case 79:
                {
                alt8=24;
                }
                break;
            case 80:
                {
                alt8=25;
                }
                break;
            case 81:
                {
                alt8=26;
                }
                break;
            case 82:
                {
                alt8=27;
                }
                break;
            case 84:
                {
                alt8=28;
                }
                break;
            case 42:
                {
                alt8=29;
                }
                break;
            case 41:
                {
                alt8=30;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt8=31;
                }
                break;
            case 89:
                {
                alt8=32;
                }
                break;
            case 90:
                {
                alt8=33;
                }
                break;
            case 100:
                {
                alt8=34;
                }
                break;
            case 102:
                {
                alt8=35;
                }
                break;
            case 107:
                {
                alt8=36;
                }
                break;
            case 109:
                {
                alt8=37;
                }
                break;
            case 111:
                {
                alt8=38;
                }
                break;
            case 117:
                {
                alt8=39;
                }
                break;
            case 119:
                {
                alt8=40;
                }
                break;
            case 123:
                {
                alt8=41;
                }
                break;
            case 126:
                {
                alt8=42;
                }
                break;
            case 130:
                {
                alt8=43;
                }
                break;
            case 132:
                {
                alt8=44;
                }
                break;
            case 134:
                {
                alt8=45;
                }
                break;
            case 135:
                {
                alt8=46;
                }
                break;
            case 136:
                {
                alt8=47;
                }
                break;
            case 138:
                {
                alt8=48;
                }
                break;
            case 139:
                {
                alt8=49;
                }
                break;
            case 140:
                {
                alt8=50;
                }
                break;
            case 143:
                {
                alt8=51;
                }
                break;
            case 144:
                {
                alt8=52;
                }
                break;
            case 145:
                {
                alt8=53;
                }
                break;
            case 147:
                {
                alt8=54;
                }
                break;
            case 142:
                {
                alt8=55;
                }
                break;
            case 149:
                {
                alt8=56;
                }
                break;
            case 155:
                {
                alt8=57;
                }
                break;
            case 156:
                {
                alt8=58;
                }
                break;
            case 157:
                {
                alt8=59;
                }
                break;
            case 158:
                {
                alt8=60;
                }
                break;
            case 162:
                {
                alt8=61;
                }
                break;
            case 163:
                {
                alt8=62;
                }
                break;
            case 131:
                {
                alt8=63;
                }
                break;
            case 168:
                {
                alt8=64;
                }
                break;
            case 170:
                {
                alt8=65;
                }
                break;
            case 148:
            case 160:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt8=66;
                }
                break;
            case 133:
                {
                alt8=67;
                }
                break;
            case 154:
                {
                alt8=68;
                }
                break;
            case 159:
                {
                alt8=69;
                }
                break;
            case 161:
                {
                alt8=70;
                }
                break;
            case 141:
                {
                alt8=71;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken300_static.FOLLOW_numeric_in_unmatchedToken300);
                    numeric18=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric18.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken302_static.FOLLOW_advAdj_in_unmatchedToken302);
                    advAdj19=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj19.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken304_static.FOLLOW_tmunicode_in_unmatchedToken304);
                    tmunicode20=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode20.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken306_static.FOLLOW_cdunicode_in_unmatchedToken306);
                    cdunicode21=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode21.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken308_static.FOLLOW_jjcomp_in_unmatchedToken308);
                    jjcomp22=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp22.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken310_static.FOLLOW_inAll_in_unmatchedToken310);
                    inAll23=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll23.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken314_static.FOLLOW_nnexample_in_unmatchedToken314);
                    nnexample24=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample24.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken316_static.FOLLOW_nnstate_in_unmatchedToken316);
                    nnstate25=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate25.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken318_static.FOLLOW_nntime_in_unmatchedToken318);
                    nntime26=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime26.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken320_static.FOLLOW_nnmass_in_unmatchedToken320);
                    nnmass27=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass27.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken322_static.FOLLOW_nnmolar_in_unmatchedToken322);
                    nnmolar28=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar28.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken324_static.FOLLOW_nnamount_in_unmatchedToken324);
                    nnamount29=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount29.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken326_static.FOLLOW_nnatmosphere_in_unmatchedToken326);
                    nnatmosphere30=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere30.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken328_static.FOLLOW_nneq_in_unmatchedToken328);
                    nneq31=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq31.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken330_static.FOLLOW_nnvol_in_unmatchedToken330);
                    nnvol32=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol32.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken332_static.FOLLOW_nnchementity_in_unmatchedToken332);
                    nnchementity33=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity33.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken334_static.FOLLOW_nntemp_in_unmatchedToken334);
                    nntemp34=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp34.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken336_static.FOLLOW_nnph_in_unmatchedToken336);
                    nnph35=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph35.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken338_static.FOLLOW_nnflash_in_unmatchedToken338);
                    nnflash36=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash36.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken340_static.FOLLOW_nngeneral_in_unmatchedToken340);
                    nngeneral37=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral37.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken342_static.FOLLOW_nnmethod_in_unmatchedToken342);
                    nnmethod38=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod38.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken344_static.FOLLOW_nnpressure_in_unmatchedToken344);
                    nnpressure39=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure39.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken346_static.FOLLOW_nncolumn_in_unmatchedToken346);
                    nncolumn40=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn40.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken348_static.FOLLOW_nnchromatography_in_unmatchedToken348);
                    nnchromatography41=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography41.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken350_static.FOLLOW_nnvacuum_in_unmatchedToken350);
                    nnvacuum42=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum42.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken352_static.FOLLOW_nncycle_in_unmatchedToken352);
                    nncycle43=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle43.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken354_static.FOLLOW_nntimes_in_unmatchedToken354);
                    nntimes44=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes44.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken358_static.FOLLOW_oscarcm_in_unmatchedToken358);
                    oscarcm45=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm45.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken360_static.FOLLOW_oscaronts_in_unmatchedToken360);
                    oscaronts46=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts46.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken362_static.FOLLOW_oscarase_in_unmatchedToken362);
                    oscarase47=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase47.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken364_static.FOLLOW_verb_in_unmatchedToken364);
                    verb48=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb48.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken366_static.FOLLOW_nnadd_in_unmatchedToken366);
                    nnadd49=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd49.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken368_static.FOLLOW_nnmixture_in_unmatchedToken368);
                    nnmixture50=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture50.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken370_static.FOLLOW_nnapparatus_in_unmatchedToken370);
                    nnapparatus51=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus51.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken372_static.FOLLOW_nnconcentrate_in_unmatchedToken372);
                    nnconcentrate52=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate52.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken374_static.FOLLOW_nndry_in_unmatchedToken374);
                    nndry53=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry53.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken376_static.FOLLOW_nnextract_in_unmatchedToken376);
                    nnextract54=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract54.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken378_static.FOLLOW_nnfilter_in_unmatchedToken378);
                    nnfilter55=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter55.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken380_static.FOLLOW_nnprecipitate_in_unmatchedToken380);
                    nnprecipitate56=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate56.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken382_static.FOLLOW_nnpurify_in_unmatchedToken382);
                    nnpurify57=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify57.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken384_static.FOLLOW_nnremove_in_unmatchedToken384);
                    nnremove58=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove58.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken386_static.FOLLOW_nnsynthesize_in_unmatchedToken386);
                    nnsynthesize59=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize59.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken388_static.FOLLOW_nnyield_in_unmatchedToken388);
                    nnyield60=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield60.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken390_static.FOLLOW_colon_in_unmatchedToken390);
                    colon61=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon61.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken392_static.FOLLOW_apost_in_unmatchedToken392);
                    apost62=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost62.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken394_static.FOLLOW_neg_in_unmatchedToken394);
                    neg63=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg63.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken396_static.FOLLOW_dash_in_unmatchedToken396);
                    dash64=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash64.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:175: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken398_static.FOLLOW_nnpercent_in_unmatchedToken398);
                    nnpercent65=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent65.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:185: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken400_static.FOLLOW_lsqb_in_unmatchedToken400);
                    lsqb66=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb66.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:190: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken402_static.FOLLOW_rsqb_in_unmatchedToken402);
                    rsqb67=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb67.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:195: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken404_static.FOLLOW_lrb_in_unmatchedToken404);
                    lrb68=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb68.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:199: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken406_static.FOLLOW_rrb_in_unmatchedToken406);
                    rrb69=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb69.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken410_static.FOLLOW_cc_in_unmatchedToken410);
                    cc70=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc70.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken412_static.FOLLOW_dt_in_unmatchedToken412);
                    dt71=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt71.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken414_static.FOLLOW_dtTHE_in_unmatchedToken414);
                    dtTHE72=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE72.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken416_static.FOLLOW_fw_in_unmatchedToken416);
                    fw73=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw73.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken418_static.FOLLOW_md_in_unmatchedToken418);
                    md74=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md74.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken420_static.FOLLOW_nn_in_unmatchedToken420);
                    nn75=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn75.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken422_static.FOLLOW_nns_in_unmatchedToken422);
                    nns76=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns76.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken424_static.FOLLOW_nnp_in_unmatchedToken424);
                    nnp77=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp77.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken426_static.FOLLOW_prp_in_unmatchedToken426);
                    prp78=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp78.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken428_static.FOLLOW_prp_poss_in_unmatchedToken428);
                    prp_poss79=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss79.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken430_static.FOLLOW_rbconj_in_unmatchedToken430);
                    rbconj80=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj80.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken432_static.FOLLOW_sym_in_unmatchedToken432);
                    sym81=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym81.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken434_static.FOLLOW_uh_in_unmatchedToken434);
                    uh82=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh82.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken436_static.FOLLOW_clause_in_unmatchedToken436);
                    clause83=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause83.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken438_static.FOLLOW_comma_in_unmatchedToken438);
                    comma84=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma84.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken440_static.FOLLOW_ls_in_unmatchedToken440);
                    ls85=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls85.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken442_static.FOLLOW_nnps_in_unmatchedToken442);
                    nnps86=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps86.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken444_static.FOLLOW_pos_in_unmatchedToken444);
                    pos87=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos87.getTree());

                    }
                    break;
                case 71 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken446_static.FOLLOW_nnidentifier_in_unmatchedToken446);
                    nnidentifier88=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier88.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class procedureNounPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNounPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:1: procedureNounPhrase : headingProcedure -> ^( NounPhrase headingProcedure ) ;
    public final ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase() throws RecognitionException {
        ChemicalChunkerParser.procedureNounPhrase_return retval = new ChemicalChunkerParser.procedureNounPhrase_return();
        retval.start = input.LT(1);
        int procedureNounPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedure_return headingProcedure89 = null;


        RewriteRuleSubtreeStream stream_headingProcedure=new RewriteRuleSubtreeStream(adaptor,"rule headingProcedure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:2: ( headingProcedure -> ^( NounPhrase headingProcedure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:4: headingProcedure
            {
            pushFollow(FOLLOW_headingProcedure_in_procedureNounPhrase456_static.FOLLOW_headingProcedure_in_procedureNounPhrase456);
            headingProcedure89=headingProcedure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_headingProcedure.add(headingProcedure89.getTree());


            // AST REWRITE
            // elements: headingProcedure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 103:22: -> ^( NounPhrase headingProcedure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:25: ^( NounPhrase headingProcedure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_headingProcedure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, procedureNounPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNounPhrase"

    public static class headingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:1: headingProcedure : ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? );
    public final ChemicalChunkerParser.headingProcedure_return headingProcedure() throws RecognitionException {
        ChemicalChunkerParser.headingProcedure_return retval = new ChemicalChunkerParser.headingProcedure_return();
        retval.start = input.LT(1);
        int headingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator90 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators91 = null;

        ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure92 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators93 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:2: ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? )
            int alt10=2;
            switch ( input.LA(1) ) {
            case 38:
            case 141:
            case 146:
                {
                alt10=1;
                }
                break;
            case 139:
            case 143:
                {
                alt10=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:4: headingProcedureRequiringTerminator headingProcedureTerminators
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475_static.FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475);
                    headingProcedureRequiringTerminator90=headingProcedureRequiringTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureRequiringTerminator90.getTree());
                    pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure477_static.FOLLOW_headingProcedureTerminators_in_headingProcedure477);
                    headingProcedureTerminators91=headingProcedureTerminators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators91.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:70: bracketedHeadingProcedure ( headingProcedureTerminators )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedHeadingProcedure_in_headingProcedure481_static.FOLLOW_bracketedHeadingProcedure_in_headingProcedure481);
                    bracketedHeadingProcedure92=bracketedHeadingProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedHeadingProcedure92.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:96: ( headingProcedureTerminators )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case 144:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_5 = input.LA(3);

                                    if ( (synpred87_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 137:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_6 = input.LA(3);

                                    if ( (synpred87_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_7 = input.LA(3);

                                    if ( (synpred87_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: headingProcedureTerminators
                            {
                            pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure483_static.FOLLOW_headingProcedureTerminators_in_headingProcedure483);
                            headingProcedureTerminators93=headingProcedureTerminators();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators93.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, headingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedure"

    public static class headingProcedureRequiringTerminator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureRequiringTerminator"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:1: headingProcedureRequiringTerminator : ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureRequiringTerminator_return retval = new ChemicalChunkerParser.headingProcedureRequiringTerminator_return();
        retval.start = input.LT(1);
        int headingProcedureRequiringTerminator_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier94 = null;

        ChemicalChunkerParser.numeric_return numeric95 = null;


        RewriteRuleSubtreeStream stream_nnidentifier=new RewriteRuleSubtreeStream(adaptor,"rule nnidentifier");
        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:2: ( ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:4: ( nnidentifier | numeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:4: ( nnidentifier | numeric )
            int alt11=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt11=1;
                }
                break;
            case 38:
            case 146:
                {
                alt11=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:5: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494_static.FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494);
                    nnidentifier94=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnidentifier.add(nnidentifier94.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:18: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_headingProcedureRequiringTerminator496_static.FOLLOW_numeric_in_headingProcedureRequiringTerminator496);
                    numeric95=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric95.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numeric, nnidentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 109:27: -> ^( PROCEDURE ( nnidentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:30: ^( PROCEDURE ( nnidentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:42: ( nnidentifier )?
                if ( stream_nnidentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnidentifier.nextTree());

                }
                stream_nnidentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:56: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, headingProcedureRequiringTerminator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureRequiringTerminator"

    public static class bracketedHeadingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedHeadingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:1: bracketedHeadingProcedure : ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure() throws RecognitionException {
        ChemicalChunkerParser.bracketedHeadingProcedure_return retval = new ChemicalChunkerParser.bracketedHeadingProcedure_return();
        retval.start = input.LT(1);
        int bracketedHeadingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier96 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric97 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference98 = null;


        RewriteRuleSubtreeStream stream_bracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule bracketedIdentifier");
        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:2: ( ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 141:
                                {
                                alt12=1;
                                }
                                break;
                            case 144:
                                {
                                alt12=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 12, 7, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 12, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt12=1;
                        }
                        break;
                    case 38:
                        {
                        alt12=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 12, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }

                }
                break;
            case 139:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:5: bracketedIdentifier
                    {
                    pushFollow(FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519_static.FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519);
                    bracketedIdentifier96=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedIdentifier.add(bracketedIdentifier96.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:27: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523_static.FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523);
                    bracketedNumeric97=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric97.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:46: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527_static.FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527);
                    squareBracketedReference98=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference98.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, bracketedIdentifier, bracketedNumeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 112:72: -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:75: ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:87: ( bracketedIdentifier )?
                if ( stream_bracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedIdentifier.nextTree());

                }
                stream_bracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:108: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:126: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bracketedHeadingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedHeadingProcedure"

    public static class headingProcedureTerminators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureTerminators"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:1: headingProcedureTerminators : ( rrb | stop | colon );
    public final ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureTerminators_return retval = new ChemicalChunkerParser.headingProcedureTerminators_return();
        retval.start = input.LT(1);
        int headingProcedureTerminators_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rrb_return rrb99 = null;

        ChemicalChunkerParser.stop_return stop100 = null;

        ChemicalChunkerParser.colon_return colon101 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:2: ( rrb | stop | colon )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt13=1;
                }
                break;
            case 137:
                {
                alt13=2;
                }
                break;
            case 132:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:4: rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rrb_in_headingProcedureTerminators552_static.FOLLOW_rrb_in_headingProcedureTerminators552);
                    rrb99=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb99.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:8: stop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stop_in_headingProcedureTerminators554_static.FOLLOW_stop_in_headingProcedureTerminators554);
                    stop100=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop100.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:13: colon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_headingProcedureTerminators556_static.FOLLOW_colon_in_headingProcedureTerminators556);
                    colon101=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon101.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, headingProcedureTerminators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureTerminators"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure102 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase565_static.FOLLOW_nounphraseStructure_in_nounphrase565);
            nounphraseStructure102=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure102.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 118:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1103 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2104 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure584_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure584);
                    nounphraseStructure1103=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure1103.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure586_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure586);
                    nounphraseStructure2104=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure2104.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus105 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1595_static.FOLLOW_multiApparatus_in_nounphraseStructure1595);
            multiApparatus105=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus105.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 123:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE106 = null;

        ChemicalChunkerParser.dt_return dt107 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent108 = null;

        ChemicalChunkerParser.conjunction_return conjunction109 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent110 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf111 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN112 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:4: ( dtTHE )?
            int alt15=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt15=1;
                    }
                    break;
            }

            switch (alt15) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2612_static.FOLLOW_dtTHE_in_nounphraseStructure2612);
                    dtTHE106=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE106.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:11: ( dt )?
            int alt16=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA16_3 = input.LA(3);

                            if ( (synpred95_ChemicalChunker()) ) {
                                alt16=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt16) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2615_static.FOLLOW_dt_in_nounphraseStructure2615);
                    dt107=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt107.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2618_static.FOLLOW_nounphraseContent_in_nounphraseStructure2618);
            nounphraseContent108=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent108.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:34: ( ( conjunction )* nounphraseContent )*
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:35: ( conjunction )* nounphraseContent
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:35: ( conjunction )*
            	    loop17:
            	    do {
            	        int alt17=2;
            	        alt17 = dfa17.predict(input);
            	        switch (alt17) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2622_static.FOLLOW_conjunction_in_nounphraseStructure2622);
            	    	    conjunction109=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction109.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop17;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2625_static.FOLLOW_nounphraseContent_in_nounphraseStructure2625);
            	    nounphraseContent110=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent110.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:68: ( prepphraseOf | prepphraseIN )?
            int alt19=3;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    int LA19_1 = input.LA(2);

                    if ( (synpred98_ChemicalChunker()) ) {
                        alt19=1;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred99_ChemicalChunker()) ) {
                        alt19=2;
                    }
                    }
                    break;
            }

            switch (alt19) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:69: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2630_static.FOLLOW_prepphraseOf_in_nounphraseStructure2630);
                    prepphraseOf111=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf111.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:83: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2633_static.FOLLOW_prepphraseIN_in_nounphraseStructure2633);
                    prepphraseIN112=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN112.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj113 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase114 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio115 = null;

        ChemicalChunkerParser.noun_return noun116 = null;

        ChemicalChunkerParser.numeric_return numeric117 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:2: ( ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:4: ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:4: ( advAdj )*
            loop20:
            do {
                int alt20=2;
                alt20 = dfa20.predict(input);
                switch (alt20) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent645_static.FOLLOW_advAdj_in_nounphraseContent645);
            	    advAdj113=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj113.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+
            int cnt21=0;
            loop21:
            do {
                int alt21=5;
                alt21 = dfa21.predict(input);
                switch (alt21) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent650_static.FOLLOW_dissolvePhrase_in_nounphraseContent650);
            	    dissolvePhrase114=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase114.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:29: ratioOrBracketedRatio
            	    {
            	    pushFollow(FOLLOW_ratioOrBracketedRatio_in_nounphraseContent652_static.FOLLOW_ratioOrBracketedRatio_in_nounphraseContent652);
            	    ratioOrBracketedRatio115=ratioOrBracketedRatio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio115.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:51: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent654_static.FOLLOW_noun_in_nounphraseContent654);
            	    noun116=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun116.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:56: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent656_static.FOLLOW_numeric_in_nounphraseContent656);
            	    numeric117=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric117.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:130:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure118 = null;

        ChemicalChunkerParser.lrb_return lrb119 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure120 = null;

        ChemicalChunkerParser.rrb_return rrb121 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase668_static.FOLLOW_dissolveStructure_in_dissolvePhrase668);
                    dissolveStructure118=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure118.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase670_static.FOLLOW_lrb_in_dissolvePhrase670);
                    lrb119=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb119.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase672_static.FOLLOW_dissolveStructure_in_dissolvePhrase672);
                    dissolveStructure120=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure120.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase674_static.FOLLOW_rrb_in_dissolvePhrase674);
                    rrb121=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb121.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure, lrb, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 131:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj122 = null;

        ChemicalChunkerParser.nnp_return nnp123 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity124 = null;

        ChemicalChunkerParser.nnp_return nnp125 = null;

        ChemicalChunkerParser.molecule_return molecule126 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule127 = null;

        ChemicalChunkerParser.inMolecule_return inMolecule128 = null;

        ChemicalChunkerParser.conjunction_return conjunction129 = null;

        ChemicalChunkerParser.molecule_return molecule130 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:4: ( adj )?
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure699_static.FOLLOW_adj_in_dissolveStructure699);
                    adj122=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj122.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt26=2;
            switch ( input.LA(1) ) {
            case 158:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 38:
                            case 47:
                            case 56:
                            case 59:
                            case 73:
                            case 125:
                            case 129:
                            case 130:
                            case 133:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                                {
                                alt26=2;
                                }
                                break;
                            case 50:
                                {
                                alt26=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 26, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 45:
                    case 46:
                    case 63:
                    case 68:
                    case 73:
                    case 83:
                    case 84:
                    case 90:
                    case 130:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                        {
                        alt26=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 73:
            case 83:
            case 84:
            case 90:
            case 130:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
                {
                alt26=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure703_static.FOLLOW_nnp_in_dissolveStructure703);
                    nnp123=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp123.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure705_static.FOLLOW_nnchementity_in_dissolveStructure705);
                    nnchementity124=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity124.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:28: ( nnp )?
                    int alt24=2;
                    switch ( input.LA(1) ) {
                        case 158:
                            {
                            alt24=1;
                            }
                            break;
                    }

                    switch (alt24) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure708_static.FOLLOW_nnp_in_dissolveStructure708);
                            nnp125=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp125.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:32: ( molecule | unnamedmolecule )
                    int alt25=2;
                    alt25 = dfa25.predict(input);
                    switch (alt25) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure711_static.FOLLOW_molecule_in_dissolveStructure711);
                            molecule126=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule126.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure713_static.FOLLOW_unnamedmolecule_in_dissolveStructure713);
                            unnamedmolecule127=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule127.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_inMolecule_in_dissolveStructure717_static.FOLLOW_inMolecule_in_dissolveStructure717);
            inMolecule128=inMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inMolecule128.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:71: ( conjunction molecule )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:72: conjunction molecule
            	    {
            	    pushFollow(FOLLOW_conjunction_in_dissolveStructure720_static.FOLLOW_conjunction_in_dissolveStructure720);
            	    conjunction129=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction129.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure722_static.FOLLOW_molecule_in_dissolveStructure722);
            	    molecule130=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule130.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class inMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:1: inMolecule : inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ;
    public final ChemicalChunkerParser.inMolecule_return inMolecule() throws RecognitionException {
        ChemicalChunkerParser.inMolecule_return retval = new ChemicalChunkerParser.inMolecule_return();
        retval.start = input.LT(1);
        int inMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin131 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE132 = null;

        ChemicalChunkerParser.adj_return adj133 = null;

        ChemicalChunkerParser.nnp_return nnp134 = null;

        ChemicalChunkerParser.molecule_return molecule135 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule136 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:2: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:4: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inin_in_inMolecule734_static.FOLLOW_inin_in_inMolecule734);
            inin131=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin131.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:9: ( dtTHE )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt28=1;
                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_inMolecule736_static.FOLLOW_dtTHE_in_inMolecule736);
                    dtTHE132=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE132.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:16: ( adj )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_inMolecule739_static.FOLLOW_adj_in_inMolecule739);
                    adj133=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj133.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:21: ( nnp )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_inMolecule742_static.FOLLOW_nnp_in_inMolecule742);
                    nnp134=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp134.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:26: ( molecule | unnamedmolecule )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:27: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_inMolecule746_static.FOLLOW_molecule_in_inMolecule746);
                    molecule135=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule135.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:36: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_inMolecule748_static.FOLLOW_unnamedmolecule_in_inMolecule748);
                    unnamedmolecule136=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule136.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, inMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMolecule"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure137 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase758_static.FOLLOW_verbphraseStructure_in_verbphrase758);
            verbphraseStructure137=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure137.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt138 = null;

        ChemicalChunkerParser.to_return to139 = null;

        ChemicalChunkerParser.inAll_return inAll140 = null;

        ChemicalChunkerParser.inafter_return inafter141 = null;

        ChemicalChunkerParser.md_return md142 = null;

        ChemicalChunkerParser.rbconj_return rbconj143 = null;

        ChemicalChunkerParser.adv_return adv144 = null;

        ChemicalChunkerParser.adj_return adj145 = null;

        ChemicalChunkerParser.verb_return verb146 = null;

        ChemicalChunkerParser.md_return md147 = null;

        ChemicalChunkerParser.adv_return adv148 = null;

        ChemicalChunkerParser.adj_return adj149 = null;

        ChemicalChunkerParser.neg_return neg150 = null;

        ChemicalChunkerParser.inoff_return inoff151 = null;

        ChemicalChunkerParser.cc_return cc152 = null;

        ChemicalChunkerParser.comma_return comma153 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase154 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:24: ( dt )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure776_static.FOLLOW_dt_in_verbphraseStructure776);
                    dt138=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt138.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:28: ( to )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 169:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_3 = input.LA(3);

                            if ( (synpred116_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure779_static.FOLLOW_to_in_verbphraseStructure779);
                    to139=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to139.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:32: ( inAll )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt34=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA34_4 = input.LA(3);

                            if ( (synpred117_ChemicalChunker()) ) {
                                alt34=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure782_static.FOLLOW_inAll_in_verbphraseStructure782);
                    inAll140=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll140.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:39: ( inafter )?
            int alt35=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt35=1;
                    }
                    break;
            }

            switch (alt35) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure785_static.FOLLOW_inafter_in_verbphraseStructure785);
                    inafter141=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter141.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                alt45 = dfa45.predict(input);
                switch (alt45) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:49: ( md )*
            	    loop36:
            	    do {
            	        int alt36=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt36=1;
            	            }
            	            break;

            	        }

            	        switch (alt36) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure789_static.FOLLOW_md_in_verbphraseStructure789);
            	    	    md142=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md142.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop36;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:53: ( rbconj )?
            	    int alt37=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt37=1;
            	            }
            	            break;
            	    }

            	    switch (alt37) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure792_static.FOLLOW_rbconj_in_verbphraseStructure792);
            	            rbconj143=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj143.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:61: ( adv )*
            	    loop38:
            	    do {
            	        int alt38=2;
            	        switch ( input.LA(1) ) {
            	        case 164:
            	        case 165:
            	        case 166:
            	        case 167:
            	            {
            	            alt38=1;
            	            }
            	            break;

            	        }

            	        switch (alt38) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure795_static.FOLLOW_adv_in_verbphraseStructure795);
            	    	    adv144=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv144.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop38;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:66: ( adj )?
            	    int alt39=2;
            	    switch ( input.LA(1) ) {
            	        case 39:
            	        case 40:
            	        case 45:
            	        case 151:
            	        case 152:
            	        case 153:
            	            {
            	            alt39=1;
            	            }
            	            break;
            	    }

            	    switch (alt39) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure798_static.FOLLOW_adj_in_verbphraseStructure798);
            	            adj145=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj145.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:71: ( verb )+
            	    int cnt40=0;
            	    loop40:
            	    do {
            	        int alt40=2;
            	        alt40 = dfa40.predict(input);
            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure801_static.FOLLOW_verb_in_verbphraseStructure801);
            	    	    verb146=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb146.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt40 >= 1 ) break loop40;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(40, input);
            	                throw eee;
            	        }
            	        cnt40++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:77: ( md )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA41_3 = input.LA(3);

            	                if ( (synpred124_ChemicalChunker()) ) {
            	                    alt41=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure804_static.FOLLOW_md_in_verbphraseStructure804);
            	    	    md147=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md147.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:81: ( adv )*
            	    loop42:
            	    do {
            	        int alt42=2;
            	        alt42 = dfa42.predict(input);
            	        switch (alt42) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure807_static.FOLLOW_adv_in_verbphraseStructure807);
            	    	    adv148=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv148.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop42;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:86: ( adj )?
            	    int alt43=2;
            	    alt43 = dfa43.predict(input);
            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure810_static.FOLLOW_adj_in_verbphraseStructure810);
            	            adj149=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj149.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:91: ( neg )?
            	    int alt44=2;
            	    switch ( input.LA(1) ) {
            	        case 135:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA44_3 = input.LA(3);

            	                    if ( (synpred127_ChemicalChunker()) ) {
            	                        alt44=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt44) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure813_static.FOLLOW_neg_in_verbphraseStructure813);
            	            neg150=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg150.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:99: ( inoff )?
            int alt46=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA46_3 = input.LA(3);

                            if ( (synpred129_ChemicalChunker()) ) {
                                alt46=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt46) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure819_static.FOLLOW_inoff_in_verbphraseStructure819);
                    inoff151=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff151.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:106: ( ( cc )? ( comma )? prepphrase )*
            loop49:
            do {
                int alt49=2;
                alt49 = dfa49.predict(input);
                switch (alt49) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:107: ( cc )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure823_static.FOLLOW_cc_in_verbphraseStructure823);
            	            cc152=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc152.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:111: ( comma )?
            	    int alt48=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt48=1;
            	            }
            	            break;
            	    }

            	    switch (alt48) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure826_static.FOLLOW_comma_in_verbphraseStructure826);
            	            comma153=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma153.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure829_static.FOLLOW_prepphrase_in_verbphraseStructure829);
            	    prepphrase154=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase154.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb155 = null;

        ChemicalChunkerParser.vbp_return vbp156 = null;

        ChemicalChunkerParser.vbg_return vbg157 = null;

        ChemicalChunkerParser.vbd_return vbd158 = null;

        ChemicalChunkerParser.vbz_return vbz159 = null;

        ChemicalChunkerParser.vbn_return vbn160 = null;

        ChemicalChunkerParser.vbuse_return vbuse161 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge162 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse163 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb164 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject165 = null;

        ChemicalChunkerParser.vbadd_return vbadd166 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute167 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge168 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain169 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop170 = null;

        ChemicalChunkerParser.vbfill_return vbfill171 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend172 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat173 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus174 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate175 = null;

        ChemicalChunkerParser.vbcool_return vbcool176 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass177 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve178 = null;

        ChemicalChunkerParser.vbdry_return vbdry179 = null;

        ChemicalChunkerParser.vbextract_return vbextract180 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter181 = null;

        ChemicalChunkerParser.vbheat_return vbheat182 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease183 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition184 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate185 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify186 = null;

        ChemicalChunkerParser.vbquench_return vbquench187 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover188 = null;

        ChemicalChunkerParser.vbremove_return vbremove189 = null;

        ChemicalChunkerParser.vbstir_return vbstir190 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize191 = null;

        ChemicalChunkerParser.vbwait_return vbwait192 = null;

        ChemicalChunkerParser.vbwash_return vbwash193 = null;

        ChemicalChunkerParser.vbyield_return vbyield194 = null;

        ChemicalChunkerParser.vbchange_return vbchange195 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt50=41;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb841_static.FOLLOW_vb_in_verb841);
                    vb155=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb155.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb843_static.FOLLOW_vbp_in_verb843);
                    vbp156=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp156.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb845_static.FOLLOW_vbg_in_verb845);
                    vbg157=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg157.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb847_static.FOLLOW_vbd_in_verb847);
                    vbd158=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd158.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb849_static.FOLLOW_vbz_in_verb849);
                    vbz159=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz159.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb851_static.FOLLOW_vbn_in_verb851);
                    vbn160=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn160.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb853_static.FOLLOW_vbuse_in_verb853);
                    vbuse161=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse161.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb855_static.FOLLOW_vbsubmerge_in_verb855);
                    vbsubmerge162=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge162.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb857_static.FOLLOW_vbimmerse_in_verb857);
                    vbimmerse163=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse163.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb859_static.FOLLOW_degassMultiVerb_in_verb859);
                    degassMultiVerb164=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb164.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb861_static.FOLLOW_vbsubject_in_verb861);
                    vbsubject165=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject165.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb863_static.FOLLOW_vbadd_in_verb863);
                    vbadd166=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd166.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb865_static.FOLLOW_vbdilute_in_verb865);
                    vbdilute167=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute167.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb867_static.FOLLOW_vbcharge_in_verb867);
                    vbcharge168=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge168.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb869_static.FOLLOW_vbcontain_in_verb869);
                    vbcontain169=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain169.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb871_static.FOLLOW_vbdrop_in_verb871);
                    vbdrop170=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop170.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb873_static.FOLLOW_vbfill_in_verb873);
                    vbfill171=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill171.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb875_static.FOLLOW_vbsuspend_in_verb875);
                    vbsuspend172=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend172.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb877_static.FOLLOW_vbtreat_in_verb877);
                    vbtreat173=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat173.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb879_static.FOLLOW_vbapparatus_in_verb879);
                    vbapparatus174=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus174.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb881_static.FOLLOW_vbconcentrate_in_verb881);
                    vbconcentrate175=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate175.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb883_static.FOLLOW_vbcool_in_verb883);
                    vbcool176=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool176.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb885_static.FOLLOW_vbdegass_in_verb885);
                    vbdegass177=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass177.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb887_static.FOLLOW_vbdissolve_in_verb887);
                    vbdissolve178=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve178.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb889_static.FOLLOW_vbdry_in_verb889);
                    vbdry179=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry179.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb891_static.FOLLOW_vbextract_in_verb891);
                    vbextract180=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract180.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb893_static.FOLLOW_vbfilter_in_verb893);
                    vbfilter181=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter181.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb896_static.FOLLOW_vbheat_in_verb896);
                    vbheat182=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat182.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb898_static.FOLLOW_vbincrease_in_verb898);
                    vbincrease183=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease183.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb900_static.FOLLOW_vbpartition_in_verb900);
                    vbpartition184=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition184.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb902_static.FOLLOW_vbprecipitate_in_verb902);
                    vbprecipitate185=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate185.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb904_static.FOLLOW_vbpurify_in_verb904);
                    vbpurify186=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify186.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb906_static.FOLLOW_vbquench_in_verb906);
                    vbquench187=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench187.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb908_static.FOLLOW_vbrecover_in_verb908);
                    vbrecover188=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover188.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb910_static.FOLLOW_vbremove_in_verb910);
                    vbremove189=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove189.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb912_static.FOLLOW_vbstir_in_verb912);
                    vbstir190=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir190.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb914_static.FOLLOW_vbsynthesize_in_verb914);
                    vbsynthesize191=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize191.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb916_static.FOLLOW_vbwait_in_verb916);
                    vbwait192=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait192.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb918_static.FOLLOW_vbwash_in_verb918);
                    vbwash193=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash193.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb920_static.FOLLOW_vbyield_in_verb920);
                    vbyield194=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield194.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb922_static.FOLLOW_vbchange_in_verb922);
                    vbchange195=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange195.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass196 = null;

        ChemicalChunkerParser.cc_return cc197 = null;

        ChemicalChunkerParser.vbfill_return vbfill198 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb931_static.FOLLOW_vbdegass_in_degassMultiVerb931);
            vbdegass196=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass196.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb933_static.FOLLOW_cc_in_degassMultiVerb933);
            cc197=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc197.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb935_static.FOLLOW_vbfill_in_degassMultiVerb935);
            vbfill198=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill198.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure199 = null;

        ChemicalChunkerParser.dash_return dash200 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure201 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun944_static.FOLLOW_nounStructure_in_noun944);
            nounStructure199=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure199.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:23: ( dash nounStructure )*
            loop51:
            do {
                int alt51=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA51_2 = input.LA(2);

                    if ( (synpred173_ChemicalChunker()) ) {
                        alt51=1;
                    }


                    }
                    break;

                }

                switch (alt51) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun947_static.FOLLOW_dash_in_noun947);
            	    dash200=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash200.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun949_static.FOLLOW_nounStructure_in_noun949);
            	    nounStructure201=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure201.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp202 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss203 = null;

        ChemicalChunkerParser.citation_return citation204 = null;

        ChemicalChunkerParser.cycles_return cycles205 = null;

        ChemicalChunkerParser.molecule_return molecule206 = null;

        ChemicalChunkerParser.apparatus_return apparatus207 = null;

        ChemicalChunkerParser.mixture_return mixture208 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule209 = null;

        ChemicalChunkerParser.nnstate_return nnstate210 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode211 = null;

        ChemicalChunkerParser.nn_return nn212 = null;

        ChemicalChunkerParser.nns_return nns213 = null;

        ChemicalChunkerParser.nnp_return nnp214 = null;

        ChemicalChunkerParser.nnadd_return nnadd215 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase216 = null;

        ChemicalChunkerParser.nnexample_return nnexample217 = null;

        ChemicalChunkerParser.range_return range218 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts219 = null;

        ChemicalChunkerParser.nntime_return nntime220 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere221 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode222 = null;

        ChemicalChunkerParser.quantity_return quantity223 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity224 = null;

        ChemicalChunkerParser.nntemp_return nntemp225 = null;

        ChemicalChunkerParser.nnph_return nnph226 = null;

        ChemicalChunkerParser.nnflash_return nnflash227 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral228 = null;

        ChemicalChunkerParser.nnamount_return nnamount229 = null;

        ChemicalChunkerParser.nneq_return nneq230 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure231 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn232 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography233 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum234 = null;

        ChemicalChunkerParser.nncycle_return nncycle235 = null;

        ChemicalChunkerParser.nntimes_return nntimes236 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate237 = null;

        ChemicalChunkerParser.nnvol_return nnvol238 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify239 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize240 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture241 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference242 = null;

        ChemicalChunkerParser.nndry_return nndry243 = null;

        ChemicalChunkerParser.numeric_return numeric244 = null;

        ChemicalChunkerParser.nnextract_return nnextract245 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter246 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate247 = null;

        ChemicalChunkerParser.nnremove_return nnremove248 = null;

        ChemicalChunkerParser.nnyield_return nnyield249 = null;

        ChemicalChunkerParser.fw_return fw250 = null;

        ChemicalChunkerParser.sym_return sym251 = null;

        ChemicalChunkerParser.clause_return clause252 = null;

        ChemicalChunkerParser.ls_return ls253 = null;

        ChemicalChunkerParser.nnps_return nnps254 = null;

        ChemicalChunkerParser.pos_return pos255 = null;

        ChemicalChunkerParser.oscarase_return oscarase256 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt52=55;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure960_static.FOLLOW_prp_in_nounStructure960);
                    prp202=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp202.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure962_static.FOLLOW_prp_poss_in_nounStructure962);
                    prp_poss203=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss203.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure964_static.FOLLOW_citation_in_nounStructure964);
                    citation204=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation204.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure966_static.FOLLOW_cycles_in_nounStructure966);
                    cycles205=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles205.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure968_static.FOLLOW_molecule_in_nounStructure968);
                    molecule206=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule206.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure970_static.FOLLOW_apparatus_in_nounStructure970);
                    apparatus207=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus207.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure972_static.FOLLOW_mixture_in_nounStructure972);
                    mixture208=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture208.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure974_static.FOLLOW_unnamedmolecule_in_nounStructure974);
                    unnamedmolecule209=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule209.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:90: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure976_static.FOLLOW_nnstate_in_nounStructure976);
                    nnstate210=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate210.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:98: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure978_static.FOLLOW_procedureNode_in_nounStructure978);
                    procedureNode211=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode211.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:112: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure980_static.FOLLOW_nn_in_nounStructure980);
                    nn212=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn212.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:115: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure982_static.FOLLOW_nns_in_nounStructure982);
                    nns213=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns213.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:119: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure984_static.FOLLOW_nnp_in_nounStructure984);
                    nnp214=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp214.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:123: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure986_static.FOLLOW_nnadd_in_nounStructure986);
                    nnadd215=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd215.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:129: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure988_static.FOLLOW_preparationphrase_in_nounStructure988);
                    preparationphrase216=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase216.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:147: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure990_static.FOLLOW_nnexample_in_nounStructure990);
                    nnexample217=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample217.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:157: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure992_static.FOLLOW_range_in_nounStructure992);
                    range218=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range218.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:163: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure994_static.FOLLOW_oscaronts_in_nounStructure994);
                    oscaronts219=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts219.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:173: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure996_static.FOLLOW_nntime_in_nounStructure996);
                    nntime220=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime220.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:180: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure998_static.FOLLOW_nnatmosphere_in_nounStructure998);
                    nnatmosphere221=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere221.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:193: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure1000_static.FOLLOW_tmunicode_in_nounStructure1000);
                    tmunicode222=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode222.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:203: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure1002_static.FOLLOW_quantity_in_nounStructure1002);
                    quantity223=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity223.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:212: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure1004_static.FOLLOW_nnchementity_in_nounStructure1004);
                    nnchementity224=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity224.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:225: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1006_static.FOLLOW_nntemp_in_nounStructure1006);
                    nntemp225=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp225.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:232: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure1008_static.FOLLOW_nnph_in_nounStructure1008);
                    nnph226=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph226.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:237: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1010_static.FOLLOW_nnflash_in_nounStructure1010);
                    nnflash227=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash227.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:245: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1012_static.FOLLOW_nngeneral_in_nounStructure1012);
                    nngeneral228=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral228.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:255: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1014_static.FOLLOW_nnamount_in_nounStructure1014);
                    nnamount229=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount229.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:264: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1016_static.FOLLOW_nneq_in_nounStructure1016);
                    nneq230=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq230.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:269: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1018_static.FOLLOW_nnpressure_in_nounStructure1018);
                    nnpressure231=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure231.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:280: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1020_static.FOLLOW_nncolumn_in_nounStructure1020);
                    nncolumn232=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn232.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:289: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1022_static.FOLLOW_nnchromatography_in_nounStructure1022);
                    nnchromatography233=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography233.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:306: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1024_static.FOLLOW_nnvacuum_in_nounStructure1024);
                    nnvacuum234=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum234.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:315: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1026_static.FOLLOW_nncycle_in_nounStructure1026);
                    nncycle235=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle235.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:323: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1028_static.FOLLOW_nntimes_in_nounStructure1028);
                    nntimes236=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes236.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:331: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1030_static.FOLLOW_nnconcentrate_in_nounStructure1030);
                    nnconcentrate237=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate237.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:345: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1032_static.FOLLOW_nnvol_in_nounStructure1032);
                    nnvol238=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol238.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:351: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1034_static.FOLLOW_nnpurify_in_nounStructure1034);
                    nnpurify239=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify239.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:360: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1036_static.FOLLOW_nnsynthesize_in_nounStructure1036);
                    nnsynthesize240=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize240.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:373: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1038_static.FOLLOW_nnmixture_in_nounStructure1038);
                    nnmixture241=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture241.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:383: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure1040_static.FOLLOW_squareBracketedReference_in_nounStructure1040);
                    squareBracketedReference242=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference242.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:408: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1042_static.FOLLOW_nndry_in_nounStructure1042);
                    nndry243=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry243.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:414: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_nounStructure1044_static.FOLLOW_numeric_in_nounStructure1044);
                    numeric244=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric244.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:422: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1046_static.FOLLOW_nnextract_in_nounStructure1046);
                    nnextract245=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract245.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:432: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1048_static.FOLLOW_nnfilter_in_nounStructure1048);
                    nnfilter246=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter246.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:441: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1050_static.FOLLOW_nnprecipitate_in_nounStructure1050);
                    nnprecipitate247=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate247.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:455: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1052_static.FOLLOW_nnremove_in_nounStructure1052);
                    nnremove248=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove248.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:464: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure1054_static.FOLLOW_nnyield_in_nounStructure1054);
                    nnyield249=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield249.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:472: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1056_static.FOLLOW_fw_in_nounStructure1056);
                    fw250=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw250.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:475: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1058_static.FOLLOW_sym_in_nounStructure1058);
                    sym251=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym251.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:479: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1060_static.FOLLOW_clause_in_nounStructure1060);
                    clause252=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause252.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:486: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure1062_static.FOLLOW_ls_in_nounStructure1062);
                    ls253=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls253.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:489: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure1064_static.FOLLOW_nnps_in_nounStructure1064);
                    nnps254=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps254.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:494: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure1066_static.FOLLOW_pos_in_nounStructure1066);
                    pos255=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos255.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:498: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure1068_static.FOLLOW_oscarase_in_nounStructure1068);
                    oscarase256=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase256.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg257 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere258 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime259 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp260 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN261 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole262 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther263 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:5: ( neg )?
            int alt53=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt53=1;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1080_static.FOLLOW_neg_in_prepphrase1080);
                    neg257=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg257.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt54=6;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1084_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1084);
                    prepphraseAtmosphere258=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere258.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1086_static.FOLLOW_prepphraseTime_in_prepphrase1086);
                    prepphraseTime259=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime259.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1088_static.FOLLOW_prepphraseTemp_in_prepphrase1088);
                    prepphraseTemp260=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp260.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1090_static.FOLLOW_prepphraseIN_in_prepphrase1090);
                    prepphraseIN261=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN261.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1092_static.FOLLOW_prepphraseRole_in_prepphrase1092);
                    prepphraseRole262=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole262.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1094_static.FOLLOW_prepphraseOther_in_prepphrase1094);
                    prepphraseOther263=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther263.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:156:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent264 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106);
            prepphraseAtmosphereContent264=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent264.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder265 = null;

        ChemicalChunkerParser.dt_return dt266 = null;

        ChemicalChunkerParser.advAdj_return advAdj267 = null;

        ChemicalChunkerParser.molecule_return molecule268 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere269 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1126_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1126);
            inunder265=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder265.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:12: ( dt )?
            int alt55=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt55=1;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1129_static.FOLLOW_dt_in_prepphraseAtmosphereContent1129);
                    dt266=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt266.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:16: ( advAdj )*
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1132_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1132);
            	    advAdj267=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj267.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1135_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1135);
            molecule268=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule268.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:33: ( nnatmosphere )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA57_3 = input.LA(3);

                            if ( (synpred236_ChemicalChunker()) ) {
                                alt57=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137);
                    nnatmosphere269=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere269.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure270 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147);
            prepPhraseTimeStructure270=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure270.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 163:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj271 = null;

        ChemicalChunkerParser.inAll_return inAll272 = null;

        ChemicalChunkerParser.dt_return dt273 = null;

        ChemicalChunkerParser.advAdj_return advAdj274 = null;

        ChemicalChunkerParser.cd_return cd275 = null;

        ChemicalChunkerParser.nntime_return nntime276 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:3: ( advAdj )*
            loop58:
            do {
                int alt58=2;
                alt58 = dfa58.predict(input);
                switch (alt58) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1165_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1165);
            	    advAdj271=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj271.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:11: ( inAll )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1168_static.FOLLOW_inAll_in_prepPhraseTimeStructure1168);
                    inAll272=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll272.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:19: ( dt )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1172_static.FOLLOW_dt_in_prepPhraseTimeStructure1172);
                    dt273=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt273.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:23: ( advAdj )*
            loop61:
            do {
                int alt61=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt61=1;
                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1175_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1175);
            	    advAdj274=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj274.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:31: ( cd )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1178_static.FOLLOW_cd_in_prepPhraseTimeStructure1178);
                    cd275=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd275.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:35: ( nntime )+
            int cnt63=0;
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA63_2 = input.LA(2);

                    if ( (synpred242_ChemicalChunker()) ) {
                        alt63=1;
                    }


                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1181_static.FOLLOW_nntime_in_prepPhraseTimeStructure1181);
            	    nntime276=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime276.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        throw eee;
                }
                cnt63++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent277 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1191_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1191);
            prepphraseTempContent277=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent277.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 168:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj278 = null;

        ChemicalChunkerParser.inAll_return inAll279 = null;

        ChemicalChunkerParser.dt_return dt280 = null;

        ChemicalChunkerParser.advAdj_return advAdj281 = null;

        ChemicalChunkerParser.cd_return cd282 = null;

        ChemicalChunkerParser.nntemp_return nntemp283 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:5: ( advAdj )?
            int alt64=2;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1212_static.FOLLOW_advAdj_in_prepphraseTempContent1212);
                    advAdj278=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj278.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:13: ( inAll )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1215_static.FOLLOW_inAll_in_prepphraseTempContent1215);
                    inAll279=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll279.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:20: ( dt )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1218_static.FOLLOW_dt_in_prepphraseTempContent1218);
                    dt280=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt280.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:24: ( advAdj )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1221_static.FOLLOW_advAdj_in_prepphraseTempContent1221);
                    advAdj281=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj281.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:32: ( cd )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1224_static.FOLLOW_cd_in_prepphraseTempContent1224);
                    cd282=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd282.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:36: ( nntemp )+
            int cnt69=0;
            loop69:
            do {
                int alt69=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA69_2 = input.LA(2);

                    if ( (synpred248_ChemicalChunker()) ) {
                        alt69=1;
                    }


                    }
                    break;

                }

                switch (alt69) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1227_static.FOLLOW_nntemp_in_prepphraseTempContent1227);
            	    nntemp283=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp283.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt69 >= 1 ) break loop69;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(69, input);
                        throw eee;
                }
                cnt69++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin284 = null;

        ChemicalChunkerParser.molecule_return molecule285 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1236_static.FOLLOW_inin_in_prepphraseIN1236);
            inin284=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin284.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1238_static.FOLLOW_molecule_in_prepphraseIN1238);
            molecule285=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule285.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 174:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas286 = null;

        ChemicalChunkerParser.dt_return dt287 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity288 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1259_static.FOLLOW_inas_in_prepphraseRole1259);
            inas286=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas286.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:8: ( dt )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt70=1;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1261_static.FOLLOW_dt_in_prepphraseRole1261);
                    dt287=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt287.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1264_static.FOLLOW_nnchementity_in_prepphraseRole1264);
            nnchementity288=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity288.getTree());


            // AST REWRITE
            // elements: dt, inas, nnchementity
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 177:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj289 = null;

        ChemicalChunkerParser.inMost_return inMost290 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase291 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:4: ( advAdj )*
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1287_static.FOLLOW_advAdj_in_prepphraseOther1287);
            	    advAdj289=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj289.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:12: ( inMost )+
            int cnt72=0;
            loop72:
            do {
                int alt72=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt72=1;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1290_static.FOLLOW_inMost_in_prepphraseOther1290);
            	    inMost290=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost290.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1294_static.FOLLOW_nounphrase_in_prepphraseOther1294);
            nounphrase291=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase291.getTree());


            // AST REWRITE
            // elements: advAdj, inMost, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof292 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase293 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1320_static.FOLLOW_inof_in_prepphraseOf1320);
            inof292=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof292.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1323_static.FOLLOW_nounphrase_in_prepphraseOf1323);
            nounphrase293=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase293.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj294 = null;

        ChemicalChunkerParser.inafter_return inafter295 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase296 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:5: ( advAdj )?
            int alt73=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt73=1;
                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1345_static.FOLLOW_advAdj_in_prepphraseAfter1345);
                    advAdj294=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj294.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1348_static.FOLLOW_inafter_in_prepphraseAfter1348);
            inafter295=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter295.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1351_static.FOLLOW_nounphrase_in_prepphraseAfter1351);
            nounphrase296=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase296.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inafter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 186:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize297 = null;

        ChemicalChunkerParser.inas_return inas298 = null;

        ChemicalChunkerParser.nnexample_return nnexample299 = null;

        ChemicalChunkerParser.cd_return cd300 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase301 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1376_static.FOLLOW_vbsynthesize_in_preparationphrase1376);
            vbsynthesize297=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize297.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1378_static.FOLLOW_inas_in_preparationphrase1378);
            inas298=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas298.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:22: ( nnexample cd | prepphrase )
            int alt74=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt74=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
            case 169:
                {
                alt74=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1381_static.FOLLOW_nnexample_in_preparationphrase1381);
                    nnexample299=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample299.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1383_static.FOLLOW_cd_in_preparationphrase1383);
                    cd300=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd300.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1386_static.FOLLOW_prepphrase_in_preparationphrase1386);
                    prepphrase301=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase301.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus302 = null;

        ChemicalChunkerParser.conjunction_return conjunction303 = null;

        ChemicalChunkerParser.apparatus_return apparatus304 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1397_static.FOLLOW_apparatus_in_multiApparatus1397);
            apparatus302=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus302.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:14: ( ( conjunction )* apparatus )*
            loop76:
            do {
                int alt76=2;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:15: ( conjunction )*
            	    loop75:
            	    do {
            	        int alt75=2;
            	        alt75 = dfa75.predict(input);
            	        switch (alt75) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1400_static.FOLLOW_conjunction_in_multiApparatus1400);
            	    	    conjunction303=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction303.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop75;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1403_static.FOLLOW_apparatus_in_multiApparatus1403);
            	    apparatus304=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus304.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt305 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus306 = null;

        ChemicalChunkerParser.nnApp_return nnApp307 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:4: ( dt )?
            int alt77=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt77=1;
                    }
                    break;
            }

            switch (alt77) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1414_static.FOLLOW_dt_in_apparatus1414);
                    dt305=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt305.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:8: ( preapparatus )*
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 130:
                case 133:
                case 143:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt78=1;
                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1417_static.FOLLOW_preapparatus_in_apparatus1417);
            	    preapparatus306=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus306.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:22: ( nnApp )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred258_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1420_static.FOLLOW_nnApp_in_apparatus1420);
            	    nnApp307=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp307.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, dt, nnApp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 194:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus308 = null;

        ChemicalChunkerParser.dash_return dash309 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus310 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:4: ( nnapparatus )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA80_2 = input.LA(2);

                    if ( (synpred259_ChemicalChunker()) ) {
                        alt80=1;
                    }


                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1447_static.FOLLOW_nnapparatus_in_nnApp1447);
            	    nnapparatus308=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus308.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:17: ( dash nnapparatus )*
            loop81:
            do {
                int alt81=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA81_5 = input.LA(5);

                                if ( (synpred260_ChemicalChunker()) ) {
                                    alt81=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1451_static.FOLLOW_dash_in_nnApp1451);
            	    dash309=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash309.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1453_static.FOLLOW_nnapparatus_in_nnApp1453);
            	    nnapparatus310=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus310.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity311 = null;

        ChemicalChunkerParser.adj_return adj312 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure313 = null;

        ChemicalChunkerParser.nnadd_return nnadd314 = null;

        ChemicalChunkerParser.molecule_return molecule315 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity316 = null;

        ChemicalChunkerParser.nnstate_return nnstate317 = null;

        ChemicalChunkerParser.nn_return nn318 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt82=0;
            loop82:
            do {
                int alt82=9;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1467_static.FOLLOW_quantity_in_preapparatus1467);
            	    quantity311=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity311.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1469_static.FOLLOW_adj_in_preapparatus1469);
            	    adj312=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj312.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1471_static.FOLLOW_nnpressure_in_preapparatus1471);
            	    nnpressure313=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure313.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1473_static.FOLLOW_nnadd_in_preapparatus1473);
            	    nnadd314=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd314.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1475_static.FOLLOW_molecule_in_preapparatus1475);
            	    molecule315=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule315.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1477_static.FOLLOW_nnchementity_in_preapparatus1477);
            	    nnchementity316=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity316.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1479_static.FOLLOW_nnstate_in_preapparatus1479);
            	    nnstate317=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate317.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1481_static.FOLLOW_nn_in_preapparatus1481);
            	    nn318=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn318.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront319 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:4: ( oscaront )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    int LA83_2 = input.LA(2);

                    if ( (synpred269_ChemicalChunker()) ) {
                        alt83=1;
                    }


                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1493_static.FOLLOW_oscaront_in_oscaronts1493);
            	    oscaront319=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront319.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 202:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:1: oscarCompound : ( adj )* oscarCompoundStructure ( adj )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj320 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure321 = null;

        ChemicalChunkerParser.adj_return adj322 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity323 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity324 = null;

        ChemicalChunkerParser.quantity_return quantity325 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:15: ( ( adj )* oscarCompoundStructure ( adj )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:18: ( adj )* oscarCompoundStructure ( adj )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:18: ( adj )*
            loop84:
            do {
                int alt84=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt84=1;
                    }
                    break;

                }

                switch (alt84) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1513_static.FOLLOW_adj_in_oscarCompound1513);
            	    adj320=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj320.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1516_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1516);
            oscarCompoundStructure321=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure321.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:46: ( adj )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1518_static.FOLLOW_adj_in_oscarCompound1518);
                    adj322=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj322.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:51: ( numericReferenceOrQuantity | nnchementity )?
            int alt86=3;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:52: numericReferenceOrQuantity
                    {
                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_oscarCompound1522_static.FOLLOW_numericReferenceOrQuantity_in_oscarCompound1522);
                    numericReferenceOrQuantity323=numericReferenceOrQuantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity323.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:81: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1526_static.FOLLOW_nnchementity_in_oscarCompound1526);
                    nnchementity324=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity324.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:97: ( quantity )*
            loop87:
            do {
                int alt87=2;
                alt87 = dfa87.predict(input);
                switch (alt87) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1531_static.FOLLOW_quantity_in_oscarCompound1531);
            	    quantity325=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity325.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:107: ( fromProcedure )?
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_oscarCompound1534_static.FOLLOW_fromProcedure_in_oscarCompound1534);
                    fromProcedure326=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure326.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:1: oscarCompoundStructure : ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm327 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure328 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure329 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:23: ( ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt90=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt90=1;
                }
                break;
            case 143:
                {
                alt90=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:26: oscarcm ( afterOscarCompoundStructure )?
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1543_static.FOLLOW_oscarcm_in_oscarCompoundStructure1543);
                    oscarcm327=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm327.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:34: ( afterOscarCompoundStructure )?
                    int alt89=2;
                    alt89 = dfa89.predict(input);
                    switch (alt89) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1545_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1545);
                            afterOscarCompoundStructure328=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure328.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:65: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1550_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1550);
                    bracketedOscarCompoundStructure329=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure329.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, afterOscarCompoundStructure, bracketedOscarCompoundStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 205:98: -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:101: ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:111: ( oscarcm )?
                if ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:120: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:149: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: afterOscarCompoundStructure : ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm330 = null;

        ChemicalChunkerParser.dash_return dash331 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm332 = null;

        ChemicalChunkerParser.dash_return dash333 = null;

        ChemicalChunkerParser.colon_return colon334 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm335 = null;

        ChemicalChunkerParser.dash_return dash336 = null;

        ChemicalChunkerParser.apost_return apost337 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:28: ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ )
            int alt98=4;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==84) ) {
                alt98=1;
            }
            else if ( (LA98_0==136) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA98_7 = input.LA(5);

                            if ( (synpred283_ChemicalChunker()) ) {
                                alt98=2;
                            }
                            else if ( (true) ) {
                                alt98=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 98, 7, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 98, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt98=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 2, input);

                    throw nvae;
                }

            }
            else if ( (LA98_0==132) && (synpred286_ChemicalChunker())) {
                alt98=3;
            }
            else if ( (LA98_0==134) ) {
                alt98=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:30: ( oscarcm )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:30: ( oscarcm )+
                    int cnt91=0;
                    loop91:
                    do {
                        int alt91=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA91_3 = input.LA(3);

                                if ( (synpred278_ChemicalChunker()) ) {
                                    alt91=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt91) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1572_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1572);
                    	    oscarcm330=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm330.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt91 >= 1 ) break loop91;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(91, input);
                                throw eee;
                        }
                        cnt91++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:39: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:39: ( dash ( oscarcm )+ )+
                    int cnt93=0;
                    loop93:
                    do {
                        int alt93=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA93_5 = input.LA(5);

                                        if ( (synpred281_ChemicalChunker()) ) {
                                            alt93=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt93) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:40: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1576_static.FOLLOW_dash_in_afterOscarCompoundStructure1576);
                    	    dash331=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash331.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:45: ( oscarcm )+
                    	    int cnt92=0;
                    	    loop92:
                    	    do {
                    	        int alt92=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA92_3 = input.LA(3);

                    	                if ( (synpred280_ChemicalChunker()) ) {
                    	                    alt92=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt92) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1578_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1578);
                    	    	    oscarcm332=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm332.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt92 >= 1 ) break loop92;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(92, input);
                    	                throw eee;
                    	        }
                    	        cnt92++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt93 >= 1 ) break loop93;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(93, input);
                                throw eee;
                        }
                        cnt93++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:56: ( dash )?
                    int alt94=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA94_3 = input.LA(3);

                                    if ( (synpred282_ChemicalChunker()) ) {
                                        alt94=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt94) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1583_static.FOLLOW_dash_in_afterOscarCompoundStructure1583);
                            dash333=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash333.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:62: ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )=> ( colon ( oscarcm )+ )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:105: ( colon ( oscarcm )+ )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        switch ( input.LA(1) ) {
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA96_5 = input.LA(5);

                                        if ( (synpred288_ChemicalChunker()) ) {
                                            alt96=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt96) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:106: colon ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_colon_in_afterOscarCompoundStructure1599_static.FOLLOW_colon_in_afterOscarCompoundStructure1599);
                    	    colon334=colon();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon334.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:112: ( oscarcm )+
                    	    int cnt95=0;
                    	    loop95:
                    	    do {
                    	        int alt95=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA95_3 = input.LA(3);

                    	                if ( (synpred287_ChemicalChunker()) ) {
                    	                    alt95=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt95) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1601_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1601);
                    	    	    oscarcm335=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm335.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt95 >= 1 ) break loop95;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(95, input);
                    	                throw eee;
                    	        }
                    	        cnt95++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:123: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:123: ( dash | apost )+
                    int cnt97=0;
                    loop97:
                    do {
                        int alt97=3;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA97_4 = input.LA(3);

                                if ( (synpred290_ChemicalChunker()) ) {
                                    alt97=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA97_5 = input.LA(3);

                                if ( (synpred289_ChemicalChunker()) ) {
                                    alt97=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt97) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:124: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1607_static.FOLLOW_dash_in_afterOscarCompoundStructure1607);
                    	    dash336=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash336.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:129: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1609_static.FOLLOW_apost_in_afterOscarCompoundStructure1609);
                    	    apost337=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost337.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt97 >= 1 ) break loop97;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(97, input);
                                throw eee;
                        }
                        cnt97++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb338 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm339 = null;

        ChemicalChunkerParser.rrb_return rrb340 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1618_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1618);
            lrb338=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb338.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:40: ( oscarcm )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1621_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1621);
            	    oscarcm339=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm339.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1624_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1624);
            rrb340=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb340.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount341 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1634_static.FOLLOW_moleculeamount_in_molecule1634);
            moleculeamount341=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount341.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3342 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1343 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2344 = null;

        ChemicalChunkerParser.asAstate_return asAstate345 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt100=3;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1652_static.FOLLOW_moleculeamount3_in_moleculeamount1652);
                    moleculeamount3342=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3342.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1655_static.FOLLOW_moleculeamount1_in_moleculeamount1655);
                    moleculeamount1343=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1343.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1659_static.FOLLOW_moleculeamount2_in_moleculeamount1659);
                    moleculeamount2344=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2344.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: ( asAstate )?
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1662_static.FOLLOW_asAstate_in_moleculeamount1662);
                    asAstate345=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate345.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: moleculeamount3 : ( quantity | mixture )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity346 = null;

        ChemicalChunkerParser.mixture_return mixture347 = null;

        ChemicalChunkerParser.inof_return inof348 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE349 = null;

        ChemicalChunkerParser.dt_return dt350 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio351 = null;

        ChemicalChunkerParser.mixture_return mixture352 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound353 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:2: ( ( quantity | mixture )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:3: ( quantity | mixture )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:3: ( quantity | mixture )+
            int cnt102=0;
            loop102:
            do {
                int alt102=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA102_2 = input.LA(2);

                    if ( (synpred295_ChemicalChunker()) ) {
                        alt102=1;
                    }
                    else if ( (synpred296_ChemicalChunker()) ) {
                        alt102=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA102_3 = input.LA(2);

                    if ( (synpred295_ChemicalChunker()) ) {
                        alt102=1;
                    }
                    else if ( (synpred296_ChemicalChunker()) ) {
                        alt102=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt102=1;
                    }
                    break;
                case 133:
                    {
                    alt102=2;
                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount31673_static.FOLLOW_quantity_in_moleculeamount31673);
            	    quantity346=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity346.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount31675_static.FOLLOW_mixture_in_moleculeamount31675);
            	    mixture347=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture347.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount31679_static.FOLLOW_inof_in_moleculeamount31679);
            inof348=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof348.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:28: ( dtTHE | dt )?
            int alt103=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt103=1;
                    }
                    break;
                case 147:
                    {
                    alt103=2;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:29: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31682_static.FOLLOW_dtTHE_in_moleculeamount31682);
                    dtTHE349=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE349.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:37: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31686_static.FOLLOW_dt_in_moleculeamount31686);
                    dt350=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt350.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_ratioOrBracketedRatio_in_moleculeamount31690_static.FOLLOW_ratioOrBracketedRatio_in_moleculeamount31690);
            ratioOrBracketedRatio351=ratioOrBracketedRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio351.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:64: ( mixture )?
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31692_static.FOLLOW_mixture_in_moleculeamount31692);
                    mixture352=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture352.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31695_static.FOLLOW_oscarCompound_in_moleculeamount31695);
            oscarCompound353=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound353.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:1: moleculeamount1 : ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity354 = null;

        ChemicalChunkerParser.nnstate_return nnstate355 = null;

        ChemicalChunkerParser.quantity_return quantity356 = null;

        ChemicalChunkerParser.mixture_return mixture357 = null;

        ChemicalChunkerParser.inof_return inof358 = null;

        ChemicalChunkerParser.quantity_return quantity359 = null;

        ChemicalChunkerParser.inof_return inof360 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE361 = null;

        ChemicalChunkerParser.dt_return dt362 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound363 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity364 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:2: ( ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:3: ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:3: ( nnchementity | nnstate )?
            int alt105=3;
            switch ( input.LA(1) ) {
                case 71:
                    {
                    alt105=1;
                    }
                    break;
                case 63:
                    {
                    alt105=2;
                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:4: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_moleculeamount11705_static.FOLLOW_nnchementity_in_moleculeamount11705);
                    nnchementity354=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity354.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:19: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_moleculeamount11709_static.FOLLOW_nnstate_in_moleculeamount11709);
                    nnstate355=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate355.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:29: ( quantity | mixture )+
            int cnt106=0;
            loop106:
            do {
                int alt106=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA106_2 = input.LA(2);

                    if ( (synpred302_ChemicalChunker()) ) {
                        alt106=1;
                    }
                    else if ( (synpred303_ChemicalChunker()) ) {
                        alt106=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA106_3 = input.LA(2);

                    if ( (synpred302_ChemicalChunker()) ) {
                        alt106=1;
                    }
                    else if ( (synpred303_ChemicalChunker()) ) {
                        alt106=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt106=1;
                    }
                    break;
                case 133:
                    {
                    alt106=2;
                    }
                    break;

                }

                switch (alt106) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:30: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11714_static.FOLLOW_quantity_in_moleculeamount11714);
            	    quantity356=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity356.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:39: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11716_static.FOLLOW_mixture_in_moleculeamount11716);
            	    mixture357=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture357.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11720_static.FOLLOW_inof_in_moleculeamount11720);
            inof358=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof358.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:54: ( quantity ( inof )? )?
            int alt108=2;
            switch ( input.LA(1) ) {
                case 143:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 73:
                                case 130:
                                case 146:
                                    {
                                    alt108=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 73:
                case 130:
                case 146:
                    {
                    alt108=1;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:55: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11723_static.FOLLOW_quantity_in_moleculeamount11723);
                    quantity359=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity359.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:64: ( inof )?
                    int alt107=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt107=1;
                            }
                            break;
                    }

                    switch (alt107) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11725_static.FOLLOW_inof_in_moleculeamount11725);
                            inof360=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof360.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:72: ( dtTHE | dt )?
            int alt109=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt109=1;
                    }
                    break;
                case 147:
                    {
                    alt109=2;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:73: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11731_static.FOLLOW_dtTHE_in_moleculeamount11731);
                    dtTHE361=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE361.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:81: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11735_static.FOLLOW_dt_in_moleculeamount11735);
                    dt362=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt362.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:86: ( oscarCompound )+
            int cnt110=0;
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11739_static.FOLLOW_oscarCompound_in_moleculeamount11739);
            	    oscarCompound363=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound363.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt110 >= 1 ) break loop110;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(110, input);
                        throw eee;
                }
                cnt110++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11742_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11742);
            afterCompoundCitationOrQuantity364=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity364.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity365 = null;

        ChemicalChunkerParser.mixture_return mixture366 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound367 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity368 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:2: ( ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:3: ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:3: ( quantity | mixture )*
            loop111:
            do {
                int alt111=3;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21751_static.FOLLOW_quantity_in_moleculeamount21751);
            	    quantity365=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity365.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21753_static.FOLLOW_mixture_in_moleculeamount21753);
            	    mixture366=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture366.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:23: ( oscarCompound )+
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21757_static.FOLLOW_oscarCompound_in_moleculeamount21757);
            	    oscarCompound367=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound367.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21760_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21760);
            afterCompoundCitationOrQuantity368=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity368.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation369 = null;

        ChemicalChunkerParser.quantity_return quantity370 = null;

        ChemicalChunkerParser.comma_return comma371 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node372 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure373 = null;

        ChemicalChunkerParser.mixture_return mixture374 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            loop114:
            do {
                int alt114=5;
                alt114 = dfa114.predict(input);
                switch (alt114) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1768_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1768);
            	    citation369=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation369.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1770_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1770);
            	    quantity370=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity370.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1772_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1772);
            	    comma371=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma371.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:59: ( quantity1Node | citationStructure )
            	    int alt113=2;
            	    switch ( input.LA(1) ) {
            	    case 143:
            	        {
            	        switch ( input.LA(2) ) {
            	        case TOKEN:
            	            {
            	            switch ( input.LA(3) ) {
            	            case 133:
            	            case 145:
            	            case 149:
            	            case 158:
            	                {
            	                alt113=2;
            	                }
            	                break;
            	            case 146:
            	                {
            	                switch ( input.LA(4) ) {
            	                case TOKEN:
            	                    {
            	                    switch ( input.LA(5) ) {
            	                    case 133:
            	                    case 145:
            	                    case 146:
            	                    case 149:
            	                    case 158:
            	                        {
            	                        alt113=2;
            	                        }
            	                        break;
            	                    case 44:
            	                    case 65:
            	                    case 66:
            	                    case 67:
            	                    case 69:
            	                    case 70:
            	                    case 138:
            	                    case 156:
            	                        {
            	                        alt113=1;
            	                        }
            	                        break;
            	                    default:
            	                        if (state.backtracking>0) {state.failed=true; return retval;}
            	                        NoViableAltException nvae =
            	                            new NoViableAltException("", 113, 6, input);

            	                        throw nvae;
            	                    }

            	                    }
            	                    break;
            	                default:
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 113, 4, input);

            	                    throw nvae;
            	                }

            	                }
            	                break;
            	            case 73:
            	            case 130:
            	                {
            	                alt113=1;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 113, 2, input);

            	                throw nvae;
            	            }

            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 113, 1, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 113, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt113) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1775_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1775);
            	            quantity1Node372=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node372.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1777_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1777);
            	            citationStructure373=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure373.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:93: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_afterCompoundCitationOrQuantity1780_static.FOLLOW_mixture_in_afterCompoundCitationOrQuantity1780);
            	    mixture374=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture374.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:1: unnamedmolecule : unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription375 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:2: ( unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:4: unnamedmoleculeDescription
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1791_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1791);
            unnamedmoleculeDescription375=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription375.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 226:31: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:34: ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:1: unnamedmoleculeDescription : unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart376 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity377 = null;

        ChemicalChunkerParser.asAstate_return asAstate378 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:2: ( unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:4: unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1808_static.FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1808);
            unnamedmoleculeDescriptionStart376=unnamedmoleculeDescriptionStart();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeDescriptionStart376.getTree());
            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1810_static.FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1810);
            afterCompoundCitationOrQuantity377=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity377.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:68: ( asAstate )?
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmoleculeDescription1812_static.FOLLOW_asAstate_in_unnamedmoleculeDescription1812);
                    asAstate378=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate378.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeDescriptionStart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescriptionStart"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );
    public final ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return retval = new ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescriptionStart_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantityOf_return quantityOf379 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1380 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2381 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule382 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2383 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule384 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:2: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
            int alt117=3;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1822_static.FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1822);
                    quantityOf379=quantityOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantityOf379.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    int alt116=3;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:16: potentialUnnamedMoleculeAmount1
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1825_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1825);
                            potentialUnnamedMoleculeAmount1380=potentialUnnamedMoleculeAmount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount1380.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:50: potentialUnnamedMoleculeAmount2
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1829_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1829);
                            potentialUnnamedMoleculeAmount2381=potentialUnnamedMoleculeAmount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2381.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:84: definiteUnnamedMolecule
                            {
                            pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1833_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1833);
                            definiteUnnamedMolecule382=definiteUnnamedMolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule382.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:112: potentialUnnamedMoleculeAmount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1839_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1839);
                    potentialUnnamedMoleculeAmount2383=potentialUnnamedMoleculeAmount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2383.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:146: definiteUnnamedMolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1843_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1843);
                    definiteUnnamedMolecule384=definiteUnnamedMolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule384.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, unnamedmoleculeDescriptionStart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescriptionStart"

    public static class quantityOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantityOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:1: quantityOf : ( quantity )+ ( inof )? ( dtTHE | dt )? ;
    public final ChemicalChunkerParser.quantityOf_return quantityOf() throws RecognitionException {
        ChemicalChunkerParser.quantityOf_return retval = new ChemicalChunkerParser.quantityOf_return();
        retval.start = input.LT(1);
        int quantityOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity385 = null;

        ChemicalChunkerParser.inof_return inof386 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE387 = null;

        ChemicalChunkerParser.dt_return dt388 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:2: ( ( quantity )+ ( inof )? ( dtTHE | dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:4: ( quantity )+ ( inof )? ( dtTHE | dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:4: ( quantity )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_quantityOf1852_static.FOLLOW_quantity_in_quantityOf1852);
            	    quantity385=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity385.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:14: ( inof )?
            int alt119=2;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    alt119=1;
                    }
                    break;
            }

            switch (alt119) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                    {
                    pushFollow(FOLLOW_inof_in_quantityOf1855_static.FOLLOW_inof_in_quantityOf1855);
                    inof386=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof386.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:20: ( dtTHE | dt )?
            int alt120=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt120=1;
                    }
                    break;
                case 147:
                    {
                    alt120=2;
                    }
                    break;
            }

            switch (alt120) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:21: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_quantityOf1859_static.FOLLOW_dtTHE_in_quantityOf1859);
                    dtTHE387=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE387.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:29: dt
                    {
                    pushFollow(FOLLOW_dt_in_quantityOf1863_static.FOLLOW_dt_in_quantityOf1863);
                    dt388=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt388.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, quantityOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantityOf"

    public static class potentialUnnamedMoleculeAmount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:1: potentialUnnamedMoleculeAmount1 : potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule389 = null;

        ChemicalChunkerParser.quantity_return quantity390 = null;

        ChemicalChunkerParser.asAstate_return asAstate391 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure392 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:2: ( potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:4: potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11874_static.FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11874);
            potentialUnnamedMolecule389=potentialUnnamedMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMolecule389.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:29: ( quantity )*
            loop121:
            do {
                int alt121=2;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11876_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11876);
            	    quantity390=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity390.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:39: ( asAstate )?
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11879_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11879);
                    asAstate391=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate391.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:49: ( fromProcedure )?
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11882_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11882);
                    fromProcedure392=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure392.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, potentialUnnamedMoleculeAmount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount1"

    public static class potentialUnnamedMoleculeAmount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:1: potentialUnnamedMoleculeAmount2 : ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference393 = null;

        ChemicalChunkerParser.quantity_return quantity394 = null;

        ChemicalChunkerParser.asAstate_return asAstate395 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN396 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity397 = null;

        ChemicalChunkerParser.asAstate_return asAstate398 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure399 = null;

        ChemicalChunkerParser.quantity_return quantity400 = null;

        ChemicalChunkerParser.asAstate_return asAstate401 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure402 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:2: ( ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) )
            int alt126=2;
            switch ( input.LA(1) ) {
            case 141:
            case 143:
            case 146:
                {
                alt126=1;
                }
                break;
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt126=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:5: numberCompoundReference ( quantity | asAstate )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21893_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21893);
                    numberCompoundReference393=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference393.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:29: ( quantity | asAstate )
                    int alt124=2;
                    switch ( input.LA(1) ) {
                    case 73:
                    case 130:
                    case 143:
                    case 146:
                        {
                        alt124=1;
                        }
                        break;
                    case 47:
                        {
                        alt124=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;
                    }

                    switch (alt124) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:30: quantity
                            {
                            pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21896_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21896);
                            quantity394=quantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity394.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:41: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21900_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21900);
                            asAstate395=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate395.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:54: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    {
                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21906_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21906);
                    potentialUnnamedMoleculeStructureNN396=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN396.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:90: ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    int alt125=3;
                    switch ( input.LA(1) ) {
                    case 38:
                    case 73:
                    case 130:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt125=1;
                        }
                        break;
                    case 47:
                        {
                        alt125=2;
                        }
                        break;
                    case 56:
                    case 59:
                    case 125:
                    case 129:
                        {
                        alt125=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }

                    switch (alt125) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:91: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21909_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21909);
                            numericReferenceOrQuantity397=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity397.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:120: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21913_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21913);
                            asAstate398=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate398.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:131: fromProcedure
                            {
                            pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21917_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21917);
                            fromProcedure399=fromProcedure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure399.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:148: ( quantity )*
            loop127:
            do {
                int alt127=2;
                alt127 = dfa127.predict(input);
                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21922_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21922);
            	    quantity400=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity400.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:158: ( asAstate )?
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21925_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21925);
                    asAstate401=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate401.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:168: ( fromProcedure )?
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21928_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21928);
                    fromProcedure402=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure402.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, potentialUnnamedMoleculeAmount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount2"

    public static class definiteUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:1: definiteUnnamedMolecule : ( adj )* definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMolecule_return retval = new ChemicalChunkerParser.definiteUnnamedMolecule_return();
        retval.start = input.LT(1);
        int definiteUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj403 = null;

        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure404 = null;

        ChemicalChunkerParser.quantity_return quantity405 = null;

        ChemicalChunkerParser.asAstate_return asAstate406 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure407 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:2: ( ( adj )* definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:4: ( adj )* definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:4: ( adj )*
            loop130:
            do {
                int alt130=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt130=1;
                    }
                    break;

                }

                switch (alt130) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_definiteUnnamedMolecule1938_static.FOLLOW_adj_in_definiteUnnamedMolecule1938);
            	    adj403=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj403.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            pushFollow(FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1941_static.FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1941);
            definiteUnnamedMoleculeStructure404=definiteUnnamedMoleculeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMoleculeStructure404.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:42: ( quantity )*
            loop131:
            do {
                int alt131=2;
                alt131 = dfa131.predict(input);
                switch (alt131) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_definiteUnnamedMolecule1943_static.FOLLOW_quantity_in_definiteUnnamedMolecule1943);
            	    quantity405=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity405.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:52: ( asAstate )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_definiteUnnamedMolecule1946_static.FOLLOW_asAstate_in_definiteUnnamedMolecule1946);
                    asAstate406=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate406.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:62: ( fromProcedure )?
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_definiteUnnamedMolecule1949_static.FOLLOW_fromProcedure_in_definiteUnnamedMolecule1949);
                    fromProcedure407=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure407.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, definiteUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMolecule"

    public static class definiteUnnamedMoleculeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMoleculeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:1: definiteUnnamedMoleculeStructure : ( nnchementity numericOrIdentifierCompoundReference | alphanumericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? );
    public final ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return retval = new ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return();
        retval.start = input.LT(1);
        int definiteUnnamedMoleculeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity408 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference409 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference410 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp411 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity412 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity413 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:2: ( nnchementity numericOrIdentifierCompoundReference | alphanumericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
            int alt135=3;
            switch ( input.LA(1) ) {
            case 71:
                {
                alt135=1;
                }
                break;
            case 38:
            case 139:
            case 141:
            case 143:
            case 146:
                {
                alt135=2;
                }
                break;
            case 46:
                {
                alt135=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:4: nnchementity numericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1959_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1959);
                    nnchementity408=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity408.getTree());
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1961_static.FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1961);
                    numericOrIdentifierCompoundReference409=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference409.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:56: alphanumericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1965_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1965);
                    alphanumericOrIdentifierCompoundReference410=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference410.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:100: jjcomp nnchementity ( numericReferenceOrQuantity )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1969_static.FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1969);
                    jjcomp411=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp411.getTree());
                    pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1971_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1971);
                    nnchementity412=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity412.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:120: ( numericReferenceOrQuantity )?
                    int alt134=2;
                    alt134 = dfa134.predict(input);
                    switch (alt134) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1973_static.FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1973);
                            numericReferenceOrQuantity413=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity413.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, definiteUnnamedMoleculeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMoleculeStructure"

    public static class potentialUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:1: potentialUnnamedMolecule : ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? );
    public final ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMolecule_return retval = new ChemicalChunkerParser.potentialUnnamedMolecule_return();
        retval.start = input.LT(1);
        int potentialUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference414 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN415 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity416 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:2: ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? )
            int alt137=2;
            switch ( input.LA(1) ) {
            case 141:
            case 143:
            case 146:
                {
                alt137=1;
                }
                break;
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt137=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:4: numberCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983);
                    numberCompoundReference414=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference414.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:30: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987);
                    potentialUnnamedMoleculeStructureNN415=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN415.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:66: ( numericReferenceOrQuantity )?
                    int alt136=2;
                    alt136 = dfa136.predict(input);
                    switch (alt136) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989);
                            numericReferenceOrQuantity416=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity416.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, potentialUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMolecule"

    public static class potentialUnnamedMoleculeStructureNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeStructureNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem )* nnchementity );
    public final ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeStructureNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj417 = null;

        ChemicalChunkerParser.jjchem_return jjchem418 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp419 = null;

        ChemicalChunkerParser.nnstate_return nnstate420 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound421 = null;

        ChemicalChunkerParser.nnexample_return nnexample422 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts423 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere424 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture425 = null;

        ChemicalChunkerParser.oscarase_return oscarase426 = null;

        ChemicalChunkerParser.jj_return jj427 = null;

        ChemicalChunkerParser.jjchem_return jjchem428 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity429 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:2: ( ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem )* nnchementity )
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:4: ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:4: ( jj | jjchem | jjcomp )*
                    loop138:
                    do {
                        int alt138=4;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt138=1;
                            }
                            break;
                        case 45:
                            {
                            alt138=2;
                            }
                            break;
                        case 46:
                            {
                            alt138=3;
                            }
                            break;

                        }

                        switch (alt138) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:5: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002);
                    	    jj417=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj417.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:8: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004);
                    	    jjchem418=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem418.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:15: jjcomp
                    	    {
                    	    pushFollow(FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006_static.FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006);
                    	    jjcomp419=jjcomp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp419.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:24: ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase )
                    int alt139=7;
                    alt139 = dfa139.predict(input);
                    switch (alt139) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:25: nnstate
                            {
                            pushFollow(FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011_static.FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011);
                            nnstate420=nnstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate420.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:33: referenceToExampleCompound
                            {
                            pushFollow(FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013_static.FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013);
                            referenceToExampleCompound421=referenceToExampleCompound();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound421.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:60: nnexample
                            {
                            pushFollow(FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015_static.FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015);
                            nnexample422=nnexample();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample422.getTree());

                            }
                            break;
                        case 4 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:70: oscaronts
                            {
                            pushFollow(FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017_static.FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017);
                            oscaronts423=oscaronts();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts423.getTree());

                            }
                            break;
                        case 5 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:80: nnatmosphere
                            {
                            pushFollow(FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019_static.FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019);
                            nnatmosphere424=nnatmosphere();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere424.getTree());

                            }
                            break;
                        case 6 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:93: nnmixture
                            {
                            pushFollow(FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021_static.FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021);
                            nnmixture425=nnmixture();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture425.getTree());

                            }
                            break;
                        case 7 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:103: oscarase
                            {
                            pushFollow(FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023_static.FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023);
                            oscarase426=oscarase();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase426.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:115: ( jj | jjchem )* nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:115: ( jj | jjchem )*
                    loop140:
                    do {
                        int alt140=3;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt140=1;
                            }
                            break;
                        case 45:
                            {
                            alt140=2;
                            }
                            break;

                        }

                        switch (alt140) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:116: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029);
                    	    jj427=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj427.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:119: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031);
                    	    jjchem428=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem428.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    pushFollow(FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035_static.FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035);
                    nnchementity429=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity429.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, potentialUnnamedMoleculeStructureNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeStructureNN"

    public static class numericReferenceOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericReferenceOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: numericReferenceOrQuantity : ( quantity | {...}? numericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.numericReferenceOrQuantity_return retval = new ChemicalChunkerParser.numericReferenceOrQuantity_return();
        retval.start = input.LT(1);
        int numericReferenceOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity430 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference431 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:2: ( quantity | {...}? numericOrIdentifierCompoundReference )
            int alt142=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA142_1 = input.LA(2);

                if ( (synpred357_ChemicalChunker()) ) {
                    alt142=1;
                }
                else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {
                    alt142=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;
                }
                }
                break;
            case 146:
                {
                int LA142_2 = input.LA(2);

                if ( (synpred357_ChemicalChunker()) ) {
                    alt142=1;
                }
                else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {
                    alt142=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 2, input);

                    throw nvae;
                }
                }
                break;
            case 73:
            case 130:
                {
                alt142=1;
                }
                break;
            case 38:
            case 139:
            case 141:
                {
                alt142=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_numericReferenceOrQuantity2045_static.FOLLOW_quantity_in_numericReferenceOrQuantity2045);
                    quantity430=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity430.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:15: {...}? numericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "numericReferenceOrQuantity", "!followedByNumberWhichIsNotAReference(input)");
                    }
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051_static.FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051);
                    numericOrIdentifierCompoundReference431=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference431.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, numericReferenceOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericReferenceOrQuantity"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: asAstate : inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas432 = null;

        ChemicalChunkerParser.dt_return dt433 = null;

        ChemicalChunkerParser.jj_return jj434 = null;

        ChemicalChunkerParser.jjchem_return jjchem435 = null;

        ChemicalChunkerParser.nnstate_return nnstate436 = null;

        ChemicalChunkerParser.quantity_return quantity437 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:2: ( inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:4: inas ( dt )? ( jj | jjchem )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate2060_static.FOLLOW_inas_in_asAstate2060);
            inas432=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas432.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:9: ( dt )?
            int alt143=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt143=1;
                    }
                    break;
            }

            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate2062_static.FOLLOW_dt_in_asAstate2062);
                    dt433=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt433.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:13: ( jj | jjchem )*
            loop144:
            do {
                int alt144=3;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt144=1;
                    }
                    break;
                case 45:
                    {
                    alt144=2;
                    }
                    break;

                }

                switch (alt144) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate2066_static.FOLLOW_jj_in_asAstate2066);
            	    jj434=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj434.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate2068_static.FOLLOW_jjchem_in_asAstate2068);
            	    jjchem435=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem435.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate2072_static.FOLLOW_nnstate_in_asAstate2072);
            nnstate436=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate436.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:34: ( quantity )*
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate2074_static.FOLLOW_quantity_in_asAstate2074);
            	    quantity437=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity437.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:1: alphanumericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference438 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier439 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum440 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric441 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_cdAlphanum=new RewriteRuleSubtreeStream(adaptor,"rule cdAlphanum");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            int alt146=4;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt146=1;
                }
                break;
            case 141:
            case 146:
                {
                alt146=2;
                }
                break;
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 144:
                                {
                                alt146=4;
                                }
                                break;
                            case 141:
                                {
                                alt146=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 146, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                        {
                        alt146=4;
                        }
                        break;
                    case 141:
                        {
                        alt146=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 3, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt146=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086_static.FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086);
                    squareBracketedReference438=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference438.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088_static.FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088);
                    identifierOrBracketedIdentifier439=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier439.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:63: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090_static.FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090);
                    cdAlphanum440=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cdAlphanum.add(cdAlphanum440.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:74: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092_static.FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092);
                    bracketedNumeric441=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric441.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cdAlphanum, identifierOrBracketedIdentifier, squareBracketedReference, bracketedNumeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 263:92: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:95: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:117: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:143: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:176: ( cdAlphanum )?
                if ( stream_cdAlphanum.hasNext() ) {
                    adaptor.addChild(root_1, stream_cdAlphanum.nextTree());

                }
                stream_cdAlphanum.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:188: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:1: numberCompoundReference : ( ( quantity )=> identifierOrBracketedIdentifier | cd ) -> ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier442 = null;

        ChemicalChunkerParser.cd_return cd443 = null;


        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:3: ( ( ( quantity )=> identifierOrBracketedIdentifier | cd ) -> ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:5: ( ( quantity )=> identifierOrBracketedIdentifier | cd )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:5: ( ( quantity )=> identifierOrBracketedIdentifier | cd )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==146) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    int LA147_4 = input.LA(3);

                    if ( (synpred365_ChemicalChunker()) ) {
                        alt147=1;
                    }
                    else if ( (true) ) {
                        alt147=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA147_0==141) && (synpred365_ChemicalChunker())) {
                alt147=1;
            }
            else if ( (LA147_0==143) && (synpred365_ChemicalChunker())) {
                alt147=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:6: ( quantity )=> identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128_static.FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128);
                    identifierOrBracketedIdentifier442=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier442.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:54: cd
                    {
                    pushFollow(FOLLOW_cd_in_numberCompoundReference2132_static.FOLLOW_cd_in_numberCompoundReference2132);
                    cd443=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd443.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: identifierOrBracketedIdentifier, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 266:58: -> ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:61: ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:83: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:116: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:1: numericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference444 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier445 = null;

        ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric446 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_numericOrBracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule numericOrBracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            int alt148=3;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157_static.FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157);
                    squareBracketedReference444=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference444.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159_static.FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159);
                    identifierOrBracketedIdentifier445=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier445.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:63: numericOrBracketedNumeric
                    {
                    pushFollow(FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161_static.FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161);
                    numericOrBracketedNumeric446=numericOrBracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericOrBracketedNumeric.add(numericOrBracketedNumeric446.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: identifierOrBracketedIdentifier, numericOrBracketedNumeric, squareBracketedReference
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:90: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:93: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:115: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:141: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:174: ( numericOrBracketedNumeric )?
                if ( stream_numericOrBracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericOrBracketedNumeric.nextTree());

                }
                stream_numericOrBracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb447 = null;

        ChemicalChunkerParser.numeric_return numeric448 = null;

        ChemicalChunkerParser.rsqb_return rsqb449 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:2: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:4: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference2187_static.FOLLOW_lsqb_in_squareBracketedReference2187);
            lsqb447=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb447.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference2189_static.FOLLOW_numeric_in_squareBracketedReference2189);
            numeric448=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric448.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference2191_static.FOLLOW_rsqb_in_squareBracketedReference2191);
            rsqb449=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb449.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node450 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node451 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:14: ( quantity1Node | quantity2Node )
            int alt149=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt149=1;
                }
                break;
            case 73:
            case 130:
            case 146:
                {
                alt149=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2202_static.FOLLOW_quantity1Node_in_quantity2202);
                    quantity1Node450=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node450.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2204_static.FOLLOW_quantity2Node_in_quantity2204);
                    quantity2Node451=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node451.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1452 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2213_static.FOLLOW_quantity1_in_quantity1Node2213);
            quantity1452=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1452.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb453 = null;

        ChemicalChunkerParser.measurements_return measurements454 = null;

        ChemicalChunkerParser.comma_return comma455 = null;

        ChemicalChunkerParser.measurements_return measurements456 = null;

        ChemicalChunkerParser.comma_return comma457 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase458 = null;

        ChemicalChunkerParser.stop_return stop459 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase460 = null;

        ChemicalChunkerParser.rrb_return rrb461 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12233_static.FOLLOW_lrb_in_quantity12233);
            lrb453=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb453.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12235_static.FOLLOW_measurements_in_quantity12235);
            measurements454=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements454.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:21: ( comma measurements )*
            loop150:
            do {
                int alt150=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 73:
                        case 130:
                        case 146:
                            {
                            alt150=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt150) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12238_static.FOLLOW_comma_in_quantity12238);
            	    comma455=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma455.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12241_static.FOLLOW_measurements_in_quantity12241);
            	    measurements456=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements456.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:44: ( comma preparationphrase )*
            loop151:
            do {
                int alt151=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt151=1;
                    }
                    break;

                }

                switch (alt151) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12246_static.FOLLOW_comma_in_quantity12246);
            	    comma457=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma457.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12248_static.FOLLOW_preparationphrase_in_quantity12248);
            	    preparationphrase458=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase458.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:71: ( stop preparationphrase )*
            loop152:
            do {
                int alt152=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt152=1;
                    }
                    break;

                }

                switch (alt152) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12253_static.FOLLOW_stop_in_quantity12253);
            	    stop459=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop459.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12255_static.FOLLOW_preparationphrase_in_quantity12255);
            	    preparationphrase460=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase460.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12260_static.FOLLOW_rrb_in_quantity12260);
            rrb461=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb461.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2462 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2268_static.FOLLOW_quantity2_in_quantity2Node2268);
            quantity2462=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2462.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 282:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements463 = null;

        ChemicalChunkerParser.comma_return comma464 = null;

        ChemicalChunkerParser.measurements_return measurements465 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22289_static.FOLLOW_measurements_in_quantity22289);
            measurements463=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements463.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:18: ( comma measurements )*
            loop153:
            do {
                int alt153=2;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22292_static.FOLLOW_comma_in_quantity22292);
            	    comma464=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma464.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22295_static.FOLLOW_measurements_in_quantity22295);
            	    measurements465=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements465.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd466 = null;

        ChemicalChunkerParser.nn_return nn467 = null;

        ChemicalChunkerParser.multiple_return multiple468 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes469 = null;

        ChemicalChunkerParser.dt_return dt470 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:3: ( cd nn )?
            int alt154=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 156:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 73:
                                                case 130:
                                                case 146:
                                                    {
                                                    alt154=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2308_static.FOLLOW_cd_in_measurements2308);
                    cd466=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd466.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2310_static.FOLLOW_nn_in_measurements2310);
                    nn467=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn467.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:12: ( multiple | measurementtypes )
            int alt155=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 156:
                        {
                        alt155=2;
                        }
                        break;
                    case 44:
                        {
                        alt155=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 155, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }

                }
                break;
            case 73:
            case 130:
                {
                alt155=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2315_static.FOLLOW_multiple_in_measurements2315);
                    multiple468=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple468.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2317_static.FOLLOW_measurementtypes_in_measurements2317);
                    measurementtypes469=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes469.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:40: ( dt )?
            int alt156=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA156_3 = input.LA(3);

                            if ( (synpred375_ChemicalChunker()) ) {
                                alt156=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2320_static.FOLLOW_dt_in_measurements2320);
                    dt470=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt470.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd471 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode472 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes473 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2328_static.FOLLOW_cd_in_multiple2328);
            cd471=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd471.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2330_static.FOLLOW_cdunicode_in_multiple2330);
            cdunicode472=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode472.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:25: ( measurementtypes )?
            int alt157=2;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2332_static.FOLLOW_measurementtypes_in_multiple2332);
                    measurementtypes473=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes473.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, cdunicode, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar474 = null;

        ChemicalChunkerParser.amount_return amount475 = null;

        ChemicalChunkerParser.mass_return mass476 = null;

        ChemicalChunkerParser.volume_return volume477 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity478 = null;

        ChemicalChunkerParser.equivalent_return equivalent479 = null;

        ChemicalChunkerParser.yield_return yield480 = null;

        ChemicalChunkerParser.percent_return percent481 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt158=8;
            alt158 = dfa158.predict(input);
            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2357_static.FOLLOW_molar_in_measurementtypes2357);
                    molar474=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar474.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2359_static.FOLLOW_amount_in_measurementtypes2359);
                    amount475=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount475.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2361_static.FOLLOW_mass_in_measurementtypes2361);
                    mass476=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass476.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2363_static.FOLLOW_volume_in_measurementtypes2363);
                    volume477=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume477.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2365_static.FOLLOW_logHydrogenActivity_in_measurementtypes2365);
                    logHydrogenActivity478=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity478.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2367_static.FOLLOW_equivalent_in_measurementtypes2367);
                    equivalent479=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent479.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2369_static.FOLLOW_yield_in_measurementtypes2369);
                    yield480=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield480.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2371_static.FOLLOW_percent_in_measurementtypes2371);
                    percent481=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent481.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: molar : cd nnmolar -> ^( MOLAR cd nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd482 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar483 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:7: ( cd nnmolar -> ^( MOLAR cd nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:9: cd nnmolar
            {
            pushFollow(FOLLOW_cd_in_molar2379_static.FOLLOW_cd_in_molar2379);
            cd482=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd482.getTree());
            pushFollow(FOLLOW_nnmolar_in_molar2381_static.FOLLOW_nnmolar_in_molar2381);
            nnmolar483=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar483.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:20: -> ^( MOLAR cd nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:23: ^( MOLAR cd nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: amount : cd nnamount -> ^( AMOUNT cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd484 = null;

        ChemicalChunkerParser.nnamount_return nnamount485 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:8: ( cd nnamount -> ^( AMOUNT cd nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount2401_static.FOLLOW_cd_in_amount2401);
            cd484=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd484.getTree());
            pushFollow(FOLLOW_nnamount_in_amount2403_static.FOLLOW_nnamount_in_amount2403);
            nnamount485=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount485.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:22: -> ^( AMOUNT cd nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:25: ^( AMOUNT cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:1: mass : cd nnmass -> ^( MASS cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd486 = null;

        ChemicalChunkerParser.nnmass_return nnmass487 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:6: ( cd nnmass -> ^( MASS cd nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass2423_static.FOLLOW_cd_in_mass2423);
            cd486=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd486.getTree());
            pushFollow(FOLLOW_nnmass_in_mass2425_static.FOLLOW_nnmass_in_mass2425);
            nnmass487=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass487.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:17: -> ^( MASS cd nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:20: ^( MASS cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: volume : cd nnvol -> ^( VOLUME cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd488 = null;

        ChemicalChunkerParser.nnvol_return nnvol489 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:8: ( cd nnvol -> ^( VOLUME cd nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume2444_static.FOLLOW_cd_in_volume2444);
            cd488=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd488.getTree());
            pushFollow(FOLLOW_nnvol_in_volume2446_static.FOLLOW_nnvol_in_volume2446);
            nnvol489=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol489.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:19: -> ^( VOLUME cd nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:22: ^( VOLUME cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph490 = null;

        ChemicalChunkerParser.sym_return sym491 = null;

        ChemicalChunkerParser.cd_return cd492 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2466_static.FOLLOW_nnph_in_logHydrogenActivity2466);
            nnph490=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph490.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:28: ( sym )?
            int alt159=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    alt159=1;
                    }
                    break;
            }

            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2468_static.FOLLOW_sym_in_logHydrogenActivity2468);
                    sym491=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym491.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2471_static.FOLLOW_cd_in_logHydrogenActivity2471);
            cd492=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd492.getTree());


            // AST REWRITE
            // elements: sym, cd, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: equivalent : cd nneq -> ^( EQUIVALENT cd nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd493 = null;

        ChemicalChunkerParser.nneq_return nneq494 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:11: ( cd nneq -> ^( EQUIVALENT cd nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:13: cd nneq
            {
            pushFollow(FOLLOW_cd_in_equivalent2491_static.FOLLOW_cd_in_equivalent2491);
            cd493=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd493.getTree());
            pushFollow(FOLLOW_nneq_in_equivalent2493_static.FOLLOW_nneq_in_equivalent2493);
            nneq494=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq494.getTree());


            // AST REWRITE
            // elements: nneq, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:21: -> ^( EQUIVALENT cd nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:24: ^( EQUIVALENT cd nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: yield : ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) );
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.yield1_return yield1495 = null;

        ChemicalChunkerParser.yield2_return yield2496 = null;


        RewriteRuleSubtreeStream stream_yield2=new RewriteRuleSubtreeStream(adaptor,"rule yield2");
        RewriteRuleSubtreeStream stream_yield1=new RewriteRuleSubtreeStream(adaptor,"rule yield1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:6: ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) )
            int alt160=2;
            switch ( input.LA(1) ) {
            case 130:
                {
                alt160=1;
                }
                break;
            case 146:
                {
                alt160=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:8: yield1
                    {
                    pushFollow(FOLLOW_yield1_in_yield2510_static.FOLLOW_yield1_in_yield2510);
                    yield1495=yield1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield1.add(yield1495.getTree());


                    // AST REWRITE
                    // elements: yield1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 299:15: -> ^( YIELD yield1 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:18: ^( YIELD yield1 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:35: yield2
                    {
                    pushFollow(FOLLOW_yield2_in_yield2521_static.FOLLOW_yield2_in_yield2521);
                    yield2496=yield2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield2.add(yield2496.getTree());


                    // AST REWRITE
                    // elements: yield2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 299:42: -> ^( YIELD yield2 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:45: ^( YIELD yield2 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class yield1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: yield1 : nnyield ( inof | colon ) percent ;
    public final ChemicalChunkerParser.yield1_return yield1() throws RecognitionException {
        ChemicalChunkerParser.yield1_return retval = new ChemicalChunkerParser.yield1_return();
        retval.start = input.LT(1);
        int yield1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnyield_return nnyield497 = null;

        ChemicalChunkerParser.inof_return inof498 = null;

        ChemicalChunkerParser.colon_return colon499 = null;

        ChemicalChunkerParser.percent_return percent500 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:7: ( nnyield ( inof | colon ) percent )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:9: nnyield ( inof | colon ) percent
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnyield_in_yield12535_static.FOLLOW_nnyield_in_yield12535);
            nnyield497=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield497.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:17: ( inof | colon )
            int alt161=2;
            switch ( input.LA(1) ) {
            case 56:
                {
                alt161=1;
                }
                break;
            case 132:
                {
                alt161=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:18: inof
                    {
                    pushFollow(FOLLOW_inof_in_yield12538_static.FOLLOW_inof_in_yield12538);
                    inof498=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof498.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:23: colon
                    {
                    pushFollow(FOLLOW_colon_in_yield12540_static.FOLLOW_colon_in_yield12540);
                    colon499=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon499.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percent_in_yield12543_static.FOLLOW_percent_in_yield12543);
            percent500=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent500.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, yield1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield1"

    public static class yield2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: yield2 : percent nnyield ;
    public final ChemicalChunkerParser.yield2_return yield2() throws RecognitionException {
        ChemicalChunkerParser.yield2_return retval = new ChemicalChunkerParser.yield2_return();
        retval.start = input.LT(1);
        int yield2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent501 = null;

        ChemicalChunkerParser.nnyield_return nnyield502 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:7: ( percent nnyield )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:9: percent nnyield
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_percent_in_yield22549_static.FOLLOW_percent_in_yield22549);
            percent501=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent501.getTree());
            pushFollow(FOLLOW_nnyield_in_yield22551_static.FOLLOW_nnyield_in_yield22551);
            nnyield502=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield502.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, yield2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield2"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: percent : cd ( nn )? nnpercent ( dash cd nnpercent )? -> ^( PERCENT cd ( nn )? nnpercent ( dash )? ( cd )? ( nnpercent )? ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd503 = null;

        ChemicalChunkerParser.nn_return nn504 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent505 = null;

        ChemicalChunkerParser.dash_return dash506 = null;

        ChemicalChunkerParser.cd_return cd507 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent508 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:9: ( cd ( nn )? nnpercent ( dash cd nnpercent )? -> ^( PERCENT cd ( nn )? nnpercent ( dash )? ( cd )? ( nnpercent )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:11: cd ( nn )? nnpercent ( dash cd nnpercent )?
            {
            pushFollow(FOLLOW_cd_in_percent2559_static.FOLLOW_cd_in_percent2559);
            cd503=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd503.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:14: ( nn )?
            int alt162=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt162=1;
                    }
                    break;
            }

            switch (alt162) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2561_static.FOLLOW_nn_in_percent2561);
                    nn504=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn504.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2564_static.FOLLOW_nnpercent_in_percent2564);
            nnpercent505=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent505.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:28: ( dash cd nnpercent )?
            int alt163=2;
            switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 146:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 138:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA163_7 = input.LA(7);

                                                            if ( (synpred388_ChemicalChunker()) ) {
                                                                alt163=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt163) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:30: dash cd nnpercent
                    {
                    pushFollow(FOLLOW_dash_in_percent2568_static.FOLLOW_dash_in_percent2568);
                    dash506=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash506.getTree());
                    pushFollow(FOLLOW_cd_in_percent2570_static.FOLLOW_cd_in_percent2570);
                    cd507=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd507.getTree());
                    pushFollow(FOLLOW_nnpercent_in_percent2572_static.FOLLOW_nnpercent_in_percent2572);
                    nnpercent508=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent508.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nnpercent, cd, nnpercent, nn, cd, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:50: -> ^( PERCENT cd ( nn )? nnpercent ( dash )? ( cd )? ( nnpercent )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:53: ^( PERCENT cd ( nn )? nnpercent ( dash )? ( cd )? ( nnpercent )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:68: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:82: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:88: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:92: ( nnpercent )?
                if ( stream_nnpercent.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnpercent.nextTree());

                }
                stream_nnpercent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:1: mixture : ( ratio )? ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 ) -> ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio509 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1510 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2511 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3512 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:8: ( ( ratio )? ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 ) -> ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:10: ( ratio )? ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:10: ( ratio )?
            int alt164=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt164=1;
                    }
                    break;
            }

            switch (alt164) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_mixture2605_static.FOLLOW_ratio_in_mixture2605);
                    ratio509=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio509.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:18: ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 )
            int alt165=3;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:19: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture2610_static.FOLLOW_mixtureStructure1_in_mixture2610);
                    mixtureStructure1510=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1510.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:37: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture2612_static.FOLLOW_mixtureStructure2_in_mixture2612);
                    mixtureStructure2511=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2511.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:55: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture2614_static.FOLLOW_mixtureStructure3_in_mixture2614);
                    mixtureStructure3512=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3512.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure3, mixtureStructure2, ratio, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:74: -> ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:77: ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:87: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:94: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:113: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:132: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: mixtureStructure1 : lrb ( nnpercent | ratio ) rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb513 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent514 = null;

        ChemicalChunkerParser.ratio_return ratio515 = null;

        ChemicalChunkerParser.rrb_return rrb516 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:18: ( lrb ( nnpercent | ratio ) rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:20: lrb ( nnpercent | ratio ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure12639_static.FOLLOW_lrb_in_mixtureStructure12639);
            lrb513=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb513.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:24: ( nnpercent | ratio )
            int alt166=2;
            switch ( input.LA(1) ) {
            case 138:
                {
                alt166=1;
                }
                break;
            case 146:
                {
                alt166=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:25: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureStructure12642_static.FOLLOW_nnpercent_in_mixtureStructure12642);
                    nnpercent514=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent514.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:35: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_mixtureStructure12644_static.FOLLOW_ratio_in_mixtureStructure12644);
                    ratio515=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio515.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_mixtureStructure12647_static.FOLLOW_rrb_in_mixtureStructure12647);
            rrb516=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb516.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma517 = null;

        ChemicalChunkerParser.lrb_return lrb518 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent519 = null;

        ChemicalChunkerParser.rrb_return rrb520 = null;

        ChemicalChunkerParser.comma_return comma521 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure22653_static.FOLLOW_comma_in_mixtureStructure22653);
            comma517=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma517.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure22655_static.FOLLOW_lrb_in_mixtureStructure22655);
            lrb518=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb518.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure22657_static.FOLLOW_mixtureContent_in_mixtureStructure22657);
            mixtureContent519=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent519.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure22659_static.FOLLOW_rrb_in_mixtureStructure22659);
            rrb520=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb520.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure22661_static.FOLLOW_comma_in_mixtureStructure22661);
            comma521=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma521.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: mixtureStructure3 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb522 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent523 = null;

        ChemicalChunkerParser.rrb_return rrb524 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure32667_static.FOLLOW_lrb_in_mixtureStructure32667);
            lrb522=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb522.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure32669_static.FOLLOW_mixtureContent_in_mixtureStructure32669);
            mixtureContent523=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent523.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure32671_static.FOLLOW_rrb_in_mixtureStructure32671);
            rrb524=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb524.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: mixtureContent : ( verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb525 = null;

        ChemicalChunkerParser.nn_return nn526 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node527 = null;

        ChemicalChunkerParser.md_return md528 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent529 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound530 = null;

        ChemicalChunkerParser.molecule_return molecule531 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule532 = null;

        ChemicalChunkerParser.dash_return dash533 = null;

        ChemicalChunkerParser.sym_return sym534 = null;

        ChemicalChunkerParser.noun_return noun535 = null;

        ChemicalChunkerParser.inAll_return inAll536 = null;

        ChemicalChunkerParser.cd_return cd537 = null;

        ChemicalChunkerParser.comma_return comma538 = null;

        ChemicalChunkerParser.adj_return adj539 = null;

        ChemicalChunkerParser.colon_return colon540 = null;

        ChemicalChunkerParser.stop_return stop541 = null;

        ChemicalChunkerParser.minimixture_return minimixture542 = null;

        ChemicalChunkerParser.verb_return verb543 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node544 = null;

        ChemicalChunkerParser.nnyield_return nnyield545 = null;

        ChemicalChunkerParser.md_return md546 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent547 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound548 = null;

        ChemicalChunkerParser.molecule_return molecule549 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule550 = null;

        ChemicalChunkerParser.dash_return dash551 = null;

        ChemicalChunkerParser.sym_return sym552 = null;

        ChemicalChunkerParser.noun_return noun553 = null;

        ChemicalChunkerParser.inAll_return inAll554 = null;

        ChemicalChunkerParser.cd_return cd555 = null;

        ChemicalChunkerParser.comma_return comma556 = null;

        ChemicalChunkerParser.adj_return adj557 = null;

        ChemicalChunkerParser.colon_return colon558 = null;

        ChemicalChunkerParser.stop_return stop559 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:15: ( ( verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:19: ( verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:19: ( verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )
            int alt167=17;
            alt167 = dfa167.predict(input);
            switch (alt167) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:20: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent2681_static.FOLLOW_verb_in_mixtureContent2681);
                    verb525=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb525.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:25: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent2683_static.FOLLOW_nn_in_mixtureContent2683);
                    nn526=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn526.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:28: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2685_static.FOLLOW_quantity2Node_in_mixtureContent2685);
                    quantity2Node527=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node527.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:42: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent2687_static.FOLLOW_md_in_mixtureContent2687);
                    md528=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md528.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:45: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent2689_static.FOLLOW_nnpercent_in_mixtureContent2689);
                    nnpercent529=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent529.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:55: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2691_static.FOLLOW_oscarCompound_in_mixtureContent2691);
                    oscarCompound530=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound530.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:69: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent2693_static.FOLLOW_molecule_in_mixtureContent2693);
                    molecule531=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule531.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:78: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2695_static.FOLLOW_unnamedmolecule_in_mixtureContent2695);
                    unnamedmolecule532=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule532.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:94: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent2697_static.FOLLOW_dash_in_mixtureContent2697);
                    dash533=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash533.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:99: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent2699_static.FOLLOW_sym_in_mixtureContent2699);
                    sym534=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym534.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:103: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent2701_static.FOLLOW_noun_in_mixtureContent2701);
                    noun535=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun535.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:108: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent2703_static.FOLLOW_inAll_in_mixtureContent2703);
                    inAll536=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll536.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:114: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2705_static.FOLLOW_cd_in_mixtureContent2705);
                    cd537=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd537.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:117: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent2707_static.FOLLOW_comma_in_mixtureContent2707);
                    comma538=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma538.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:123: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent2709_static.FOLLOW_adj_in_mixtureContent2709);
                    adj539=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj539.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:127: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent2711_static.FOLLOW_colon_in_mixtureContent2711);
                    colon540=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon540.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:133: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2713_static.FOLLOW_stop_in_mixtureContent2713);
                    stop541=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop541.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:139: ( minimixture | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            int cnt168=0;
            loop168:
            do {
                int alt168=19;
                alt168 = dfa168.predict(input);
                switch (alt168) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:140: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent2717_static.FOLLOW_minimixture_in_mixtureContent2717);
            	    minimixture542=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture542.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:152: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent2719_static.FOLLOW_verb_in_mixtureContent2719);
            	    verb543=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb543.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:157: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2721_static.FOLLOW_quantity2Node_in_mixtureContent2721);
            	    quantity2Node544=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node544.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:171: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent2723_static.FOLLOW_nnyield_in_mixtureContent2723);
            	    nnyield545=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield545.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:179: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent2725_static.FOLLOW_md_in_mixtureContent2725);
            	    md546=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md546.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:182: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent2727_static.FOLLOW_nnpercent_in_mixtureContent2727);
            	    nnpercent547=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent547.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:192: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2729_static.FOLLOW_oscarCompound_in_mixtureContent2729);
            	    oscarCompound548=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound548.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:206: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent2731_static.FOLLOW_molecule_in_mixtureContent2731);
            	    molecule549=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule549.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:215: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2733_static.FOLLOW_unnamedmolecule_in_mixtureContent2733);
            	    unnamedmolecule550=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule550.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:231: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent2735_static.FOLLOW_dash_in_mixtureContent2735);
            	    dash551=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash551.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:236: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent2737_static.FOLLOW_sym_in_mixtureContent2737);
            	    sym552=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym552.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:240: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent2739_static.FOLLOW_noun_in_mixtureContent2739);
            	    noun553=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun553.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:245: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent2741_static.FOLLOW_inAll_in_mixtureContent2741);
            	    inAll554=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll554.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:251: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2743_static.FOLLOW_cd_in_mixtureContent2743);
            	    cd555=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd555.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:254: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent2745_static.FOLLOW_comma_in_mixtureContent2745);
            	    comma556=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma556.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:260: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent2747_static.FOLLOW_adj_in_mixtureContent2747);
            	    adj557=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj557.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:264: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent2749_static.FOLLOW_colon_in_mixtureContent2749);
            	    colon558=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon558.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:270: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2751_static.FOLLOW_stop_in_mixtureContent2751);
            	    stop559=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop559.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt168 >= 1 ) break loop168;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(168, input);
                        throw eee;
                }
                cnt168++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: minimixture : ( mixtureStructure2 | mixtureStructure3 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure3 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2560 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3561 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:12: ( ( mixtureStructure2 | mixtureStructure3 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:14: ( mixtureStructure2 | mixtureStructure3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:14: ( mixtureStructure2 | mixtureStructure3 )
            int alt169=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt169=1;
                }
                break;
            case 143:
                {
                alt169=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture2762_static.FOLLOW_mixtureStructure2_in_minimixture2762);
                    mixtureStructure2560=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2560.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:33: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_minimixture2764_static.FOLLOW_mixtureStructure3_in_minimixture2764);
                    mixtureStructure3561=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3561.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 311:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:85: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class fromProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:1: fromProcedure : ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode ;
    public final ChemicalChunkerParser.fromProcedure_return fromProcedure() throws RecognitionException {
        ChemicalChunkerParser.fromProcedure_return retval = new ChemicalChunkerParser.fromProcedure_return();
        retval.start = input.LT(1);
        int fromProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.infrom_return infrom562 = null;

        ChemicalChunkerParser.inof_return inof563 = null;

        ChemicalChunkerParser.vbyield_return vbyield564 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize565 = null;

        ChemicalChunkerParser.inin_return inin566 = null;

        ChemicalChunkerParser.inby_return inby567 = null;

        ChemicalChunkerParser.infrom_return infrom568 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode569 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:14: ( ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) )
            int alt172=3;
            switch ( input.LA(1) ) {
            case 59:
                {
                alt172=1;
                }
                break;
            case 56:
                {
                alt172=2;
                }
                break;
            case 125:
            case 129:
                {
                alt172=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:17: infrom
                    {
                    pushFollow(FOLLOW_infrom_in_fromProcedure2786_static.FOLLOW_infrom_in_fromProcedure2786);
                    infrom562=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom562.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:26: {...}? inof
                    {
                    if ( !((precededByProduct(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "precededByProduct(input)");
                    }
                    pushFollow(FOLLOW_inof_in_fromProcedure2792_static.FOLLOW_inof_in_fromProcedure2792);
                    inof563=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof563.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:61: {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom )
                    {
                    if ( !((suitableVbYieldOrSynthesizeForReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "suitableVbYieldOrSynthesizeForReference(input)");
                    }
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:111: ( vbyield | vbsynthesize )
                    int alt170=2;
                    switch ( input.LA(1) ) {
                    case 129:
                        {
                        alt170=1;
                        }
                        break;
                    case 125:
                        {
                        alt170=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 0, input);

                        throw nvae;
                    }

                    switch (alt170) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:112: vbyield
                            {
                            pushFollow(FOLLOW_vbyield_in_fromProcedure2799_static.FOLLOW_vbyield_in_fromProcedure2799);
                            vbyield564=vbyield();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield564.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:120: vbsynthesize
                            {
                            pushFollow(FOLLOW_vbsynthesize_in_fromProcedure2801_static.FOLLOW_vbsynthesize_in_fromProcedure2801);
                            vbsynthesize565=vbsynthesize();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize565.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:134: ( inin | inby | infrom )
                    int alt171=3;
                    switch ( input.LA(1) ) {
                    case 50:
                        {
                        alt171=1;
                        }
                        break;
                    case 54:
                        {
                        alt171=2;
                        }
                        break;
                    case 59:
                        {
                        alt171=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }

                    switch (alt171) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:135: inin
                            {
                            pushFollow(FOLLOW_inin_in_fromProcedure2805_static.FOLLOW_inin_in_fromProcedure2805);
                            inin566=inin();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin566.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:140: inby
                            {
                            pushFollow(FOLLOW_inby_in_fromProcedure2807_static.FOLLOW_inby_in_fromProcedure2807);
                            inby567=inby();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inby567.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:145: infrom
                            {
                            pushFollow(FOLLOW_infrom_in_fromProcedure2809_static.FOLLOW_infrom_in_fromProcedure2809);
                            infrom568=infrom();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom568.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_procedureNode_in_fromProcedure2813_static.FOLLOW_procedureNode_in_fromProcedure2813);
            procedureNode569=procedureNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode569.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, fromProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fromProcedure"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method570 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2820_static.FOLLOW_method_in_procedureNode2820);
            method570=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method570.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: method : ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( ( comma | colon )? submethod | lrb submethod rrb )* ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral571 = null;

        ChemicalChunkerParser.nn_return nn572 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod573 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier574 = null;

        ChemicalChunkerParser.numeric_return numeric575 = null;

        ChemicalChunkerParser.nnexample_return nnexample576 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier577 = null;

        ChemicalChunkerParser.numeric_return numeric578 = null;

        ChemicalChunkerParser.comma_return comma579 = null;

        ChemicalChunkerParser.colon_return colon580 = null;

        ChemicalChunkerParser.submethod_return submethod581 = null;

        ChemicalChunkerParser.lrb_return lrb582 = null;

        ChemicalChunkerParser.submethod_return submethod583 = null;

        ChemicalChunkerParser.rrb_return rrb584 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:7: ( ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( ( comma | colon )? submethod | lrb submethod rrb )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:5: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( ( comma | colon )? submethod | lrb submethod rrb )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:5: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) )
            int alt176=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 156:
                {
                alt176=1;
                }
                break;
            case 83:
                {
                alt176=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:6: ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:6: ( nngeneral | nn )?
                    int alt173=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt173=1;
                            }
                            break;
                        case 156:
                            {
                            alt173=2;
                            }
                            break;
                    }

                    switch (alt173) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:7: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2841_static.FOLLOW_nngeneral_in_method2841);
                            nngeneral571=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral571.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:17: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2843_static.FOLLOW_nn_in_method2843);
                            nn572=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn572.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2847_static.FOLLOW_nnmethod_in_method2847);
                    nnmethod573=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod573.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:31: ( identifierOrBracketedIdentifier | numeric )?
                    int alt174=3;
                    alt174 = dfa174.predict(input);
                    switch (alt174) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:32: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2850_static.FOLLOW_identifierOrBracketedIdentifier_in_method2850);
                            identifierOrBracketedIdentifier574=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier574.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:64: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2852_static.FOLLOW_numeric_in_method2852);
                            numeric575=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric575.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:76: nnexample ( identifierOrBracketedIdentifier | numeric )
                    {
                    pushFollow(FOLLOW_nnexample_in_method2858_static.FOLLOW_nnexample_in_method2858);
                    nnexample576=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample576.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:86: ( identifierOrBracketedIdentifier | numeric )
                    int alt175=2;
                    switch ( input.LA(1) ) {
                    case 146:
                        {
                        switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                            case 141:
                                {
                                switch ( input.LA(4) ) {
                                case TOKEN:
                                    {
                                    int LA175_6 = input.LA(5);

                                    if ( (synpred438_ChemicalChunker()) ) {
                                        alt175=1;
                                    }
                                    else if ( (true) ) {
                                        alt175=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 175, 6, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 175, 5, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case EOF:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 135:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 140:
                            case 142:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 164:
                            case 165:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt175=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 175, 4, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 1, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                    case 143:
                        {
                        alt175=1;
                        }
                        break;
                    case 38:
                        {
                        alt175=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 175, 0, input);

                        throw nvae;
                    }

                    switch (alt175) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:87: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2861_static.FOLLOW_identifierOrBracketedIdentifier_in_method2861);
                            identifierOrBracketedIdentifier577=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier577.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:119: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2863_static.FOLLOW_numeric_in_method2863);
                            numeric578=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric578.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:129: ( ( comma | colon )? submethod | lrb submethod rrb )*
            loop178:
            do {
                int alt178=3;
                alt178 = dfa178.predict(input);
                switch (alt178) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:131: ( comma | colon )? submethod
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:131: ( comma | colon )?
            	    int alt177=3;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt177=1;
            	            }
            	            break;
            	        case 132:
            	            {
            	            alt177=2;
            	            }
            	            break;
            	    }

            	    switch (alt177) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:132: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_method2870_static.FOLLOW_comma_in_method2870);
            	            comma579=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma579.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:139: colon
            	            {
            	            pushFollow(FOLLOW_colon_in_method2873_static.FOLLOW_colon_in_method2873);
            	            colon580=colon();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon580.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_submethod_in_method2877_static.FOLLOW_submethod_in_method2877);
            	    submethod581=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod581.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:159: lrb submethod rrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_method2881_static.FOLLOW_lrb_in_method2881);
            	    lrb582=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb582.getTree());
            	    pushFollow(FOLLOW_submethod_in_method2883_static.FOLLOW_submethod_in_method2883);
            	    submethod583=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod583.getTree());
            	    pushFollow(FOLLOW_rrb_in_method2885_static.FOLLOW_rrb_in_method2885);
            	    rrb584=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb584.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class submethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: submethod : ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric ) ;
    public final ChemicalChunkerParser.submethod_return submethod() throws RecognitionException {
        ChemicalChunkerParser.submethod_return retval = new ChemicalChunkerParser.submethod_return();
        retval.start = input.LT(1);
        int submethod_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod585 = null;

        ChemicalChunkerParser.nnexample_return nnexample586 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier587 = null;

        ChemicalChunkerParser.numeric_return numeric588 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:11: ( ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:13: ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:13: ( nnmethod | nnexample )
            int alt179=2;
            switch ( input.LA(1) ) {
            case 76:
                {
                alt179=1;
                }
                break;
            case 83:
                {
                alt179=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:14: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_submethod2896_static.FOLLOW_nnmethod_in_submethod2896);
                    nnmethod585=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod585.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:23: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_submethod2898_static.FOLLOW_nnexample_in_submethod2898);
                    nnexample586=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample586.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:34: ( identifierOrBracketedIdentifier | numeric )
            int alt180=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt180=2;
                        }
                        break;
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA180_6 = input.LA(5);

                            if ( (synpred444_ChemicalChunker()) ) {
                                alt180=1;
                            }
                            else if ( (true) ) {
                                alt180=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 180, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 180, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 180, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt180=1;
                }
                break;
            case 38:
                {
                alt180=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:35: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_submethod2902_static.FOLLOW_identifierOrBracketedIdentifier_in_submethod2902);
                    identifierOrBracketedIdentifier587=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier587.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:67: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_submethod2904_static.FOLLOW_numeric_in_submethod2904);
                    numeric588=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric588.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, submethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submethod"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:1: referenceToExampleCompound : nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample589 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier590 = null;

        ChemicalChunkerParser.numeric_return numeric591 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:28: ( nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:2: nnexample ( identifierOrBracketedIdentifier | numeric )
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound2914_static.FOLLOW_nnexample_in_referenceToExampleCompound2914);
            nnexample589=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample589.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:12: ( identifierOrBracketedIdentifier | numeric )
            int alt181=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt181=2;
                        }
                        break;
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA181_6 = input.LA(5);

                            if ( (synpred445_ChemicalChunker()) ) {
                                alt181=1;
                            }
                            else if ( (true) ) {
                                alt181=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 181, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 181, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt181=1;
                }
                break;
            case 38:
                {
                alt181=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:13: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2917_static.FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2917);
                    identifierOrBracketedIdentifier590=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier590.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:45: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_referenceToExampleCompound2919_static.FOLLOW_numeric_in_referenceToExampleCompound2919);
                    numeric591=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric591.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: identifierOrBracketedIdentifier, nnexample, numeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:54: -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:57: ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:89: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:122: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv592 = null;

        ChemicalChunkerParser.adj_return adj593 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:2: ( adv | adj )
            int alt182=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt182=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt182=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2942_static.FOLLOW_adv_in_advAdj2942);
                    adv592=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv592.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2944_static.FOLLOW_adj_in_advAdj2944);
                    adj593=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj593.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric594 = null;

        ChemicalChunkerParser.dash_return dash595 = null;

        ChemicalChunkerParser.numeric_return numeric596 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2951_static.FOLLOW_numeric_in_range2951);
            numeric594=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric594.getTree());
            pushFollow(FOLLOW_dash_in_range2953_static.FOLLOW_dash_in_range2953);
            dash595=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash595.getTree());
            pushFollow(FOLLOW_numeric_in_range2955_static.FOLLOW_numeric_in_range2955);
            numeric596=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric596.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure597 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2962_static.FOLLOW_cycleStructure_in_cycles2962);
            cycleStructure597=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure597.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd598 = null;

        ChemicalChunkerParser.dashNN_return dashNN599 = null;

        ChemicalChunkerParser.nncycle_return nncycle600 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2979_static.FOLLOW_cd_in_cycleStructure2979);
            cd598=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd598.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:21: ( dashNN )?
            int alt183=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt183=1;
                    }
                    break;
            }

            switch (alt183) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2981_static.FOLLOW_dashNN_in_cycleStructure2981);
                    dashNN599=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN599.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2984_static.FOLLOW_nncycle_in_cycleStructure2984);
            nncycle600=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle600.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj601 = null;

        ChemicalChunkerParser.nn_return nn602 = null;

        ChemicalChunkerParser.cd_return cd603 = null;

        ChemicalChunkerParser.dash_return dash604 = null;

        ChemicalChunkerParser.adj_return adj605 = null;

        ChemicalChunkerParser.nn_return nn606 = null;

        ChemicalChunkerParser.cd_return cd607 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:10: ( adj | nn | cd )
            int alt184=3;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt184=1;
                }
                break;
            case 156:
                {
                alt184=2;
                }
                break;
            case 146:
                {
                alt184=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2992_static.FOLLOW_adj_in_dashNN2992);
                    adj601=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj601.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2994_static.FOLLOW_nn_in_dashNN2994);
                    nn602=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn602.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2996_static.FOLLOW_cd_in_dashNN2996);
                    cd603=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd603.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:22: ( dash ( adj | nn | cd ) )*
            loop186:
            do {
                int alt186=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt186=1;
                    }
                    break;

                }

                switch (alt186) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN3000_static.FOLLOW_dash_in_dashNN3000);
            	    dash604=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash604.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:28: ( adj | nn | cd )
            	    int alt185=3;
            	    switch ( input.LA(1) ) {
            	    case 39:
            	    case 40:
            	    case 45:
            	    case 151:
            	    case 152:
            	    case 153:
            	        {
            	        alt185=1;
            	        }
            	        break;
            	    case 156:
            	        {
            	        alt185=2;
            	        }
            	        break;
            	    case 146:
            	        {
            	        alt185=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 185, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt185) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN3003_static.FOLLOW_adj_in_dashNN3003);
            	            adj605=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj605.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN3005_static.FOLLOW_nn_in_dashNN3005);
            	            nn606=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn606.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN3007_static.FOLLOW_cd_in_dashNN3007);
            	            cd607=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd607.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratioOrBracketedRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratioOrBracketedRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: ratioOrBracketedRatio : ( lrb ratio rrb | ratio );
    public final ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio() throws RecognitionException {
        ChemicalChunkerParser.ratioOrBracketedRatio_return retval = new ChemicalChunkerParser.ratioOrBracketedRatio_return();
        retval.start = input.LT(1);
        int ratioOrBracketedRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb608 = null;

        ChemicalChunkerParser.ratio_return ratio609 = null;

        ChemicalChunkerParser.rrb_return rrb610 = null;

        ChemicalChunkerParser.ratio_return ratio611 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:23: ( lrb ratio rrb | ratio )
            int alt187=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt187=1;
                }
                break;
            case 146:
                {
                alt187=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:25: lrb ratio rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lrb_in_ratioOrBracketedRatio3018_static.FOLLOW_lrb_in_ratioOrBracketedRatio3018);
                    lrb608=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb608.getTree());
                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3020_static.FOLLOW_ratio_in_ratioOrBracketedRatio3020);
                    ratio609=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio609.getTree());
                    pushFollow(FOLLOW_rrb_in_ratioOrBracketedRatio3022_static.FOLLOW_rrb_in_ratioOrBracketedRatio3022);
                    rrb610=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb610.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:41: ratio
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3026_static.FOLLOW_ratio_in_ratioOrBracketedRatio3026);
                    ratio611=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio611.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, ratioOrBracketedRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratioOrBracketedRatio"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: ratio : cdRatio -> ^( RATIO cdRatio ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatio_return cdRatio612 = null;


        RewriteRuleSubtreeStream stream_cdRatio=new RewriteRuleSubtreeStream(adaptor,"rule cdRatio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:7: ( cdRatio -> ^( RATIO cdRatio ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:9: cdRatio
            {
            pushFollow(FOLLOW_cdRatio_in_ratio3033_static.FOLLOW_cdRatio_in_ratio3033);
            cdRatio612=cdRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdRatio.add(cdRatio612.getTree());


            // AST REWRITE
            // elements: cdRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:17: -> ^( RATIO cdRatio )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:20: ^( RATIO cdRatio )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                adaptor.addChild(root_1, stream_cdRatio.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class cdRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:1: cdRatio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.cdRatio_return cdRatio() throws RecognitionException {
        ChemicalChunkerParser.cdRatio_return retval = new ChemicalChunkerParser.cdRatio_return();
        retval.start = input.LT(1);
        int cdRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd613 = null;

        ChemicalChunkerParser.colon_return colon614 = null;

        ChemicalChunkerParser.cd_return cd615 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:9: ( cd ( colon cd )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:11: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cdRatio3048_static.FOLLOW_cd_in_cdRatio3048);
            cd613=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd613.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:14: ( colon cd )+
            int cnt188=0;
            loop188:
            do {
                int alt188=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 146:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA188_5 = input.LA(5);

                                if ( (synpred454_ChemicalChunker()) ) {
                                    alt188=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt188) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:15: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_cdRatio3051_static.FOLLOW_colon_in_cdRatio3051);
            	    colon614=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon614.getTree());
            	    pushFollow(FOLLOW_cd_in_cdRatio3053_static.FOLLOW_cd_in_cdRatio3053);
            	    cd615=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd615.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt188 >= 1 ) break loop188;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(188, input);
                        throw eee;
                }
                cnt188++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, cdRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure616 = null;

        ChemicalChunkerParser.comma_return comma617 = null;

        ChemicalChunkerParser.citationContent_return citationContent618 = null;

        ChemicalChunkerParser.comma_return comma619 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:9: ( citationStructure | comma citationContent comma )
            int alt189=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt189=1;
                }
                break;
            case 133:
                {
                alt189=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation3063_static.FOLLOW_citationStructure_in_citation3063);
                    citationStructure616=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure616.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation3065_static.FOLLOW_comma_in_citation3065);
                    comma617=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma617.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation3067_static.FOLLOW_citationContent_in_citation3067);
                    citationContent618=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent618.getTree());
                    pushFollow(FOLLOW_comma_in_citation3069_static.FOLLOW_comma_in_citation3069);
                    comma619=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma619.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent620 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure3077_static.FOLLOW_citationContent_in_citationStructure3077);
            citationContent620=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent620.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb621 = null;

        ChemicalChunkerParser.nnp_return nnp622 = null;

        ChemicalChunkerParser.fw_return fw623 = null;

        ChemicalChunkerParser.cd_return cd624 = null;

        ChemicalChunkerParser.conjunction_return conjunction625 = null;

        ChemicalChunkerParser.nnp_return nnp626 = null;

        ChemicalChunkerParser.fw_return fw627 = null;

        ChemicalChunkerParser.cd_return cd628 = null;

        ChemicalChunkerParser.conjunction_return conjunction629 = null;

        ChemicalChunkerParser.rrb_return rrb630 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent3093_static.FOLLOW_lrb_in_citationContent3093);
            lrb621=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb621.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:24: ( nnp | fw | cd | conjunction )
            int alt190=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt190=1;
                }
                break;
            case 149:
                {
                alt190=2;
                }
                break;
            case 146:
                {
                alt190=3;
                }
                break;
            case 133:
            case 145:
                {
                alt190=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent3096_static.FOLLOW_nnp_in_citationContent3096);
                    nnp622=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp622.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent3098_static.FOLLOW_fw_in_citationContent3098);
                    fw623=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw623.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent3100_static.FOLLOW_cd_in_citationContent3100);
                    cd624=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd624.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent3102_static.FOLLOW_conjunction_in_citationContent3102);
                    conjunction625=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction625.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:48: ( nnp | fw | cd | conjunction )+
            int cnt191=0;
            loop191:
            do {
                int alt191=5;
                switch ( input.LA(1) ) {
                case 158:
                    {
                    alt191=1;
                    }
                    break;
                case 149:
                    {
                    alt191=2;
                    }
                    break;
                case 146:
                    {
                    alt191=3;
                    }
                    break;
                case 133:
                case 145:
                    {
                    alt191=4;
                    }
                    break;

                }

                switch (alt191) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent3106_static.FOLLOW_nnp_in_citationContent3106);
            	    nnp626=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp626.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent3108_static.FOLLOW_fw_in_citationContent3108);
            	    fw627=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw627.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent3110_static.FOLLOW_cd_in_citationContent3110);
            	    cd628=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd628.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent3112_static.FOLLOW_conjunction_in_citationContent3112);
            	    conjunction629=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction629.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt191 >= 1 ) break loop191;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(191, input);
                        throw eee;
                }
                cnt191++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent3116_static.FOLLOW_rrb_in_citationContent3116);
            rrb630=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb630.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric631 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric632 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:27: ( numeric | bracketedNumeric )
            int alt192=2;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt192=1;
                }
                break;
            case 143:
                {
                alt192=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric3126_static.FOLLOW_numeric_in_numericOrBracketedNumeric3126);
                    numeric631=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric631.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3130_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3130);
                    bracketedNumeric632=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric632.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb633 = null;

        ChemicalChunkerParser.numeric_return numeric634 = null;

        ChemicalChunkerParser.rrb_return rrb635 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric3138_static.FOLLOW_lrb_in_bracketedNumeric3138);
            lrb633=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb633.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric3140_static.FOLLOW_numeric_in_bracketedNumeric3140);
            numeric634=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric634.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric3142_static.FOLLOW_rrb_in_bracketedNumeric3142);
            rrb635=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb635.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd636 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier637 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier638 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt194=2;
            switch ( input.LA(1) ) {
            case 141:
            case 146:
                {
                alt194=1;
                }
                break;
            case 143:
                {
                alt194=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:35: ( cd )?
                    int alt193=2;
                    switch ( input.LA(1) ) {
                        case 146:
                            {
                            alt193=1;
                            }
                            break;
                    }

                    switch (alt193) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier3149_static.FOLLOW_cd_in_identifierOrBracketedIdentifier3149);
                            cd636=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd636.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3152_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3152);
                    nnidentifier637=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier637.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3156_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3156);
                    bracketedIdentifier638=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier638.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb639 = null;

        ChemicalChunkerParser.cd_return cd640 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier641 = null;

        ChemicalChunkerParser.rrb_return rrb642 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier3164_static.FOLLOW_lrb_in_bracketedIdentifier3164);
            lrb639=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb639.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:28: ( cd )?
            int alt195=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt195=1;
                    }
                    break;
            }

            switch (alt195) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier3166_static.FOLLOW_cd_in_bracketedIdentifier3166);
                    cd640=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd640.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier3169_static.FOLLOW_nnidentifier_in_bracketedIdentifier3169);
            nnidentifier641=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier641.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier3171_static.FOLLOW_rrb_in_bracketedIdentifier3171);
            rrb642=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb642.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj643 = null;

        ChemicalChunkerParser.jjr_return jjr644 = null;

        ChemicalChunkerParser.jjs_return jjs645 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj646 = null;

        ChemicalChunkerParser.jjchem_return jjchem647 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn648 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt196=6;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt196=1;
                }
                break;
            case 152:
                {
                alt196=2;
                }
                break;
            case 153:
                {
                alt196=3;
                }
                break;
            case 39:
                {
                alt196=4;
                }
                break;
            case 45:
                {
                alt196=5;
                }
                break;
            case 40:
                {
                alt196=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj3179_static.FOLLOW_jj_in_adj3179);
                    jj643=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj643.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj3181_static.FOLLOW_jjr_in_adj3181);
                    jjr644=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr644.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj3183_static.FOLLOW_jjs_in_adj3183);
                    jjs645=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs645.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj3185_static.FOLLOW_oscarcj_in_adj3185);
                    oscarcj646=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj646.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj3187_static.FOLLOW_jjchem_in_adj3187);
                    jjchem647=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem647.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj3189_static.FOLLOW_oscarrn_in_adj3189);
                    oscarrn648=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn648.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb649 = null;

        ChemicalChunkerParser.rbr_return rbr650 = null;

        ChemicalChunkerParser.rp_return rp651 = null;

        ChemicalChunkerParser.rbs_return rbs652 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:5: ( rb | rbr | rp | rbs )
            int alt197=4;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt197=1;
                }
                break;
            case 165:
                {
                alt197=2;
                }
                break;
            case 167:
                {
                alt197=3;
                }
                break;
            case 166:
                {
                alt197=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv3196_static.FOLLOW_rb_in_adv3196);
                    rb649=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb649.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv3198_static.FOLLOW_rbr_in_adv3198);
                    rbr650=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr650.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv3200_static.FOLLOW_rp_in_adv3200);
                    rp651=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp651.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv3202_static.FOLLOW_rbs_in_adv3202);
                    rbs652=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs652.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt653 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss654 = null;

        ChemicalChunkerParser.wrb_return wrb655 = null;

        ChemicalChunkerParser.ex_return ex656 = null;

        ChemicalChunkerParser.pdt_return pdt657 = null;

        ChemicalChunkerParser.wp_return wp658 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt198=6;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt198=1;
                }
                break;
            case 179:
                {
                alt198=2;
                }
                break;
            case 180:
                {
                alt198=3;
                }
                break;
            case 148:
                {
                alt198=4;
                }
                break;
            case 160:
                {
                alt198=5;
                }
                break;
            case 178:
                {
                alt198=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause3209_static.FOLLOW_wdt_in_clause3209);
                    wdt653=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt653.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause3211_static.FOLLOW_wp_poss_in_clause3211);
                    wp_poss654=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss654.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause3213_static.FOLLOW_wrb_in_clause3213);
                    wrb655=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb655.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause3215_static.FOLLOW_ex_in_clause3215);
                    ex656=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex656.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause3217_static.FOLLOW_pdt_in_clause3217);
                    pdt657=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt657.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause3219_static.FOLLOW_wp_in_clause3219);
                    wp658=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp658.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc659 = null;

        ChemicalChunkerParser.comma_return comma660 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:13: ( cc | comma )
            int alt199=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt199=1;
                }
                break;
            case 133:
                {
                alt199=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }

            switch (alt199) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction3226_static.FOLLOW_cc_in_conjunction3226);
                    cc659=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc659.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction3228_static.FOLLOW_comma_in_conjunction3228);
                    comma660=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma660.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in661 = null;

        ChemicalChunkerParser.inafter_return inafter662 = null;

        ChemicalChunkerParser.inas_return inas663 = null;

        ChemicalChunkerParser.inbefore_return inbefore664 = null;

        ChemicalChunkerParser.inby_return inby665 = null;

        ChemicalChunkerParser.infor_return infor666 = null;

        ChemicalChunkerParser.infrom_return infrom667 = null;

        ChemicalChunkerParser.inin_return inin668 = null;

        ChemicalChunkerParser.ininto_return ininto669 = null;

        ChemicalChunkerParser.inof_return inof670 = null;

        ChemicalChunkerParser.inoff_return inoff671 = null;

        ChemicalChunkerParser.inon_return inon672 = null;

        ChemicalChunkerParser.inover_return inover673 = null;

        ChemicalChunkerParser.inunder_return inunder674 = null;

        ChemicalChunkerParser.invia_return invia675 = null;

        ChemicalChunkerParser.inwith_return inwith676 = null;

        ChemicalChunkerParser.inwithout_return inwithout677 = null;

        ChemicalChunkerParser.to_return to678 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt200=18;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt200=1;
                }
                break;
            case 49:
                {
                alt200=2;
                }
                break;
            case 47:
                {
                alt200=3;
                }
                break;
            case 48:
                {
                alt200=4;
                }
                break;
            case 54:
                {
                alt200=5;
                }
                break;
            case 58:
                {
                alt200=6;
                }
                break;
            case 59:
                {
                alt200=7;
                }
                break;
            case 50:
                {
                alt200=8;
                }
                break;
            case 51:
                {
                alt200=9;
                }
                break;
            case 56:
                {
                alt200=10;
                }
                break;
            case 62:
                {
                alt200=11;
                }
                break;
            case 57:
                {
                alt200=12;
                }
                break;
            case 61:
                {
                alt200=13;
                }
                break;
            case 60:
                {
                alt200=14;
                }
                break;
            case 55:
                {
                alt200=15;
                }
                break;
            case 52:
                {
                alt200=16;
                }
                break;
            case 53:
                {
                alt200=17;
                }
                break;
            case 169:
                {
                alt200=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll3235_static.FOLLOW_in_in_inAll3235);
                    in661=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in661.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll3237_static.FOLLOW_inafter_in_inAll3237);
                    inafter662=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter662.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll3239_static.FOLLOW_inas_in_inAll3239);
                    inas663=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas663.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll3241_static.FOLLOW_inbefore_in_inAll3241);
                    inbefore664=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore664.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll3243_static.FOLLOW_inby_in_inAll3243);
                    inby665=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby665.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll3245_static.FOLLOW_infor_in_inAll3245);
                    infor666=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor666.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll3247_static.FOLLOW_infrom_in_inAll3247);
                    infrom667=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom667.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll3249_static.FOLLOW_inin_in_inAll3249);
                    inin668=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin668.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll3251_static.FOLLOW_ininto_in_inAll3251);
                    ininto669=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto669.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll3253_static.FOLLOW_inof_in_inAll3253);
                    inof670=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof670.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll3255_static.FOLLOW_inoff_in_inAll3255);
                    inoff671=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff671.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll3257_static.FOLLOW_inon_in_inAll3257);
                    inon672=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon672.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll3259_static.FOLLOW_inover_in_inAll3259);
                    inover673=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover673.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll3261_static.FOLLOW_inunder_in_inAll3261);
                    inunder674=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder674.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll3263_static.FOLLOW_invia_in_inAll3263);
                    invia675=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia675.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3265_static.FOLLOW_inwith_in_inAll3265);
                    inwith676=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith676.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3267_static.FOLLOW_inwithout_in_inAll3267);
                    inwithout677=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout677.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3269_static.FOLLOW_to_in_inAll3269);
                    to678=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to678.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in679 = null;

        ChemicalChunkerParser.inas_return inas680 = null;

        ChemicalChunkerParser.inbefore_return inbefore681 = null;

        ChemicalChunkerParser.inby_return inby682 = null;

        ChemicalChunkerParser.infor_return infor683 = null;

        ChemicalChunkerParser.infrom_return infrom684 = null;

        ChemicalChunkerParser.inin_return inin685 = null;

        ChemicalChunkerParser.ininto_return ininto686 = null;

        ChemicalChunkerParser.inof_return inof687 = null;

        ChemicalChunkerParser.inoff_return inoff688 = null;

        ChemicalChunkerParser.inon_return inon689 = null;

        ChemicalChunkerParser.inover_return inover690 = null;

        ChemicalChunkerParser.inunder_return inunder691 = null;

        ChemicalChunkerParser.invia_return invia692 = null;

        ChemicalChunkerParser.inwith_return inwith693 = null;

        ChemicalChunkerParser.inwithout_return inwithout694 = null;

        ChemicalChunkerParser.to_return to695 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt201=17;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt201=1;
                }
                break;
            case 47:
                {
                alt201=2;
                }
                break;
            case 48:
                {
                alt201=3;
                }
                break;
            case 54:
                {
                alt201=4;
                }
                break;
            case 58:
                {
                alt201=5;
                }
                break;
            case 59:
                {
                alt201=6;
                }
                break;
            case 50:
                {
                alt201=7;
                }
                break;
            case 51:
                {
                alt201=8;
                }
                break;
            case 56:
                {
                alt201=9;
                }
                break;
            case 62:
                {
                alt201=10;
                }
                break;
            case 57:
                {
                alt201=11;
                }
                break;
            case 61:
                {
                alt201=12;
                }
                break;
            case 60:
                {
                alt201=13;
                }
                break;
            case 55:
                {
                alt201=14;
                }
                break;
            case 52:
                {
                alt201=15;
                }
                break;
            case 53:
                {
                alt201=16;
                }
                break;
            case 169:
                {
                alt201=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3276_static.FOLLOW_in_in_inMost3276);
                    in679=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in679.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3278_static.FOLLOW_inas_in_inMost3278);
                    inas680=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas680.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3280_static.FOLLOW_inbefore_in_inMost3280);
                    inbefore681=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore681.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3282_static.FOLLOW_inby_in_inMost3282);
                    inby682=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby682.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3284_static.FOLLOW_infor_in_inMost3284);
                    infor683=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor683.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3286_static.FOLLOW_infrom_in_inMost3286);
                    infrom684=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom684.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3288_static.FOLLOW_inin_in_inMost3288);
                    inin685=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin685.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3290_static.FOLLOW_ininto_in_inMost3290);
                    ininto686=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto686.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3292_static.FOLLOW_inof_in_inMost3292);
                    inof687=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof687.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3294_static.FOLLOW_inoff_in_inMost3294);
                    inoff688=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff688.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3296_static.FOLLOW_inon_in_inMost3296);
                    inon689=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon689.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3298_static.FOLLOW_inover_in_inMost3298);
                    inover690=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover690.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3300_static.FOLLOW_inunder_in_inMost3300);
                    inunder691=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder691.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3302_static.FOLLOW_invia_in_inMost3302);
                    invia692=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia692.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3304_static.FOLLOW_inwith_in_inMost3304);
                    inwith693=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith693.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3306_static.FOLLOW_inwithout_in_inMost3306);
                    inwithout694=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout694.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3308_static.FOLLOW_to_in_inMost3308);
                    to695=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to695.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd696 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum697 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:9: ( cd | cdAlphanum )
            int alt202=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt202=1;
                }
                break;
            case 38:
                {
                alt202=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }

            switch (alt202) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3315_static.FOLLOW_cd_in_numeric3315);
                    cd696=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd696.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3317_static.FOLLOW_cdAlphanum_in_numeric3317);
                    cdAlphanum697=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum697.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal698=(Token)match(input,38,FOLLOW_38_in_cdAlphanum3325_static.FOLLOW_38_in_cdAlphanum3325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal698);

            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3327_static.FOLLOW_TOKEN_in_cdAlphanum3327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN699);



            // AST REWRITE
            // elements: TOKEN, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:9: 'OSCAR-CJ' TOKEN
            {
            string_literal700=(Token)match(input,39,FOLLOW_39_in_oscarcj3340_static.FOLLOW_39_in_oscarcj3340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal700);

            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3342_static.FOLLOW_TOKEN_in_oscarcj3342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN701);



            // AST REWRITE
            // elements: TOKEN, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:9: 'OSCAR-RN' TOKEN
            {
            string_literal702=(Token)match(input,40,FOLLOW_40_in_oscarrn3355_static.FOLLOW_40_in_oscarrn3355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal702);

            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3357_static.FOLLOW_TOKEN_in_oscarrn3357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN703);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:10: 'OSCAR-ASE' TOKEN
            {
            string_literal704=(Token)match(input,41,FOLLOW_41_in_oscarase3370_static.FOLLOW_41_in_oscarase3370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal704);

            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3372_static.FOLLOW_TOKEN_in_oscarase3372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN705);



            // AST REWRITE
            // elements: TOKEN, 41
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:10: 'OSCAR-ONT' TOKEN
            {
            string_literal706=(Token)match(input,42,FOLLOW_42_in_oscaront3385_static.FOLLOW_42_in_oscaront3385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal706);

            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3387_static.FOLLOW_TOKEN_in_oscaront3387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN707);



            // AST REWRITE
            // elements: TOKEN, 42
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:11: 'TM-UNICODE' TOKEN
            {
            string_literal708=(Token)match(input,43,FOLLOW_43_in_tmunicode3400_static.FOLLOW_43_in_tmunicode3400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal708);

            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3402_static.FOLLOW_TOKEN_in_tmunicode3402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN709);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:11: 'CD-UNICODE' TOKEN
            {
            string_literal710=(Token)match(input,44,FOLLOW_44_in_cdunicode3415_static.FOLLOW_44_in_cdunicode3415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal710);

            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3417_static.FOLLOW_TOKEN_in_cdunicode3417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN711);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:8: 'JJ-CHEM' TOKEN
            {
            string_literal712=(Token)match(input,45,FOLLOW_45_in_jjchem3430_static.FOLLOW_45_in_jjchem3430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal712);

            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3432_static.FOLLOW_TOKEN_in_jjchem3432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN713);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal714=(Token)match(input,46,FOLLOW_46_in_jjcomp3445_static.FOLLOW_46_in_jjcomp3445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal714);

            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3447_static.FOLLOW_TOKEN_in_jjcomp3447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN715);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:6: 'IN-AS' TOKEN
            {
            string_literal716=(Token)match(input,47,FOLLOW_47_in_inas3461_static.FOLLOW_47_in_inas3461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal716);

            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3463_static.FOLLOW_TOKEN_in_inas3463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN717);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:10: 'IN-BEFORE' TOKEN
            {
            string_literal718=(Token)match(input,48,FOLLOW_48_in_inbefore3476_static.FOLLOW_48_in_inbefore3476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal718);

            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3478_static.FOLLOW_TOKEN_in_inbefore3478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN719);



            // AST REWRITE
            // elements: 48, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:9: 'IN-AFTER' TOKEN
            {
            string_literal720=(Token)match(input,49,FOLLOW_49_in_inafter3491_static.FOLLOW_49_in_inafter3491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal720);

            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3493_static.FOLLOW_TOKEN_in_inafter3493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN721);



            // AST REWRITE
            // elements: TOKEN, 49
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:6: 'IN-IN' TOKEN
            {
            string_literal722=(Token)match(input,50,FOLLOW_50_in_inin3506_static.FOLLOW_50_in_inin3506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal722);

            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3508_static.FOLLOW_TOKEN_in_inin3508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN723);



            // AST REWRITE
            // elements: 50, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:8: 'IN-INTO' TOKEN
            {
            string_literal724=(Token)match(input,51,FOLLOW_51_in_ininto3521_static.FOLLOW_51_in_ininto3521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal724);

            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3523_static.FOLLOW_TOKEN_in_ininto3523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN725);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:8: 'IN-WITH' TOKEN
            {
            string_literal726=(Token)match(input,52,FOLLOW_52_in_inwith3536_static.FOLLOW_52_in_inwith3536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal726);

            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3538_static.FOLLOW_TOKEN_in_inwith3538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN727);



            // AST REWRITE
            // elements: 52, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:11: 'IN-WITHOUT' TOKEN
            {
            string_literal728=(Token)match(input,53,FOLLOW_53_in_inwithout3551_static.FOLLOW_53_in_inwithout3551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal728);

            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3553_static.FOLLOW_TOKEN_in_inwithout3553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN729);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:6: 'IN-BY' TOKEN
            {
            string_literal730=(Token)match(input,54,FOLLOW_54_in_inby3566_static.FOLLOW_54_in_inby3566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal730);

            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3568_static.FOLLOW_TOKEN_in_inby3568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN731);



            // AST REWRITE
            // elements: TOKEN, 54
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:7: 'IN-VIA' TOKEN
            {
            string_literal732=(Token)match(input,55,FOLLOW_55_in_invia3581_static.FOLLOW_55_in_invia3581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal732);

            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3583_static.FOLLOW_TOKEN_in_invia3583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN733);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:6: 'IN-OF' TOKEN
            {
            string_literal734=(Token)match(input,56,FOLLOW_56_in_inof3596_static.FOLLOW_56_in_inof3596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal734);

            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3598_static.FOLLOW_TOKEN_in_inof3598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN735);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:6: 'IN-ON' TOKEN
            {
            string_literal736=(Token)match(input,57,FOLLOW_57_in_inon3611_static.FOLLOW_57_in_inon3611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal736);

            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3613_static.FOLLOW_TOKEN_in_inon3613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN737);



            // AST REWRITE
            // elements: TOKEN, 57
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:7: 'IN-FOR' TOKEN
            {
            string_literal738=(Token)match(input,58,FOLLOW_58_in_infor3626_static.FOLLOW_58_in_infor3626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal738);

            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3628_static.FOLLOW_TOKEN_in_infor3628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN739);



            // AST REWRITE
            // elements: 58, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:8: 'IN-FROM' TOKEN
            {
            string_literal740=(Token)match(input,59,FOLLOW_59_in_infrom3641_static.FOLLOW_59_in_infrom3641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal740);

            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3643_static.FOLLOW_TOKEN_in_infrom3643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN741);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:9: 'IN-UNDER' TOKEN
            {
            string_literal742=(Token)match(input,60,FOLLOW_60_in_inunder3656_static.FOLLOW_60_in_inunder3656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal742);

            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3658_static.FOLLOW_TOKEN_in_inunder3658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN743);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:8: 'IN-OVER' TOKEN
            {
            string_literal744=(Token)match(input,61,FOLLOW_61_in_inover3671_static.FOLLOW_61_in_inover3671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal744);

            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3673_static.FOLLOW_TOKEN_in_inover3673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN745);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:7: 'IN-OFF' TOKEN
            {
            string_literal746=(Token)match(input,62,FOLLOW_62_in_inoff3686_static.FOLLOW_62_in_inoff3686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal746);

            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3688_static.FOLLOW_TOKEN_in_inoff3688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN747);



            // AST REWRITE
            // elements: 62, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:9: 'NN-STATE' TOKEN
            {
            string_literal748=(Token)match(input,63,FOLLOW_63_in_nnstate3703_static.FOLLOW_63_in_nnstate3703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal748);

            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3705_static.FOLLOW_TOKEN_in_nnstate3705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN749);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:8: 'NN-TIME' TOKEN
            {
            string_literal750=(Token)match(input,64,FOLLOW_64_in_nntime3718_static.FOLLOW_64_in_nntime3718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal750);

            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3720_static.FOLLOW_TOKEN_in_nntime3720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN751);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:8: 'NN-MASS' TOKEN
            {
            string_literal752=(Token)match(input,65,FOLLOW_65_in_nnmass3733_static.FOLLOW_65_in_nnmass3733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal752);

            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3735_static.FOLLOW_TOKEN_in_nnmass3735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN753);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:10: 'NN-AMOUNT' TOKEN
            {
            string_literal754=(Token)match(input,66,FOLLOW_66_in_nnamount3748_static.FOLLOW_66_in_nnamount3748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal754);

            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3750_static.FOLLOW_TOKEN_in_nnamount3750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN755);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:9: 'NN-MOLAR' TOKEN
            {
            string_literal756=(Token)match(input,67,FOLLOW_67_in_nnmolar3763_static.FOLLOW_67_in_nnmolar3763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal756);

            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3765_static.FOLLOW_TOKEN_in_nnmolar3765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN757);



            // AST REWRITE
            // elements: 67, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal758=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3778_static.FOLLOW_68_in_nnatmosphere3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal758);

            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3780_static.FOLLOW_TOKEN_in_nnatmosphere3780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN759);



            // AST REWRITE
            // elements: 68, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:6: 'NN-EQ' TOKEN
            {
            string_literal760=(Token)match(input,69,FOLLOW_69_in_nneq3793_static.FOLLOW_69_in_nneq3793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal760);

            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3795_static.FOLLOW_TOKEN_in_nneq3795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN761);



            // AST REWRITE
            // elements: TOKEN, 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:7: 'NN-VOL' TOKEN
            {
            string_literal762=(Token)match(input,70,FOLLOW_70_in_nnvol3808_static.FOLLOW_70_in_nnvol3808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal762);

            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3810_static.FOLLOW_TOKEN_in_nnvol3810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN763);



            // AST REWRITE
            // elements: 70, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal764=(Token)match(input,71,FOLLOW_71_in_nnchementity3823_static.FOLLOW_71_in_nnchementity3823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal764);

            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3825_static.FOLLOW_TOKEN_in_nnchementity3825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN765);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:8: 'NN-TEMP' TOKEN
            {
            string_literal766=(Token)match(input,72,FOLLOW_72_in_nntemp3838_static.FOLLOW_72_in_nntemp3838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal766);

            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3840_static.FOLLOW_TOKEN_in_nntemp3840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN767);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:6: 'NN-PH' TOKEN
            {
            string_literal768=(Token)match(input,73,FOLLOW_73_in_nnph3853_static.FOLLOW_73_in_nnph3853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal768);

            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3855_static.FOLLOW_TOKEN_in_nnph3855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN769);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:9: 'NN-FLASH' TOKEN
            {
            string_literal770=(Token)match(input,74,FOLLOW_74_in_nnflash3868_static.FOLLOW_74_in_nnflash3868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal770);

            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3870_static.FOLLOW_TOKEN_in_nnflash3870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN771);



            // AST REWRITE
            // elements: TOKEN, 74
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:11: 'NN-GENERAL' TOKEN
            {
            string_literal772=(Token)match(input,75,FOLLOW_75_in_nngeneral3883_static.FOLLOW_75_in_nngeneral3883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal772);

            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3885_static.FOLLOW_TOKEN_in_nngeneral3885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN773);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:10: 'NN-METHOD' TOKEN
            {
            string_literal774=(Token)match(input,76,FOLLOW_76_in_nnmethod3898_static.FOLLOW_76_in_nnmethod3898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal774);

            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3900_static.FOLLOW_TOKEN_in_nnmethod3900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN775);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:12: 'NN-PRESSURE' TOKEN
            {
            string_literal776=(Token)match(input,77,FOLLOW_77_in_nnpressure3913_static.FOLLOW_77_in_nnpressure3913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal776);

            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3915_static.FOLLOW_TOKEN_in_nnpressure3915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN777);



            // AST REWRITE
            // elements: TOKEN, 77
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:10: 'NN-COLUMN' TOKEN
            {
            string_literal778=(Token)match(input,78,FOLLOW_78_in_nncolumn3928_static.FOLLOW_78_in_nncolumn3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal778);

            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3930_static.FOLLOW_TOKEN_in_nncolumn3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN779);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal780=(Token)match(input,79,FOLLOW_79_in_nnchromatography3943_static.FOLLOW_79_in_nnchromatography3943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal780);

            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3945_static.FOLLOW_TOKEN_in_nnchromatography3945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN781);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:10: 'NN-VACUUM' TOKEN
            {
            string_literal782=(Token)match(input,80,FOLLOW_80_in_nnvacuum3958_static.FOLLOW_80_in_nnvacuum3958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal782);

            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3960_static.FOLLOW_TOKEN_in_nnvacuum3960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN783);



            // AST REWRITE
            // elements: TOKEN, 80
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:9: 'NN-CYCLE' TOKEN
            {
            string_literal784=(Token)match(input,81,FOLLOW_81_in_nncycle3973_static.FOLLOW_81_in_nncycle3973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal784);

            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3975_static.FOLLOW_TOKEN_in_nncycle3975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN785);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 403:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:9: 'NN-TIMES' TOKEN
            {
            string_literal786=(Token)match(input,82,FOLLOW_82_in_nntimes3988_static.FOLLOW_82_in_nntimes3988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal786);

            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3990_static.FOLLOW_TOKEN_in_nntimes3990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN787);



            // AST REWRITE
            // elements: 82, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 404:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal788=(Token)match(input,83,FOLLOW_83_in_nnexample4003_static.FOLLOW_83_in_nnexample4003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal788);

            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample4005_static.FOLLOW_TOKEN_in_nnexample4005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN789);



            // AST REWRITE
            // elements: 83, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:9: 'OSCAR-CM' TOKEN
            {
            string_literal790=(Token)match(input,84,FOLLOW_84_in_oscarcm4020_static.FOLLOW_84_in_oscarcm4020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal790);

            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm4022_static.FOLLOW_TOKEN_in_oscarcm4022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN791);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:7: 'VB-USE' TOKEN
            {
            string_literal792=(Token)match(input,85,FOLLOW_85_in_vbuse4037_static.FOLLOW_85_in_vbuse4037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal792);

            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse4039_static.FOLLOW_TOKEN_in_vbuse4039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN793);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:10: 'VB-CHANGE' TOKEN
            {
            string_literal794=(Token)match(input,86,FOLLOW_86_in_vbchange4052_static.FOLLOW_86_in_vbchange4052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal794);

            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange4054_static.FOLLOW_TOKEN_in_vbchange4054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN795);



            // AST REWRITE
            // elements: TOKEN, 86
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal796=(Token)match(input,87,FOLLOW_87_in_vbsubmerge4067_static.FOLLOW_87_in_vbsubmerge4067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal796);

            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge4069_static.FOLLOW_TOKEN_in_vbsubmerge4069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN797);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:11: 'VB-SUBJECT' TOKEN
            {
            string_literal798=(Token)match(input,88,FOLLOW_88_in_vbsubject4082_static.FOLLOW_88_in_vbsubject4082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal798);

            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject4084_static.FOLLOW_TOKEN_in_vbsubject4084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN799);



            // AST REWRITE
            // elements: 88, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:7: 'NN-ADD' TOKEN
            {
            string_literal800=(Token)match(input,89,FOLLOW_89_in_nnadd4099_static.FOLLOW_89_in_nnadd4099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal800);

            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd4101_static.FOLLOW_TOKEN_in_nnadd4101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN801);



            // AST REWRITE
            // elements: 89, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:11: 'NN-MIXTURE' TOKEN
            {
            string_literal802=(Token)match(input,90,FOLLOW_90_in_nnmixture4114_static.FOLLOW_90_in_nnmixture4114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal802);

            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture4116_static.FOLLOW_TOKEN_in_nnmixture4116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN803);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:10: 'VB-DILUTE' TOKEN
            {
            string_literal804=(Token)match(input,91,FOLLOW_91_in_vbdilute4129_static.FOLLOW_91_in_vbdilute4129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal804);

            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute4131_static.FOLLOW_TOKEN_in_vbdilute4131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN805);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 419:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:7: 'VB-ADD' TOKEN
            {
            string_literal806=(Token)match(input,92,FOLLOW_92_in_vbadd4144_static.FOLLOW_92_in_vbadd4144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal806);

            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd4146_static.FOLLOW_TOKEN_in_vbadd4146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN807);



            // AST REWRITE
            // elements: 92, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:10: 'VB-CHARGE' TOKEN
            {
            string_literal808=(Token)match(input,93,FOLLOW_93_in_vbcharge4159_static.FOLLOW_93_in_vbcharge4159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal808);

            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge4161_static.FOLLOW_TOKEN_in_vbcharge4161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN809);



            // AST REWRITE
            // elements: TOKEN, 93
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:11: 'VB-CONTAIN' TOKEN
            {
            string_literal810=(Token)match(input,94,FOLLOW_94_in_vbcontain4174_static.FOLLOW_94_in_vbcontain4174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal810);

            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain4176_static.FOLLOW_TOKEN_in_vbcontain4176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN811);



            // AST REWRITE
            // elements: TOKEN, 94
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:8: 'VB-DROP' TOKEN
            {
            string_literal812=(Token)match(input,95,FOLLOW_95_in_vbdrop4189_static.FOLLOW_95_in_vbdrop4189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal812);

            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop4191_static.FOLLOW_TOKEN_in_vbdrop4191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN813);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:8: 'VB-FILL' TOKEN
            {
            string_literal814=(Token)match(input,96,FOLLOW_96_in_vbfill4204_static.FOLLOW_96_in_vbfill4204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal814);

            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill4206_static.FOLLOW_TOKEN_in_vbfill4206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN815);



            // AST REWRITE
            // elements: TOKEN, 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:11: 'VB-SUSPEND' TOKEN
            {
            string_literal816=(Token)match(input,97,FOLLOW_97_in_vbsuspend4219_static.FOLLOW_97_in_vbsuspend4219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal816);

            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend4221_static.FOLLOW_TOKEN_in_vbsuspend4221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN817);



            // AST REWRITE
            // elements: 97, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:9: 'VB-TREAT' TOKEN
            {
            string_literal818=(Token)match(input,98,FOLLOW_98_in_vbtreat4234_static.FOLLOW_98_in_vbtreat4234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal818);

            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat4236_static.FOLLOW_TOKEN_in_vbtreat4236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN819);



            // AST REWRITE
            // elements: TOKEN, 98
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:13: 'VB-APPARATUS' TOKEN
            {
            string_literal820=(Token)match(input,99,FOLLOW_99_in_vbapparatus4251_static.FOLLOW_99_in_vbapparatus4251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal820);

            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4253_static.FOLLOW_TOKEN_in_vbapparatus4253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN821);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:13: 'NN-APPARATUS' TOKEN
            {
            string_literal822=(Token)match(input,100,FOLLOW_100_in_nnapparatus4266_static.FOLLOW_100_in_nnapparatus4266); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal822);

            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4268_static.FOLLOW_TOKEN_in_nnapparatus4268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN823);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal824=(Token)match(input,101,FOLLOW_101_in_vbconcentrate4283_static.FOLLOW_101_in_vbconcentrate4283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal824);

            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4285_static.FOLLOW_TOKEN_in_vbconcentrate4285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN825);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal826=(Token)match(input,102,FOLLOW_102_in_nnconcentrate4298_static.FOLLOW_102_in_nnconcentrate4298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal826);

            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4300_static.FOLLOW_TOKEN_in_nnconcentrate4300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN827);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:8: 'VB-COOL' TOKEN
            {
            string_literal828=(Token)match(input,103,FOLLOW_103_in_vbcool4315_static.FOLLOW_103_in_vbcool4315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal828);

            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4317_static.FOLLOW_TOKEN_in_vbcool4317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN829);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:10: 'VB-DEGASS' TOKEN
            {
            string_literal830=(Token)match(input,104,FOLLOW_104_in_vbdegass4332_static.FOLLOW_104_in_vbdegass4332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal830);

            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4334_static.FOLLOW_TOKEN_in_vbdegass4334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN831);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal832=(Token)match(input,105,FOLLOW_105_in_vbdissolve4349_static.FOLLOW_105_in_vbdissolve4349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal832);

            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4351_static.FOLLOW_TOKEN_in_vbdissolve4351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN833);



            // AST REWRITE
            // elements: 105, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:7: 'VB-DRY' TOKEN
            {
            string_literal834=(Token)match(input,106,FOLLOW_106_in_vbdry4366_static.FOLLOW_106_in_vbdry4366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal834);

            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4368_static.FOLLOW_TOKEN_in_vbdry4368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN835);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:7: 'NN-DRY' TOKEN
            {
            string_literal836=(Token)match(input,107,FOLLOW_107_in_nndry4381_static.FOLLOW_107_in_nndry4381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal836);

            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4383_static.FOLLOW_TOKEN_in_nndry4383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN837);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:11: 'VB-EXTRACT' TOKEN
            {
            string_literal838=(Token)match(input,108,FOLLOW_108_in_vbextract4398_static.FOLLOW_108_in_vbextract4398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal838);

            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4400_static.FOLLOW_TOKEN_in_vbextract4400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN839);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:11: 'NN-EXTRACT' TOKEN
            {
            string_literal840=(Token)match(input,109,FOLLOW_109_in_nnextract4413_static.FOLLOW_109_in_nnextract4413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal840);

            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4415_static.FOLLOW_TOKEN_in_nnextract4415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN841);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:10: 'VB-FILTER' TOKEN
            {
            string_literal842=(Token)match(input,110,FOLLOW_110_in_vbfilter4430_static.FOLLOW_110_in_vbfilter4430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal842);

            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4432_static.FOLLOW_TOKEN_in_vbfilter4432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN843);



            // AST REWRITE
            // elements: 110, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:10: 'NN-FILTER' TOKEN
            {
            string_literal844=(Token)match(input,111,FOLLOW_111_in_nnfilter4445_static.FOLLOW_111_in_nnfilter4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal844);

            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4447_static.FOLLOW_TOKEN_in_nnfilter4447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN845);



            // AST REWRITE
            // elements: 111, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:8: 'VB-HEAT' TOKEN
            {
            string_literal846=(Token)match(input,112,FOLLOW_112_in_vbheat4462_static.FOLLOW_112_in_vbheat4462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal846);

            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4464_static.FOLLOW_TOKEN_in_vbheat4464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN847);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:12: 'VB-INCREASE' TOKEN
            {
            string_literal848=(Token)match(input,113,FOLLOW_113_in_vbincrease4477_static.FOLLOW_113_in_vbincrease4477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal848);

            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4479_static.FOLLOW_TOKEN_in_vbincrease4479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN849);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:11: 'VB-IMMERSE' TOKEN
            {
            string_literal850=(Token)match(input,114,FOLLOW_114_in_vbimmerse4494_static.FOLLOW_114_in_vbimmerse4494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal850);

            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4496_static.FOLLOW_TOKEN_in_vbimmerse4496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN851);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:13: 'VB-PARTITION' TOKEN
            {
            string_literal852=(Token)match(input,115,FOLLOW_115_in_vbpartition4511_static.FOLLOW_115_in_vbpartition4511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal852);

            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4513_static.FOLLOW_TOKEN_in_vbpartition4513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN853);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal854=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4528_static.FOLLOW_116_in_vbprecipitate4528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal854);

            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4530_static.FOLLOW_TOKEN_in_vbprecipitate4530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN855);



            // AST REWRITE
            // elements: 116, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal856=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4543_static.FOLLOW_117_in_nnprecipitate4543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal856);

            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4545_static.FOLLOW_TOKEN_in_nnprecipitate4545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN857);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:10: 'VB-PURIFY' TOKEN
            {
            string_literal858=(Token)match(input,118,FOLLOW_118_in_vbpurify4560_static.FOLLOW_118_in_vbpurify4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal858);

            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4562_static.FOLLOW_TOKEN_in_vbpurify4562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN859);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:10: 'NN-PURIFY' TOKEN
            {
            string_literal860=(Token)match(input,119,FOLLOW_119_in_nnpurify4575_static.FOLLOW_119_in_nnpurify4575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal860);

            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4577_static.FOLLOW_TOKEN_in_nnpurify4577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN861);



            // AST REWRITE
            // elements: TOKEN, 119
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:10: 'VB-QUENCH' TOKEN
            {
            string_literal862=(Token)match(input,120,FOLLOW_120_in_vbquench4592_static.FOLLOW_120_in_vbquench4592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal862);

            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4594_static.FOLLOW_TOKEN_in_vbquench4594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN863);



            // AST REWRITE
            // elements: TOKEN, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:11: 'VB-RECOVER' TOKEN
            {
            string_literal864=(Token)match(input,121,FOLLOW_121_in_vbrecover4609_static.FOLLOW_121_in_vbrecover4609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal864);

            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4611_static.FOLLOW_TOKEN_in_vbrecover4611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN865);



            // AST REWRITE
            // elements: 121, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:10: 'VB-REMOVE' TOKEN
            {
            string_literal866=(Token)match(input,122,FOLLOW_122_in_vbremove4626_static.FOLLOW_122_in_vbremove4626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal866);

            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4628_static.FOLLOW_TOKEN_in_vbremove4628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN867);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:10: 'NN-REMOVE' TOKEN
            {
            string_literal868=(Token)match(input,123,FOLLOW_123_in_nnremove4641_static.FOLLOW_123_in_nnremove4641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal868);

            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4643_static.FOLLOW_TOKEN_in_nnremove4643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN869);



            // AST REWRITE
            // elements: TOKEN, 123
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:8: 'VB-STIR' TOKEN
            {
            string_literal870=(Token)match(input,124,FOLLOW_124_in_vbstir4658_static.FOLLOW_124_in_vbstir4658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal870);

            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4660_static.FOLLOW_TOKEN_in_vbstir4660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN871);



            // AST REWRITE
            // elements: 124, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal872=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4675_static.FOLLOW_125_in_vbsynthesize4675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal872);

            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4677_static.FOLLOW_TOKEN_in_vbsynthesize4677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN873);



            // AST REWRITE
            // elements: TOKEN, 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal874=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4690_static.FOLLOW_126_in_nnsynthesize4690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal874);

            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4692_static.FOLLOW_TOKEN_in_nnsynthesize4692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN875);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:8: 'VB-WAIT' TOKEN
            {
            string_literal876=(Token)match(input,127,FOLLOW_127_in_vbwait4707_static.FOLLOW_127_in_vbwait4707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal876);

            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4709_static.FOLLOW_TOKEN_in_vbwait4709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN877);



            // AST REWRITE
            // elements: 127, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:8: 'VB-WASH' TOKEN
            {
            string_literal878=(Token)match(input,128,FOLLOW_128_in_vbwash4724_static.FOLLOW_128_in_vbwash4724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal878);

            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4726_static.FOLLOW_TOKEN_in_vbwash4726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN879);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:9: 'VB-YIELD' TOKEN
            {
            string_literal880=(Token)match(input,129,FOLLOW_129_in_vbyield4741_static.FOLLOW_129_in_vbyield4741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal880);

            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4743_static.FOLLOW_TOKEN_in_vbyield4743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN881);



            // AST REWRITE
            // elements: 129, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:9: 'NN-YIELD' TOKEN
            {
            string_literal882=(Token)match(input,130,FOLLOW_130_in_nnyield4758_static.FOLLOW_130_in_nnyield4758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal882);

            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4760_static.FOLLOW_TOKEN_in_nnyield4760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN883);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:8: 'RB-CONJ' TOKEN
            {
            string_literal884=(Token)match(input,131,FOLLOW_131_in_rbconj4776_static.FOLLOW_131_in_rbconj4776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal884);

            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4778_static.FOLLOW_TOKEN_in_rbconj4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN885);



            // AST REWRITE
            // elements: 131, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 506:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:7: 'COLON' TOKEN
            {
            string_literal886=(Token)match(input,132,FOLLOW_132_in_colon4791_static.FOLLOW_132_in_colon4791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal886);

            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4793_static.FOLLOW_TOKEN_in_colon4793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN887);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 507:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:7: 'COMMA' TOKEN
            {
            string_literal888=(Token)match(input,133,FOLLOW_133_in_comma4806_static.FOLLOW_133_in_comma4806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal888);

            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4808_static.FOLLOW_TOKEN_in_comma4808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN889);



            // AST REWRITE
            // elements: 133, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:7: 'APOST' TOKEN
            {
            string_literal890=(Token)match(input,134,FOLLOW_134_in_apost4821_static.FOLLOW_134_in_apost4821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal890);

            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4823_static.FOLLOW_TOKEN_in_apost4823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN891);



            // AST REWRITE
            // elements: 134, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:5: 'NEG' TOKEN
            {
            string_literal892=(Token)match(input,135,FOLLOW_135_in_neg4836_static.FOLLOW_135_in_neg4836); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal892);

            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4838_static.FOLLOW_TOKEN_in_neg4838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN893);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:6: 'DASH' TOKEN
            {
            string_literal894=(Token)match(input,136,FOLLOW_136_in_dash4851_static.FOLLOW_136_in_dash4851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal894);

            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4853_static.FOLLOW_TOKEN_in_dash4853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN895);



            // AST REWRITE
            // elements: 136, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:6: 'STOP' TOKEN
            {
            string_literal896=(Token)match(input,137,FOLLOW_137_in_stop4866_static.FOLLOW_137_in_stop4866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal896);

            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4868_static.FOLLOW_TOKEN_in_stop4868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN897);



            // AST REWRITE
            // elements: TOKEN, 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:11: 'NN-PERCENT' TOKEN
            {
            string_literal898=(Token)match(input,138,FOLLOW_138_in_nnpercent4881_static.FOLLOW_138_in_nnpercent4881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal898);

            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4883_static.FOLLOW_TOKEN_in_nnpercent4883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN899);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 513:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:6: 'LSQB' TOKEN
            {
            string_literal900=(Token)match(input,139,FOLLOW_139_in_lsqb4896_static.FOLLOW_139_in_lsqb4896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal900);

            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4898_static.FOLLOW_TOKEN_in_lsqb4898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN901);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:6: 'RSQB' TOKEN
            {
            string_literal902=(Token)match(input,140,FOLLOW_140_in_rsqb4911_static.FOLLOW_140_in_rsqb4911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal902);

            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4913_static.FOLLOW_TOKEN_in_rsqb4913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN903);



            // AST REWRITE
            // elements: 140, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal904=(Token)match(input,141,FOLLOW_141_in_nnidentifier4927_static.FOLLOW_141_in_nnidentifier4927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal904);

            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier4929_static.FOLLOW_TOKEN_in_nnidentifier4929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN905);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:7: 'DT-THE' TOKEN
            {
            string_literal906=(Token)match(input,142,FOLLOW_142_in_dtTHE4944_static.FOLLOW_142_in_dtTHE4944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal906);

            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4946_static.FOLLOW_TOKEN_in_dtTHE4946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN907);



            // AST REWRITE
            // elements: TOKEN, 142
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:5: '-LRB-' TOKEN
            {
            string_literal908=(Token)match(input,143,FOLLOW_143_in_lrb4960_static.FOLLOW_143_in_lrb4960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal908);

            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4962_static.FOLLOW_TOKEN_in_lrb4962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN909);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 522:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:5: '-RRB-' TOKEN
            {
            string_literal910=(Token)match(input,144,FOLLOW_144_in_rrb4975_static.FOLLOW_144_in_rrb4975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal910);

            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4977_static.FOLLOW_TOKEN_in_rrb4977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN911);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:4: 'CC' TOKEN
            {
            string_literal912=(Token)match(input,145,FOLLOW_145_in_cc4994_static.FOLLOW_145_in_cc4994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal912);

            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4996_static.FOLLOW_TOKEN_in_cc4996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN913);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:4: 'CD' TOKEN
            {
            string_literal914=(Token)match(input,146,FOLLOW_146_in_cd5011_static.FOLLOW_146_in_cd5011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal914);

            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd5013_static.FOLLOW_TOKEN_in_cd5013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN915);



            // AST REWRITE
            // elements: 146, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 531:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:4: 'DT' TOKEN
            {
            string_literal916=(Token)match(input,147,FOLLOW_147_in_dt5028_static.FOLLOW_147_in_dt5028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal916);

            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt5030_static.FOLLOW_TOKEN_in_dt5030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN917);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:4: 'EX' TOKEN
            {
            string_literal918=(Token)match(input,148,FOLLOW_148_in_ex5045_static.FOLLOW_148_in_ex5045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal918);

            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5047_static.FOLLOW_TOKEN_in_ex5047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN919);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:4: 'FW' TOKEN
            {
            string_literal920=(Token)match(input,149,FOLLOW_149_in_fw5062_static.FOLLOW_149_in_fw5062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal920);

            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5064_static.FOLLOW_TOKEN_in_fw5064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN921);



            // AST REWRITE
            // elements: TOKEN, 149
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:4: 'IN' TOKEN
            {
            string_literal922=(Token)match(input,150,FOLLOW_150_in_in5079_static.FOLLOW_150_in_in5079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal922);

            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5081_static.FOLLOW_TOKEN_in_in5081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN923);



            // AST REWRITE
            // elements: TOKEN, 150
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal924=null;
        Token TOKEN925=null;

        Object string_literal924_tree=null;
        Object TOKEN925_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:4: 'JJ' TOKEN
            {
            string_literal924=(Token)match(input,151,FOLLOW_151_in_jj5096_static.FOLLOW_151_in_jj5096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal924);

            TOKEN925=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5098_static.FOLLOW_TOKEN_in_jj5098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN925);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal926=null;
        Token TOKEN927=null;

        Object string_literal926_tree=null;
        Object TOKEN927_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:5: 'JJR' TOKEN
            {
            string_literal926=(Token)match(input,152,FOLLOW_152_in_jjr5113_static.FOLLOW_152_in_jjr5113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal926);

            TOKEN927=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5115_static.FOLLOW_TOKEN_in_jjr5115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN927);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 549:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal928=null;
        Token TOKEN929=null;

        Object string_literal928_tree=null;
        Object TOKEN929_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:5: 'JJS' TOKEN
            {
            string_literal928=(Token)match(input,153,FOLLOW_153_in_jjs5130_static.FOLLOW_153_in_jjs5130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal928);

            TOKEN929=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5132_static.FOLLOW_TOKEN_in_jjs5132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN929);



            // AST REWRITE
            // elements: 153, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal930=null;
        Token TOKEN931=null;

        Object string_literal930_tree=null;
        Object TOKEN931_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:4: 'LS' TOKEN
            {
            string_literal930=(Token)match(input,154,FOLLOW_154_in_ls5147_static.FOLLOW_154_in_ls5147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal930);

            TOKEN931=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls5149_static.FOLLOW_TOKEN_in_ls5149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN931);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal932=null;
        Token TOKEN933=null;

        Object string_literal932_tree=null;
        Object TOKEN933_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:4: 'MD' TOKEN
            {
            string_literal932=(Token)match(input,155,FOLLOW_155_in_md5164_static.FOLLOW_155_in_md5164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal932);

            TOKEN933=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5166_static.FOLLOW_TOKEN_in_md5166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN933);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal934=null;
        Token TOKEN935=null;

        Object string_literal934_tree=null;
        Object TOKEN935_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:4: 'NN' TOKEN
            {
            string_literal934=(Token)match(input,156,FOLLOW_156_in_nn5181_static.FOLLOW_156_in_nn5181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal934);

            TOKEN935=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5183_static.FOLLOW_TOKEN_in_nn5183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN935);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal936=null;
        Token TOKEN937=null;

        Object string_literal936_tree=null;
        Object TOKEN937_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:5: 'NNS' TOKEN
            {
            string_literal936=(Token)match(input,157,FOLLOW_157_in_nns5198_static.FOLLOW_157_in_nns5198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal936);

            TOKEN937=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5200_static.FOLLOW_TOKEN_in_nns5200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN937);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal938=null;
        Token TOKEN939=null;

        Object string_literal938_tree=null;
        Object TOKEN939_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:5: 'NNP' TOKEN
            {
            string_literal938=(Token)match(input,158,FOLLOW_158_in_nnp5215_static.FOLLOW_158_in_nnp5215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal938);

            TOKEN939=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5217_static.FOLLOW_TOKEN_in_nnp5217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN939);



            // AST REWRITE
            // elements: TOKEN, 158
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal940=null;
        Token TOKEN941=null;

        Object string_literal940_tree=null;
        Object TOKEN941_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:6: 'NNPS' TOKEN
            {
            string_literal940=(Token)match(input,159,FOLLOW_159_in_nnps5232_static.FOLLOW_159_in_nnps5232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal940);

            TOKEN941=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps5234_static.FOLLOW_TOKEN_in_nnps5234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN941);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 570:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal942=null;
        Token TOKEN943=null;

        Object string_literal942_tree=null;
        Object TOKEN943_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:5: 'PDT' TOKEN
            {
            string_literal942=(Token)match(input,160,FOLLOW_160_in_pdt5249_static.FOLLOW_160_in_pdt5249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal942);

            TOKEN943=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt5251_static.FOLLOW_TOKEN_in_pdt5251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN943);



            // AST REWRITE
            // elements: 160, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal944=null;
        Token TOKEN945=null;

        Object string_literal944_tree=null;
        Object TOKEN945_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:5: 'POS' TOKEN
            {
            string_literal944=(Token)match(input,161,FOLLOW_161_in_pos5266_static.FOLLOW_161_in_pos5266); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal944);

            TOKEN945=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5268_static.FOLLOW_TOKEN_in_pos5268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN945);



            // AST REWRITE
            // elements: 161, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal946=null;
        Token TOKEN947=null;

        Object string_literal946_tree=null;
        Object TOKEN947_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:5: 'PRP' TOKEN
            {
            string_literal946=(Token)match(input,162,FOLLOW_162_in_prp5283_static.FOLLOW_162_in_prp5283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal946);

            TOKEN947=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5285_static.FOLLOW_TOKEN_in_prp5285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN947);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal948=null;
        Token TOKEN949=null;

        Object string_literal948_tree=null;
        Object TOKEN949_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:10: 'PRP$' TOKEN
            {
            string_literal948=(Token)match(input,163,FOLLOW_163_in_prp_poss5300_static.FOLLOW_163_in_prp_poss5300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal948);

            TOKEN949=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5302_static.FOLLOW_TOKEN_in_prp_poss5302); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN949);



            // AST REWRITE
            // elements: 163, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal950=null;
        Token TOKEN951=null;

        Object string_literal950_tree=null;
        Object TOKEN951_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:4: 'RB' TOKEN
            {
            string_literal950=(Token)match(input,164,FOLLOW_164_in_rb5317_static.FOLLOW_164_in_rb5317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal950);

            TOKEN951=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5319_static.FOLLOW_TOKEN_in_rb5319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN951);



            // AST REWRITE
            // elements: 164, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal952=null;
        Token TOKEN953=null;

        Object string_literal952_tree=null;
        Object TOKEN953_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:5: 'RBR' TOKEN
            {
            string_literal952=(Token)match(input,165,FOLLOW_165_in_rbr5334_static.FOLLOW_165_in_rbr5334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal952);

            TOKEN953=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5336_static.FOLLOW_TOKEN_in_rbr5336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN953);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal954=null;
        Token TOKEN955=null;

        Object string_literal954_tree=null;
        Object TOKEN955_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:5: 'RBS' TOKEN
            {
            string_literal954=(Token)match(input,166,FOLLOW_166_in_rbs5351_static.FOLLOW_166_in_rbs5351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal954);

            TOKEN955=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5353_static.FOLLOW_TOKEN_in_rbs5353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN955);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal956=null;
        Token TOKEN957=null;

        Object string_literal956_tree=null;
        Object TOKEN957_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:4: 'RP' TOKEN
            {
            string_literal956=(Token)match(input,167,FOLLOW_167_in_rp5368_static.FOLLOW_167_in_rp5368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal956);

            TOKEN957=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5370_static.FOLLOW_TOKEN_in_rp5370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN957);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal958=null;
        Token TOKEN959=null;

        Object string_literal958_tree=null;
        Object TOKEN959_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:5: 'SYM' TOKEN
            {
            string_literal958=(Token)match(input,168,FOLLOW_168_in_sym5385_static.FOLLOW_168_in_sym5385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal958);

            TOKEN959=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5387_static.FOLLOW_TOKEN_in_sym5387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN959);



            // AST REWRITE
            // elements: 168, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal960=null;
        Token TOKEN961=null;

        Object string_literal960_tree=null;
        Object TOKEN961_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:4: 'TO' TOKEN
            {
            string_literal960=(Token)match(input,169,FOLLOW_169_in_to5402_static.FOLLOW_169_in_to5402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal960);

            TOKEN961=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5404_static.FOLLOW_TOKEN_in_to5404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN961);



            // AST REWRITE
            // elements: 169, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal962=null;
        Token TOKEN963=null;

        Object string_literal962_tree=null;
        Object TOKEN963_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:4: 'UH' TOKEN
            {
            string_literal962=(Token)match(input,170,FOLLOW_170_in_uh5419_static.FOLLOW_170_in_uh5419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal962);

            TOKEN963=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5421_static.FOLLOW_TOKEN_in_uh5421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN963);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal964=null;
        Token TOKEN965=null;

        Object string_literal964_tree=null;
        Object TOKEN965_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:4: 'VB' TOKEN
            {
            string_literal964=(Token)match(input,171,FOLLOW_171_in_vb5436_static.FOLLOW_171_in_vb5436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal964);

            TOKEN965=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5438_static.FOLLOW_TOKEN_in_vb5438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN965);



            // AST REWRITE
            // elements: 171, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal966=null;
        Token TOKEN967=null;

        Object string_literal966_tree=null;
        Object TOKEN967_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:5: 'VBD' TOKEN
            {
            string_literal966=(Token)match(input,172,FOLLOW_172_in_vbd5453_static.FOLLOW_172_in_vbd5453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal966);

            TOKEN967=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5455_static.FOLLOW_TOKEN_in_vbd5455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN967);



            // AST REWRITE
            // elements: 172, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 609:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal968=null;
        Token TOKEN969=null;

        Object string_literal968_tree=null;
        Object TOKEN969_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:5: 'VBG' TOKEN
            {
            string_literal968=(Token)match(input,173,FOLLOW_173_in_vbg5470_static.FOLLOW_173_in_vbg5470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal968);

            TOKEN969=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5472_static.FOLLOW_TOKEN_in_vbg5472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN969);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal970=null;
        Token TOKEN971=null;

        Object string_literal970_tree=null;
        Object TOKEN971_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:5: 'VBN' TOKEN
            {
            string_literal970=(Token)match(input,174,FOLLOW_174_in_vbn5487_static.FOLLOW_174_in_vbn5487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal970);

            TOKEN971=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5489_static.FOLLOW_TOKEN_in_vbn5489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN971);



            // AST REWRITE
            // elements: TOKEN, 174
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 615:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal972=null;
        Token TOKEN973=null;

        Object string_literal972_tree=null;
        Object TOKEN973_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:5: 'VBP' TOKEN
            {
            string_literal972=(Token)match(input,175,FOLLOW_175_in_vbp5504_static.FOLLOW_175_in_vbp5504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal972);

            TOKEN973=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5506_static.FOLLOW_TOKEN_in_vbp5506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN973);



            // AST REWRITE
            // elements: TOKEN, 175
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal974=null;
        Token TOKEN975=null;

        Object string_literal974_tree=null;
        Object TOKEN975_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:5: 'VBZ' TOKEN
            {
            string_literal974=(Token)match(input,176,FOLLOW_176_in_vbz5521_static.FOLLOW_176_in_vbz5521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal974);

            TOKEN975=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5523_static.FOLLOW_TOKEN_in_vbz5523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN975);



            // AST REWRITE
            // elements: TOKEN, 176
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 621:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal976=null;
        Token TOKEN977=null;

        Object string_literal976_tree=null;
        Object TOKEN977_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:5: 'WDT' TOKEN
            {
            string_literal976=(Token)match(input,177,FOLLOW_177_in_wdt5538_static.FOLLOW_177_in_wdt5538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal976);

            TOKEN977=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5540_static.FOLLOW_TOKEN_in_wdt5540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN977);



            // AST REWRITE
            // elements: 177, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal978=null;
        Token TOKEN979=null;

        Object string_literal978_tree=null;
        Object TOKEN979_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:4: 'WP' TOKEN
            {
            string_literal978=(Token)match(input,178,FOLLOW_178_in_wp5555_static.FOLLOW_178_in_wp5555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal978);

            TOKEN979=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5557_static.FOLLOW_TOKEN_in_wp5557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN979);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 627:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal980=null;
        Token TOKEN981=null;

        Object string_literal980_tree=null;
        Object TOKEN981_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:9: 'WP$' TOKEN
            {
            string_literal980=(Token)match(input,179,FOLLOW_179_in_wp_poss5572_static.FOLLOW_179_in_wp_poss5572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal980);

            TOKEN981=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5574_static.FOLLOW_TOKEN_in_wp_poss5574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN981);



            // AST REWRITE
            // elements: 179, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 630:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal982=null;
        Token TOKEN983=null;

        Object string_literal982_tree=null;
        Object TOKEN983_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:5: 'WRB' TOKEN
            {
            string_literal982=(Token)match(input,180,FOLLOW_180_in_wrb5589_static.FOLLOW_180_in_wrb5589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal982);

            TOKEN983=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5591_static.FOLLOW_TOKEN_in_wrb5591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN983);



            // AST REWRITE
            // elements: TOKEN, 180
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 633:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:13: ( procedureNounPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:13: procedureNounPhrase
        {
        pushFollow(FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker223_static.FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker223);
        procedureNounPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:33: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:33: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker225_static.FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker225);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:69: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:69: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred4_ChemicalChunker231_static.FOLLOW_sentenceStructure_in_synpred4_ChemicalChunker231);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:87: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:87: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred5_ChemicalChunker233_static.FOLLOW_unmatchedPhrase_in_synpred5_ChemicalChunker233);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred7_ChemicalChunker247_static.FOLLOW_nounphrase_in_synpred7_ChemicalChunker247);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred8_ChemicalChunker249_static.FOLLOW_verbphrase_in_synpred8_ChemicalChunker249);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred9_ChemicalChunker251_static.FOLLOW_prepphrase_in_synpred9_ChemicalChunker251);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred10_ChemicalChunker253_static.FOLLOW_prepphraseAfter_in_synpred10_ChemicalChunker253);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred11_ChemicalChunker258_static.FOLLOW_advAdj_in_synpred11_ChemicalChunker258);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred12_ChemicalChunker260_static.FOLLOW_colon_in_synpred12_ChemicalChunker260);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred13_ChemicalChunker265_static.FOLLOW_conjunction_in_synpred13_ChemicalChunker265);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred14_ChemicalChunker267_static.FOLLOW_rbconj_in_synpred14_ChemicalChunker267);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred15_ChemicalChunker269_static.FOLLOW_comma_in_synpred15_ChemicalChunker269);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:96: ( headingProcedureTerminators )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:96: headingProcedureTerminators
        {
        pushFollow(FOLLOW_headingProcedureTerminators_in_synpred87_ChemicalChunker483_static.FOLLOW_headingProcedureTerminators_in_synpred87_ChemicalChunker483);
        headingProcedureTerminators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred93_ChemicalChunker584_static.FOLLOW_nounphraseStructure1_in_synpred93_ChemicalChunker584);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred95_ChemicalChunker615_static.FOLLOW_dt_in_synpred95_ChemicalChunker615);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:35: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred96_ChemicalChunker622_static.FOLLOW_conjunction_in_synpred96_ChemicalChunker622);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:35: ( ( conjunction )* nounphraseContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:35: ( conjunction )* nounphraseContent
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:35: ( conjunction )*
        loop203:
        do {
            int alt203=2;
            alt203 = dfa203.predict(input);
            switch (alt203) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred97_ChemicalChunker622_static.FOLLOW_conjunction_in_synpred97_ChemicalChunker622);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop203;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred97_ChemicalChunker625_static.FOLLOW_nounphraseContent_in_synpred97_ChemicalChunker625);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:69: ( prepphraseOf )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:69: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker630_static.FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker630);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:83: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:83: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker633_static.FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker633);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:4: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred100_ChemicalChunker645_static.FOLLOW_advAdj_in_synpred100_ChemicalChunker645);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:14: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred101_ChemicalChunker650_static.FOLLOW_dissolvePhrase_in_synpred101_ChemicalChunker650);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:29: ( ratioOrBracketedRatio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:29: ratioOrBracketedRatio
        {
        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred102_ChemicalChunker652_static.FOLLOW_ratioOrBracketedRatio_in_synpred102_ChemicalChunker652);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:51: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:51: noun
        {
        pushFollow(FOLLOW_noun_in_synpred103_ChemicalChunker654_static.FOLLOW_noun_in_synpred103_ChemicalChunker654);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:56: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:56: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred104_ChemicalChunker656_static.FOLLOW_numeric_in_synpred104_ChemicalChunker656);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker668_static.FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker668);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred106_ChemicalChunker
    public final void synpred106_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred106_ChemicalChunker699_static.FOLLOW_adj_in_synpred106_ChemicalChunker699);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker711_static.FOLLOW_molecule_in_synpred109_ChemicalChunker711);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:72: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:72: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred110_ChemicalChunker720_static.FOLLOW_conjunction_in_synpred110_ChemicalChunker720);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker722_static.FOLLOW_molecule_in_synpred110_ChemicalChunker722);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:16: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:16: adj
        {
        pushFollow(FOLLOW_adj_in_synpred112_ChemicalChunker739_static.FOLLOW_adj_in_synpred112_ChemicalChunker739);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:27: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:27: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred114_ChemicalChunker746_static.FOLLOW_molecule_in_synpred114_ChemicalChunker746);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:28: to
        {
        pushFollow(FOLLOW_to_in_synpred116_ChemicalChunker779_static.FOLLOW_to_in_synpred116_ChemicalChunker779);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred117_ChemicalChunker782_static.FOLLOW_inAll_in_synpred117_ChemicalChunker782);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred123_ChemicalChunker801_static.FOLLOW_verb_in_synpred123_ChemicalChunker801);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:77: md
        {
        pushFollow(FOLLOW_md_in_synpred124_ChemicalChunker804_static.FOLLOW_md_in_synpred124_ChemicalChunker804);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred125_ChemicalChunker807_static.FOLLOW_adv_in_synpred125_ChemicalChunker807);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred126_ChemicalChunker810_static.FOLLOW_adj_in_synpred126_ChemicalChunker810);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred127_ChemicalChunker813_static.FOLLOW_neg_in_synpred127_ChemicalChunker813);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:49: ( md )*
        loop204:
        do {
            int alt204=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt204=1;
                }
                break;

            }

            switch (alt204) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred128_ChemicalChunker789_static.FOLLOW_md_in_synpred128_ChemicalChunker789);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop204;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:53: ( rbconj )?
        int alt205=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt205=1;
                }
                break;
        }

        switch (alt205) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred128_ChemicalChunker792_static.FOLLOW_rbconj_in_synpred128_ChemicalChunker792);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:61: ( adv )*
        loop206:
        do {
            int alt206=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt206=1;
                }
                break;

            }

            switch (alt206) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred128_ChemicalChunker795_static.FOLLOW_adv_in_synpred128_ChemicalChunker795);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop206;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:66: ( adj )?
        int alt207=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt207=1;
                }
                break;
        }

        switch (alt207) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred128_ChemicalChunker798_static.FOLLOW_adj_in_synpred128_ChemicalChunker798);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:71: ( verb )+
        int cnt208=0;
        loop208:
        do {
            int alt208=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt208=1;
                }
                break;

            }

            switch (alt208) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred128_ChemicalChunker801_static.FOLLOW_verb_in_synpred128_ChemicalChunker801);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt208 >= 1 ) break loop208;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(208, input);
                    throw eee;
            }
            cnt208++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:77: ( md )*
        loop209:
        do {
            int alt209=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt209=1;
                }
                break;

            }

            switch (alt209) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred128_ChemicalChunker804_static.FOLLOW_md_in_synpred128_ChemicalChunker804);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop209;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:81: ( adv )*
        loop210:
        do {
            int alt210=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt210=1;
                }
                break;

            }

            switch (alt210) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred128_ChemicalChunker807_static.FOLLOW_adv_in_synpred128_ChemicalChunker807);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop210;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:86: ( adj )?
        int alt211=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt211=1;
                }
                break;
        }

        switch (alt211) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred128_ChemicalChunker810_static.FOLLOW_adj_in_synpred128_ChemicalChunker810);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:91: ( neg )?
        int alt212=2;
        switch ( input.LA(1) ) {
            case 135:
                {
                alt212=1;
                }
                break;
        }

        switch (alt212) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred128_ChemicalChunker813_static.FOLLOW_neg_in_synpred128_ChemicalChunker813);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred129_ChemicalChunker819_static.FOLLOW_inoff_in_synpred129_ChemicalChunker819);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred132_ChemicalChunker
    public final void synpred132_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:107: ( cc )?
        int alt213=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                alt213=1;
                }
                break;
        }

        switch (alt213) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred132_ChemicalChunker823_static.FOLLOW_cc_in_synpred132_ChemicalChunker823);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:111: ( comma )?
        int alt214=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt214=1;
                }
                break;
        }

        switch (alt214) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred132_ChemicalChunker826_static.FOLLOW_comma_in_synpred132_ChemicalChunker826);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred132_ChemicalChunker829_static.FOLLOW_prepphrase_in_synpred132_ChemicalChunker829);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker859_static.FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker859);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred155_ChemicalChunker
    public final void synpred155_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred155_ChemicalChunker885_static.FOLLOW_vbdegass_in_synpred155_ChemicalChunker885);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred173_ChemicalChunker947_static.FOLLOW_dash_in_synpred173_ChemicalChunker947);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred173_ChemicalChunker949_static.FOLLOW_nounStructure_in_synpred173_ChemicalChunker949);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred176_ChemicalChunker964_static.FOLLOW_citation_in_synpred176_ChemicalChunker964);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred177_ChemicalChunker966_static.FOLLOW_cycles_in_synpred177_ChemicalChunker966);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred178_ChemicalChunker968_static.FOLLOW_molecule_in_synpred178_ChemicalChunker968);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred179_ChemicalChunker970_static.FOLLOW_apparatus_in_synpred179_ChemicalChunker970);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred180_ChemicalChunker972_static.FOLLOW_mixture_in_synpred180_ChemicalChunker972);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred181_ChemicalChunker974_static.FOLLOW_unnamedmolecule_in_synpred181_ChemicalChunker974);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:90: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:90: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred182_ChemicalChunker976_static.FOLLOW_nnstate_in_synpred182_ChemicalChunker976);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:98: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:98: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred183_ChemicalChunker978_static.FOLLOW_procedureNode_in_synpred183_ChemicalChunker978);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:112: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:112: nn
        {
        pushFollow(FOLLOW_nn_in_synpred184_ChemicalChunker980_static.FOLLOW_nn_in_synpred184_ChemicalChunker980);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:123: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:123: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred187_ChemicalChunker986_static.FOLLOW_nnadd_in_synpred187_ChemicalChunker986);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:147: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:147: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred189_ChemicalChunker990_static.FOLLOW_nnexample_in_synpred189_ChemicalChunker990);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:157: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:157: range
        {
        pushFollow(FOLLOW_range_in_synpred190_ChemicalChunker992_static.FOLLOW_range_in_synpred190_ChemicalChunker992);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:163: ( oscaronts )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:163: oscaronts
        {
        pushFollow(FOLLOW_oscaronts_in_synpred191_ChemicalChunker994_static.FOLLOW_oscaronts_in_synpred191_ChemicalChunker994);
        oscaronts();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:180: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:180: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred193_ChemicalChunker998_static.FOLLOW_nnatmosphere_in_synpred193_ChemicalChunker998);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:203: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:203: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred195_ChemicalChunker1002_static.FOLLOW_quantity_in_synpred195_ChemicalChunker1002);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:212: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:212: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred196_ChemicalChunker1004_static.FOLLOW_nnchementity_in_synpred196_ChemicalChunker1004);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred198_ChemicalChunker
    public final void synpred198_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:232: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:232: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred198_ChemicalChunker1008_static.FOLLOW_nnph_in_synpred198_ChemicalChunker1008);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:245: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:245: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred200_ChemicalChunker1012_static.FOLLOW_nngeneral_in_synpred200_ChemicalChunker1012);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred203_ChemicalChunker
    public final void synpred203_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:269: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:269: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred203_ChemicalChunker1018_static.FOLLOW_nnpressure_in_synpred203_ChemicalChunker1018);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:373: ( nnmixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:373: nnmixture
        {
        pushFollow(FOLLOW_nnmixture_in_synpred213_ChemicalChunker1038_static.FOLLOW_nnmixture_in_synpred213_ChemicalChunker1038);
        nnmixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:383: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:383: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred214_ChemicalChunker1040_static.FOLLOW_squareBracketedReference_in_synpred214_ChemicalChunker1040);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred216_ChemicalChunker
    public final void synpred216_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:414: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:414: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred216_ChemicalChunker1044_static.FOLLOW_numeric_in_synpred216_ChemicalChunker1044);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:464: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:464: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred221_ChemicalChunker1054_static.FOLLOW_nnyield_in_synpred221_ChemicalChunker1054);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred229_ChemicalChunker1084_static.FOLLOW_prepphraseAtmosphere_in_synpred229_ChemicalChunker1084);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred230_ChemicalChunker1086_static.FOLLOW_prepphraseTime_in_synpred230_ChemicalChunker1086);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred231_ChemicalChunker1088_static.FOLLOW_prepphraseTemp_in_synpred231_ChemicalChunker1088);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred232_ChemicalChunker1090_static.FOLLOW_prepphraseIN_in_synpred232_ChemicalChunker1090);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred233_ChemicalChunker1092_static.FOLLOW_prepphraseRole_in_synpred233_ChemicalChunker1092);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred235_ChemicalChunker1132_static.FOLLOW_advAdj_in_synpred235_ChemicalChunker1132);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred236_ChemicalChunker
    public final void synpred236_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred236_ChemicalChunker1137_static.FOLLOW_nnatmosphere_in_synpred236_ChemicalChunker1137);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_ChemicalChunker

    // $ANTLR start synpred237_ChemicalChunker
    public final void synpred237_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred237_ChemicalChunker1165_static.FOLLOW_advAdj_in_synpred237_ChemicalChunker1165);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_ChemicalChunker

    // $ANTLR start synpred242_ChemicalChunker
    public final void synpred242_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred242_ChemicalChunker1181_static.FOLLOW_nntime_in_synpred242_ChemicalChunker1181);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_ChemicalChunker

    // $ANTLR start synpred243_ChemicalChunker
    public final void synpred243_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred243_ChemicalChunker1212_static.FOLLOW_advAdj_in_synpred243_ChemicalChunker1212);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred248_ChemicalChunker1227_static.FOLLOW_nntemp_in_synpred248_ChemicalChunker1227);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred254_ChemicalChunker1400_static.FOLLOW_conjunction_in_synpred254_ChemicalChunker1400);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:15: ( conjunction )*
        loop215:
        do {
            int alt215=2;
            alt215 = dfa215.predict(input);
            switch (alt215) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred255_ChemicalChunker1400_static.FOLLOW_conjunction_in_synpred255_ChemicalChunker1400);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop215;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred255_ChemicalChunker1403_static.FOLLOW_apparatus_in_synpred255_ChemicalChunker1403);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred258_ChemicalChunker1420_static.FOLLOW_nnApp_in_synpred258_ChemicalChunker1420);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1447_static.FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1447);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred260_ChemicalChunker1451_static.FOLLOW_dash_in_synpred260_ChemicalChunker1451);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred260_ChemicalChunker1453_static.FOLLOW_nnapparatus_in_synpred260_ChemicalChunker1453);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred261_ChemicalChunker1467_static.FOLLOW_quantity_in_synpred261_ChemicalChunker1467);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred262_ChemicalChunker1469_static.FOLLOW_adj_in_synpred262_ChemicalChunker1469);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred263_ChemicalChunker1471_static.FOLLOW_nnpressure_in_synpred263_ChemicalChunker1471);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred264_ChemicalChunker1473_static.FOLLOW_nnadd_in_synpred264_ChemicalChunker1473);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred265_ChemicalChunker1475_static.FOLLOW_molecule_in_synpred265_ChemicalChunker1475);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred266_ChemicalChunker1477_static.FOLLOW_nnchementity_in_synpred266_ChemicalChunker1477);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred267_ChemicalChunker1479_static.FOLLOW_nnstate_in_synpred267_ChemicalChunker1479);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred268_ChemicalChunker1481_static.FOLLOW_nn_in_synpred268_ChemicalChunker1481);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred269_ChemicalChunker1493_static.FOLLOW_oscaront_in_synpred269_ChemicalChunker1493);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:46: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:46: adj
        {
        pushFollow(FOLLOW_adj_in_synpred271_ChemicalChunker1518_static.FOLLOW_adj_in_synpred271_ChemicalChunker1518);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:52: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:52: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1522_static.FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1522);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:81: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:81: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred273_ChemicalChunker1526_static.FOLLOW_nnchementity_in_synpred273_ChemicalChunker1526);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:97: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:97: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred274_ChemicalChunker1531_static.FOLLOW_quantity_in_synpred274_ChemicalChunker1531);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:107: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:107: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1534_static.FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1534);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:34: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:34: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred276_ChemicalChunker1545_static.FOLLOW_afterOscarCompoundStructure_in_synpred276_ChemicalChunker1545);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:30: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:30: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred278_ChemicalChunker1572_static.FOLLOW_oscarcm_in_synpred278_ChemicalChunker1572);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:45: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:45: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred280_ChemicalChunker1578_static.FOLLOW_oscarcm_in_synpred280_ChemicalChunker1578);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:40: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:40: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred281_ChemicalChunker1576_static.FOLLOW_dash_in_synpred281_ChemicalChunker1576);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:45: ( oscarcm )+
        int cnt218=0;
        loop218:
        do {
            int alt218=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt218=1;
                }
                break;

            }

            switch (alt218) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred281_ChemicalChunker1578_static.FOLLOW_oscarcm_in_synpred281_ChemicalChunker1578);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt218 >= 1 ) break loop218;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(218, input);
                    throw eee;
            }
            cnt218++;
        } while (true);


        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:56: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:56: dash
        {
        pushFollow(FOLLOW_dash_in_synpred282_ChemicalChunker1583_static.FOLLOW_dash_in_synpred282_ChemicalChunker1583);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:39: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:39: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:39: ( dash ( oscarcm )+ )+
        int cnt220=0;
        loop220:
        do {
            int alt220=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt220=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt220) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:40: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred283_ChemicalChunker1576_static.FOLLOW_dash_in_synpred283_ChemicalChunker1576);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:45: ( oscarcm )+
        	    int cnt219=0;
        	    loop219:
        	    do {
        	        int alt219=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt219=1;
        	            }
        	            break;

        	        }

        	        switch (alt219) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred283_ChemicalChunker1578_static.FOLLOW_oscarcm_in_synpred283_ChemicalChunker1578);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt219 >= 1 ) break loop219;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(219, input);
        	                throw eee;
        	        }
        	        cnt219++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt220 >= 1 ) break loop220;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(220, input);
                    throw eee;
            }
            cnt220++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:56: ( dash )?
        int alt221=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt221=1;
                }
                break;
        }

        switch (alt221) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred283_ChemicalChunker1583_static.FOLLOW_dash_in_synpred283_ChemicalChunker1583);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:62: ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:63: ( colon ( oscarcm )+ )+ ratioOrBracketedRatio
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:63: ( colon ( oscarcm )+ )+
        int cnt224=0;
        loop224:
        do {
            int alt224=2;
            switch ( input.LA(1) ) {
            case 132:
                {
                alt224=1;
                }
                break;

            }

            switch (alt224) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:64: colon ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_colon_in_synpred286_ChemicalChunker1588_static.FOLLOW_colon_in_synpred286_ChemicalChunker1588);
        	    colon();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:70: ( oscarcm )+
        	    int cnt223=0;
        	    loop223:
        	    do {
        	        int alt223=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt223=1;
        	            }
        	            break;

        	        }

        	        switch (alt223) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred286_ChemicalChunker1590_static.FOLLOW_oscarcm_in_synpred286_ChemicalChunker1590);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt223 >= 1 ) break loop223;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(223, input);
        	                throw eee;
        	        }
        	        cnt223++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt224 >= 1 ) break loop224;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(224, input);
                    throw eee;
            }
            cnt224++;
        } while (true);

        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred286_ChemicalChunker1595_static.FOLLOW_ratioOrBracketedRatio_in_synpred286_ChemicalChunker1595);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:112: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:112: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred287_ChemicalChunker1601_static.FOLLOW_oscarcm_in_synpred287_ChemicalChunker1601);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:106: ( colon ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:106: colon ( oscarcm )+
        {
        pushFollow(FOLLOW_colon_in_synpred288_ChemicalChunker1599_static.FOLLOW_colon_in_synpred288_ChemicalChunker1599);
        colon();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:112: ( oscarcm )+
        int cnt225=0;
        loop225:
        do {
            int alt225=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt225=1;
                }
                break;

            }

            switch (alt225) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred288_ChemicalChunker1601_static.FOLLOW_oscarcm_in_synpred288_ChemicalChunker1601);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt225 >= 1 ) break loop225;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(225, input);
                    throw eee;
            }
            cnt225++;
        } while (true);


        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:124: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:124: dash
        {
        pushFollow(FOLLOW_dash_in_synpred289_ChemicalChunker1607_static.FOLLOW_dash_in_synpred289_ChemicalChunker1607);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:129: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:129: apost
        {
        pushFollow(FOLLOW_apost_in_synpred290_ChemicalChunker1609_static.FOLLOW_apost_in_synpred290_ChemicalChunker1609);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1652_static.FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1652);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1655_static.FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1655);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred294_ChemicalChunker1662_static.FOLLOW_asAstate_in_synpred294_ChemicalChunker1662);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred295_ChemicalChunker1673_static.FOLLOW_quantity_in_synpred295_ChemicalChunker1673);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred296_ChemicalChunker1675_static.FOLLOW_mixture_in_synpred296_ChemicalChunker1675);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:64: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:64: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred299_ChemicalChunker1692_static.FOLLOW_mixture_in_synpred299_ChemicalChunker1692);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:30: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:30: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred302_ChemicalChunker1714_static.FOLLOW_quantity_in_synpred302_ChemicalChunker1714);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:39: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:39: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred303_ChemicalChunker1716_static.FOLLOW_mixture_in_synpred303_ChemicalChunker1716);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:86: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:86: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1739_static.FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1739);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred309_ChemicalChunker1751_static.FOLLOW_quantity_in_synpred309_ChemicalChunker1751);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred310_ChemicalChunker1753_static.FOLLOW_mixture_in_synpred310_ChemicalChunker1753);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1757_static.FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1757);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred312_ChemicalChunker1768_static.FOLLOW_citation_in_synpred312_ChemicalChunker1768);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred313_ChemicalChunker1770_static.FOLLOW_quantity_in_synpred313_ChemicalChunker1770);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred315_ChemicalChunker1772_static.FOLLOW_comma_in_synpred315_ChemicalChunker1772);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:59: ( quantity1Node | citationStructure )
        int alt227=2;
        switch ( input.LA(1) ) {
        case 143:
            {
            switch ( input.LA(2) ) {
            case TOKEN:
                {
                switch ( input.LA(3) ) {
                case 133:
                case 145:
                case 149:
                case 158:
                    {
                    alt227=2;
                    }
                    break;
                case 146:
                    {
                    switch ( input.LA(4) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(5) ) {
                        case 44:
                        case 65:
                        case 66:
                        case 67:
                        case 69:
                        case 70:
                        case 138:
                        case 156:
                            {
                            alt227=1;
                            }
                            break;
                        case 133:
                        case 145:
                        case 146:
                        case 149:
                        case 158:
                            {
                            alt227=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 227, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 227, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                case 73:
                case 130:
                    {
                    alt227=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 1, input);

                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 227, 0, input);

            throw nvae;
        }

        switch (alt227) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1775_static.FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1775);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred315_ChemicalChunker1777_static.FOLLOW_citationStructure_in_synpred315_ChemicalChunker1777);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:93: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:93: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred316_ChemicalChunker1780_static.FOLLOW_mixture_in_synpred316_ChemicalChunker1780);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred317_ChemicalChunker
    public final void synpred317_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:68: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:68: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred317_ChemicalChunker1812_static.FOLLOW_asAstate_in_synpred317_ChemicalChunker1812);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_ChemicalChunker

    // $ANTLR start synpred318_ChemicalChunker
    public final void synpred318_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:16: ( potentialUnnamedMoleculeAmount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:16: potentialUnnamedMoleculeAmount1
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1825_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1825);
        potentialUnnamedMoleculeAmount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:50: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:50: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1829_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1829);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:4: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
        {
        pushFollow(FOLLOW_quantityOf_in_synpred320_ChemicalChunker1822_static.FOLLOW_quantityOf_in_synpred320_ChemicalChunker1822);
        quantityOf();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
        int alt228=3;
        alt228 = dfa228.predict(input);
        switch (alt228) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:16: potentialUnnamedMoleculeAmount1
                {
                pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred320_ChemicalChunker1825_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred320_ChemicalChunker1825);
                potentialUnnamedMoleculeAmount1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:50: potentialUnnamedMoleculeAmount2
                {
                pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1829_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1829);
                potentialUnnamedMoleculeAmount2();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:84: definiteUnnamedMolecule
                {
                pushFollow(FOLLOW_definiteUnnamedMolecule_in_synpred320_ChemicalChunker1833_static.FOLLOW_definiteUnnamedMolecule_in_synpred320_ChemicalChunker1833);
                definiteUnnamedMolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:112: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:112: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1839_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1839);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred322_ChemicalChunker
    public final void synpred322_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred322_ChemicalChunker1852_static.FOLLOW_quantity_in_synpred322_ChemicalChunker1852);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:29: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:29: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred326_ChemicalChunker1876_static.FOLLOW_quantity_in_synpred326_ChemicalChunker1876);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:39: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:39: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred327_ChemicalChunker1879_static.FOLLOW_asAstate_in_synpred327_ChemicalChunker1879);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:49: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:49: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1882_static.FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1882);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:148: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:148: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred333_ChemicalChunker1922_static.FOLLOW_quantity_in_synpred333_ChemicalChunker1922);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:158: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:158: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred334_ChemicalChunker1925_static.FOLLOW_asAstate_in_synpred334_ChemicalChunker1925);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:168: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:168: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1928_static.FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1928);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:42: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:42: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred337_ChemicalChunker1943_static.FOLLOW_quantity_in_synpred337_ChemicalChunker1943);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:52: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:52: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred338_ChemicalChunker1946_static.FOLLOW_asAstate_in_synpred338_ChemicalChunker1946);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:62: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:62: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred339_ChemicalChunker1949_static.FOLLOW_fromProcedure_in_synpred339_ChemicalChunker1949);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred342_ChemicalChunker
    public final void synpred342_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:120: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:120: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred342_ChemicalChunker1973_static.FOLLOW_numericReferenceOrQuantity_in_synpred342_ChemicalChunker1973);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_ChemicalChunker

    // $ANTLR start synpred344_ChemicalChunker
    public final void synpred344_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:66: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:66: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1989_static.FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1989);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:33: ( referenceToExampleCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:33: referenceToExampleCompound
        {
        pushFollow(FOLLOW_referenceToExampleCompound_in_synpred349_ChemicalChunker2013_static.FOLLOW_referenceToExampleCompound_in_synpred349_ChemicalChunker2013);
        referenceToExampleCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred350_ChemicalChunker
    public final void synpred350_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:60: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:60: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred350_ChemicalChunker2015_static.FOLLOW_nnexample_in_synpred350_ChemicalChunker2015);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred357_ChemicalChunker2045_static.FOLLOW_quantity_in_synpred357_ChemicalChunker2045);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred361_ChemicalChunker
    public final void synpred361_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:34: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:34: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred361_ChemicalChunker2074_static.FOLLOW_quantity_in_synpred361_ChemicalChunker2074);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_ChemicalChunker

    // $ANTLR start synpred365_ChemicalChunker
    public final void synpred365_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:6: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:7: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred365_ChemicalChunker2123_static.FOLLOW_quantity_in_synpred365_ChemicalChunker2123);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred365_ChemicalChunker

    // $ANTLR start synpred367_ChemicalChunker
    public final void synpred367_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:31: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:31: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred367_ChemicalChunker2159_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred367_ChemicalChunker2159);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_ChemicalChunker

    // $ANTLR start synpred372_ChemicalChunker
    public final void synpred372_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred372_ChemicalChunker2292_static.FOLLOW_comma_in_synpred372_ChemicalChunker2292);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred372_ChemicalChunker2295_static.FOLLOW_measurements_in_synpred372_ChemicalChunker2295);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred375_ChemicalChunker2320_static.FOLLOW_dt_in_synpred375_ChemicalChunker2320);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred376_ChemicalChunker
    public final void synpred376_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred376_ChemicalChunker2332_static.FOLLOW_measurementtypes_in_synpred376_ChemicalChunker2332);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred383_ChemicalChunker2369_static.FOLLOW_yield_in_synpred383_ChemicalChunker2369);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:30: ( dash cd nnpercent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:30: dash cd nnpercent
        {
        pushFollow(FOLLOW_dash_in_synpred388_ChemicalChunker2568_static.FOLLOW_dash_in_synpred388_ChemicalChunker2568);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred388_ChemicalChunker2570_static.FOLLOW_cd_in_synpred388_ChemicalChunker2570);
        cd();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnpercent_in_synpred388_ChemicalChunker2572_static.FOLLOW_nnpercent_in_synpred388_ChemicalChunker2572);
        nnpercent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:19: ( mixtureStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:19: mixtureStructure1
        {
        pushFollow(FOLLOW_mixtureStructure1_in_synpred390_ChemicalChunker2610_static.FOLLOW_mixtureStructure1_in_synpred390_ChemicalChunker2610);
        mixtureStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:20: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:20: verb
        {
        pushFollow(FOLLOW_verb_in_synpred393_ChemicalChunker2681_static.FOLLOW_verb_in_synpred393_ChemicalChunker2681);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:25: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:25: nn
        {
        pushFollow(FOLLOW_nn_in_synpred394_ChemicalChunker2683_static.FOLLOW_nn_in_synpred394_ChemicalChunker2683);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred395_ChemicalChunker
    public final void synpred395_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:28: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:28: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred395_ChemicalChunker2685_static.FOLLOW_quantity2Node_in_synpred395_ChemicalChunker2685);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:55: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:55: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred398_ChemicalChunker2691_static.FOLLOW_oscarCompound_in_synpred398_ChemicalChunker2691);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:69: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:69: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred399_ChemicalChunker2693_static.FOLLOW_molecule_in_synpred399_ChemicalChunker2693);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:78: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:78: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred400_ChemicalChunker2695_static.FOLLOW_unnamedmolecule_in_synpred400_ChemicalChunker2695);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:99: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:99: sym
        {
        pushFollow(FOLLOW_sym_in_synpred402_ChemicalChunker2699_static.FOLLOW_sym_in_synpred402_ChemicalChunker2699);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:103: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:103: noun
        {
        pushFollow(FOLLOW_noun_in_synpred403_ChemicalChunker2701_static.FOLLOW_noun_in_synpred403_ChemicalChunker2701);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:114: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:114: cd
        {
        pushFollow(FOLLOW_cd_in_synpred405_ChemicalChunker2705_static.FOLLOW_cd_in_synpred405_ChemicalChunker2705);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred406_ChemicalChunker
    public final void synpred406_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:117: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:117: comma
        {
        pushFollow(FOLLOW_comma_in_synpred406_ChemicalChunker2707_static.FOLLOW_comma_in_synpred406_ChemicalChunker2707);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:123: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:123: adj
        {
        pushFollow(FOLLOW_adj_in_synpred407_ChemicalChunker2709_static.FOLLOW_adj_in_synpred407_ChemicalChunker2709);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:140: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:140: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred409_ChemicalChunker2717_static.FOLLOW_minimixture_in_synpred409_ChemicalChunker2717);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred410_ChemicalChunker
    public final void synpred410_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:152: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:152: verb
        {
        pushFollow(FOLLOW_verb_in_synpred410_ChemicalChunker2719_static.FOLLOW_verb_in_synpred410_ChemicalChunker2719);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_ChemicalChunker

    // $ANTLR start synpred411_ChemicalChunker
    public final void synpred411_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:157: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:157: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred411_ChemicalChunker2721_static.FOLLOW_quantity2Node_in_synpred411_ChemicalChunker2721);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:171: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:171: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred412_ChemicalChunker2723_static.FOLLOW_nnyield_in_synpred412_ChemicalChunker2723);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:192: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:192: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred415_ChemicalChunker2729_static.FOLLOW_oscarCompound_in_synpred415_ChemicalChunker2729);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:206: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:206: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred416_ChemicalChunker2731_static.FOLLOW_molecule_in_synpred416_ChemicalChunker2731);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:215: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:215: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred417_ChemicalChunker2733_static.FOLLOW_unnamedmolecule_in_synpred417_ChemicalChunker2733);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred419_ChemicalChunker
    public final void synpred419_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:236: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:236: sym
        {
        pushFollow(FOLLOW_sym_in_synpred419_ChemicalChunker2737_static.FOLLOW_sym_in_synpred419_ChemicalChunker2737);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_ChemicalChunker

    // $ANTLR start synpred420_ChemicalChunker
    public final void synpred420_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:240: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:240: noun
        {
        pushFollow(FOLLOW_noun_in_synpred420_ChemicalChunker2739_static.FOLLOW_noun_in_synpred420_ChemicalChunker2739);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:251: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:251: cd
        {
        pushFollow(FOLLOW_cd_in_synpred422_ChemicalChunker2743_static.FOLLOW_cd_in_synpred422_ChemicalChunker2743);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:254: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:254: comma
        {
        pushFollow(FOLLOW_comma_in_synpred423_ChemicalChunker2745_static.FOLLOW_comma_in_synpred423_ChemicalChunker2745);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:260: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:260: adj
        {
        pushFollow(FOLLOW_adj_in_synpred424_ChemicalChunker2747_static.FOLLOW_adj_in_synpred424_ChemicalChunker2747);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred435_ChemicalChunker
    public final void synpred435_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:32: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:32: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred435_ChemicalChunker2850_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred435_ChemicalChunker2850);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred435_ChemicalChunker

    // $ANTLR start synpred436_ChemicalChunker
    public final void synpred436_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:64: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:64: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred436_ChemicalChunker2852_static.FOLLOW_numeric_in_synpred436_ChemicalChunker2852);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_ChemicalChunker

    // $ANTLR start synpred438_ChemicalChunker
    public final void synpred438_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:87: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:87: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred438_ChemicalChunker2861_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred438_ChemicalChunker2861);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred438_ChemicalChunker

    // $ANTLR start synpred441_ChemicalChunker
    public final void synpred441_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:131: ( ( comma | colon )? submethod )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:131: ( comma | colon )? submethod
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:131: ( comma | colon )?
        int alt234=3;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt234=1;
                }
                break;
            case 132:
                {
                alt234=2;
                }
                break;
        }

        switch (alt234) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:132: comma
                {
                pushFollow(FOLLOW_comma_in_synpred441_ChemicalChunker2870_static.FOLLOW_comma_in_synpred441_ChemicalChunker2870);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:139: colon
                {
                pushFollow(FOLLOW_colon_in_synpred441_ChemicalChunker2873_static.FOLLOW_colon_in_synpred441_ChemicalChunker2873);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_submethod_in_synpred441_ChemicalChunker2877_static.FOLLOW_submethod_in_synpred441_ChemicalChunker2877);
        submethod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_ChemicalChunker

    // $ANTLR start synpred442_ChemicalChunker
    public final void synpred442_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:159: ( lrb submethod rrb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:159: lrb submethod rrb
        {
        pushFollow(FOLLOW_lrb_in_synpred442_ChemicalChunker2881_static.FOLLOW_lrb_in_synpred442_ChemicalChunker2881);
        lrb();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_submethod_in_synpred442_ChemicalChunker2883_static.FOLLOW_submethod_in_synpred442_ChemicalChunker2883);
        submethod();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rrb_in_synpred442_ChemicalChunker2885_static.FOLLOW_rrb_in_synpred442_ChemicalChunker2885);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred442_ChemicalChunker

    // $ANTLR start synpred444_ChemicalChunker
    public final void synpred444_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:35: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:35: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2902_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2902);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred444_ChemicalChunker

    // $ANTLR start synpred445_ChemicalChunker
    public final void synpred445_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:13: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:13: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2917_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2917);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred445_ChemicalChunker

    // $ANTLR start synpred454_ChemicalChunker
    public final void synpred454_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:15: ( colon cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:15: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred454_ChemicalChunker3051_static.FOLLOW_colon_in_synpred454_ChemicalChunker3051);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred454_ChemicalChunker3053_static.FOLLOW_cd_in_synpred454_ChemicalChunker3053);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred454_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred438_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred438_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred444_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred444_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred454_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred454_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA228 dfa228 = new DFA228(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0091\uffff";
    static final String DFA2_eofS =
        "\u0091\uffff";
    static final String DFA2_minS =
        "\1\46\u0083\0\15\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\u0083\0\15\uffff";
    static final String DFA2_acceptS =
        "\u0084\uffff\1\3\12\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
        "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
        "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
        "\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1"+
        "\u0081\1\u0082\15\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\3\1\14\1\16\1\42\1\37\1\52\1\u0084\1\15\1\35\1\113\1\114"+
            "\1\112\1\120\1\121\1\130\1\131\1\115\1\127\1\122\1\124\1\116"+
            "\1\117\1\126\1\125\1\123\1\23\1\51\1\u0084\1\55\1\u0084\1\40"+
            "\1\56\1\65\1\22\1\53\1\7\1\54\1\45\1\46\1\17\1\57\1\60\1\61"+
            "\1\62\1\63\1\36\1\24\1\142\1\u0082\1\143\1\146\1\20\1\41\1\150"+
            "\1\147\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\26\1\160"+
            "\1\64\1\161\1\145\1\162\1\163\1\70\1\164\1\71\1\165\1\72\1\166"+
            "\1\167\1\144\1\170\1\171\1\73\1\172\1\66\1\173\1\174\1\175\1"+
            "\74\1\176\1\50\1\67\1\177\1\u0080\1\u0081\1\10\1\133\1\u0084"+
            "\1\21\1\u0084\1\u0083\1\u0084\1\uffff\1\u0084\1\5\1\u0084\1"+
            "\1\1\27\1\4\2\u0084\1\2\1\6\1\102\1\75\1\111\1\11\1\12\1\13"+
            "\1\105\1\132\1\25\1\47\1\34\1\106\1\103\1\107\1\43\1\44\1\30"+
            "\1\31\1\33\1\32\1\76\1\110\1\u0084\1\134\1\137\1\136\1\141\1"+
            "\135\1\140\1\77\1\104\1\100\1\101",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "89:12: ( procedureNounPhrase | sentenceStructure | unmatchedPhrase )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA3_static {
    static final String DFA3_eotS =
        "\u0093\uffff";
    static final String DFA3_eofS =
        "\1\1\u0092\uffff";
    static final String DFA3_minS =
        "\1\46\2\uffff\u008e\0\2\uffff";
    static final String DFA3_maxS =
        "\1\u00b4\2\uffff\u008e\0\2\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\1\1\2";
    static final String DFA3_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
        "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
        "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
        "\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1"+
        "\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1"+
        "\u0089\1\u008a\1\u008b\1\u008c\1\u008d\2\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\5\1\16\1\20\1\44\1\41\1\54\1\u0086\1\17\1\37\1\115\1\116"+
            "\1\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120"+
            "\1\121\1\130\1\127\1\125\1\25\1\53\1\u0087\1\57\1\u0088\1\42"+
            "\1\60\1\67\1\24\1\55\1\11\1\56\1\47\1\50\1\21\1\61\1\62\1\63"+
            "\1\64\1\65\1\40\1\26\1\144\1\u0084\1\145\1\150\1\22\1\43\1\152"+
            "\1\151\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\30\1\162"+
            "\1\66\1\163\1\147\1\164\1\165\1\72\1\166\1\73\1\167\1\74\1\170"+
            "\1\171\1\146\1\172\1\173\1\75\1\174\1\70\1\175\1\176\1\177\1"+
            "\76\1\u0080\1\52\1\71\1\u0081\1\u0082\1\u0083\1\12\1\135\1\u0089"+
            "\1\23\1\u008a\1\u0085\1\u008b\1\1\1\u008c\1\7\1\u008d\1\3\1"+
            "\31\1\6\1\u008e\1\u008f\1\4\1\10\1\104\1\77\1\113\1\13\1\14"+
            "\1\15\1\107\1\134\1\27\1\51\1\36\1\110\1\105\1\111\1\45\1\46"+
            "\1\32\1\33\1\35\1\34\1\100\1\112\1\u0090\1\136\1\141\1\140\1"+
            "\143\1\137\1\142\1\101\1\106\1\102\1\103",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_static.DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_static.DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_static.DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_static.DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_static.DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_static.DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 89:68: ( sentenceStructure | unmatchedPhrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA3_3 = input.LA(1);

                         
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA3_5 = input.LA(1);

                         
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA3_6 = input.LA(1);

                         
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA3_7 = input.LA(1);

                         
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA3_12 = input.LA(1);

                         
                        int index3_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA3_13 = input.LA(1);

                         
                        int index3_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA3_14 = input.LA(1);

                         
                        int index3_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA3_15 = input.LA(1);

                         
                        int index3_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA3_16 = input.LA(1);

                         
                        int index3_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA3_17 = input.LA(1);

                         
                        int index3_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA3_18 = input.LA(1);

                         
                        int index3_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_18);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA3_19 = input.LA(1);

                         
                        int index3_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_19);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA3_20 = input.LA(1);

                         
                        int index3_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_20);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA3_21 = input.LA(1);

                         
                        int index3_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_21);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA3_22 = input.LA(1);

                         
                        int index3_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_22);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA3_23 = input.LA(1);

                         
                        int index3_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_23);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA3_24 = input.LA(1);

                         
                        int index3_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_24);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA3_25 = input.LA(1);

                         
                        int index3_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_25);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA3_26 = input.LA(1);

                         
                        int index3_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_26);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA3_27 = input.LA(1);

                         
                        int index3_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_27);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA3_28 = input.LA(1);

                         
                        int index3_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_28);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA3_29 = input.LA(1);

                         
                        int index3_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_29);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA3_30 = input.LA(1);

                         
                        int index3_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_30);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA3_31 = input.LA(1);

                         
                        int index3_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_31);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA3_32 = input.LA(1);

                         
                        int index3_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_32);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA3_33 = input.LA(1);

                         
                        int index3_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_33);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA3_34 = input.LA(1);

                         
                        int index3_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_34);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA3_35 = input.LA(1);

                         
                        int index3_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_35);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA3_36 = input.LA(1);

                         
                        int index3_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_36);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA3_37 = input.LA(1);

                         
                        int index3_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_37);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA3_38 = input.LA(1);

                         
                        int index3_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_38);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA3_39 = input.LA(1);

                         
                        int index3_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_39);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA3_40 = input.LA(1);

                         
                        int index3_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_40);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA3_41 = input.LA(1);

                         
                        int index3_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_41);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA3_42 = input.LA(1);

                         
                        int index3_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_42);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA3_43 = input.LA(1);

                         
                        int index3_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_43);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA3_44 = input.LA(1);

                         
                        int index3_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_44);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA3_45 = input.LA(1);

                         
                        int index3_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_45);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA3_46 = input.LA(1);

                         
                        int index3_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_46);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA3_47 = input.LA(1);

                         
                        int index3_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_47);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA3_48 = input.LA(1);

                         
                        int index3_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_48);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA3_49 = input.LA(1);

                         
                        int index3_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_49);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA3_50 = input.LA(1);

                         
                        int index3_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_50);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA3_51 = input.LA(1);

                         
                        int index3_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_51);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA3_52 = input.LA(1);

                         
                        int index3_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_52);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA3_53 = input.LA(1);

                         
                        int index3_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_53);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA3_54 = input.LA(1);

                         
                        int index3_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_54);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA3_55 = input.LA(1);

                         
                        int index3_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_55);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA3_56 = input.LA(1);

                         
                        int index3_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_56);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA3_57 = input.LA(1);

                         
                        int index3_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_57);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA3_58 = input.LA(1);

                         
                        int index3_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_58);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA3_59 = input.LA(1);

                         
                        int index3_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_59);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA3_60 = input.LA(1);

                         
                        int index3_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_60);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA3_61 = input.LA(1);

                         
                        int index3_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_61);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA3_62 = input.LA(1);

                         
                        int index3_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_62);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA3_63 = input.LA(1);

                         
                        int index3_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_63);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA3_64 = input.LA(1);

                         
                        int index3_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_64);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA3_65 = input.LA(1);

                         
                        int index3_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_65);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA3_66 = input.LA(1);

                         
                        int index3_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_66);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA3_67 = input.LA(1);

                         
                        int index3_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_67);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA3_68 = input.LA(1);

                         
                        int index3_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_68);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA3_69 = input.LA(1);

                         
                        int index3_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_69);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA3_70 = input.LA(1);

                         
                        int index3_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_70);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA3_71 = input.LA(1);

                         
                        int index3_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_71);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA3_72 = input.LA(1);

                         
                        int index3_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_72);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA3_73 = input.LA(1);

                         
                        int index3_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_73);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA3_74 = input.LA(1);

                         
                        int index3_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_74);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA3_75 = input.LA(1);

                         
                        int index3_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_75);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA3_76 = input.LA(1);

                         
                        int index3_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_76);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA3_77 = input.LA(1);

                         
                        int index3_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_77);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA3_78 = input.LA(1);

                         
                        int index3_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_78);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA3_79 = input.LA(1);

                         
                        int index3_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_79);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA3_80 = input.LA(1);

                         
                        int index3_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_80);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA3_81 = input.LA(1);

                         
                        int index3_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_81);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA3_82 = input.LA(1);

                         
                        int index3_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_82);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA3_83 = input.LA(1);

                         
                        int index3_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_83);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA3_84 = input.LA(1);

                         
                        int index3_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_84);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA3_85 = input.LA(1);

                         
                        int index3_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_85);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA3_86 = input.LA(1);

                         
                        int index3_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_86);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA3_87 = input.LA(1);

                         
                        int index3_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_87);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA3_88 = input.LA(1);

                         
                        int index3_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_88);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA3_89 = input.LA(1);

                         
                        int index3_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_89);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA3_90 = input.LA(1);

                         
                        int index3_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_90);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA3_91 = input.LA(1);

                         
                        int index3_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_91);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA3_92 = input.LA(1);

                         
                        int index3_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_92);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA3_93 = input.LA(1);

                         
                        int index3_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_93);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA3_94 = input.LA(1);

                         
                        int index3_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_94);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA3_95 = input.LA(1);

                         
                        int index3_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_95);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA3_96 = input.LA(1);

                         
                        int index3_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_96);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA3_97 = input.LA(1);

                         
                        int index3_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_97);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA3_98 = input.LA(1);

                         
                        int index3_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_98);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA3_99 = input.LA(1);

                         
                        int index3_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_99);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA3_100 = input.LA(1);

                         
                        int index3_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_100);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA3_101 = input.LA(1);

                         
                        int index3_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_101);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA3_102 = input.LA(1);

                         
                        int index3_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_102);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA3_103 = input.LA(1);

                         
                        int index3_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_103);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA3_104 = input.LA(1);

                         
                        int index3_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_104);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA3_105 = input.LA(1);

                         
                        int index3_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_105);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA3_106 = input.LA(1);

                         
                        int index3_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_106);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA3_107 = input.LA(1);

                         
                        int index3_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_107);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA3_108 = input.LA(1);

                         
                        int index3_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_108);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA3_109 = input.LA(1);

                         
                        int index3_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_109);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA3_110 = input.LA(1);

                         
                        int index3_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_110);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA3_111 = input.LA(1);

                         
                        int index3_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_111);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA3_112 = input.LA(1);

                         
                        int index3_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_112);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA3_113 = input.LA(1);

                         
                        int index3_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_113);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA3_114 = input.LA(1);

                         
                        int index3_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_114);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA3_115 = input.LA(1);

                         
                        int index3_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_115);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA3_116 = input.LA(1);

                         
                        int index3_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_116);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA3_117 = input.LA(1);

                         
                        int index3_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_117);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA3_118 = input.LA(1);

                         
                        int index3_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_118);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA3_119 = input.LA(1);

                         
                        int index3_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_119);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA3_120 = input.LA(1);

                         
                        int index3_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_120);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA3_121 = input.LA(1);

                         
                        int index3_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_121);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA3_122 = input.LA(1);

                         
                        int index3_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_122);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA3_123 = input.LA(1);

                         
                        int index3_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_123);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA3_124 = input.LA(1);

                         
                        int index3_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_124);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA3_125 = input.LA(1);

                         
                        int index3_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_125);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA3_126 = input.LA(1);

                         
                        int index3_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_126);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA3_127 = input.LA(1);

                         
                        int index3_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_127);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA3_128 = input.LA(1);

                         
                        int index3_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_128);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA3_129 = input.LA(1);

                         
                        int index3_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_129);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA3_130 = input.LA(1);

                         
                        int index3_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_130);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA3_131 = input.LA(1);

                         
                        int index3_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_131);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA3_132 = input.LA(1);

                         
                        int index3_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_132);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA3_133 = input.LA(1);

                         
                        int index3_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_133);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA3_134 = input.LA(1);

                         
                        int index3_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_134);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA3_135 = input.LA(1);

                         
                        int index3_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_135);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA3_136 = input.LA(1);

                         
                        int index3_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_136);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA3_137 = input.LA(1);

                         
                        int index3_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_137);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA3_138 = input.LA(1);

                         
                        int index3_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_138);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA3_139 = input.LA(1);

                         
                        int index3_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_139);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA3_140 = input.LA(1);

                         
                        int index3_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_140);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA3_141 = input.LA(1);

                         
                        int index3_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_141);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA3_142 = input.LA(1);

                         
                        int index3_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_142);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA3_143 = input.LA(1);

                         
                        int index3_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_143);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA3_144 = input.LA(1);

                         
                        int index3_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index3_144);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\u0089\uffff";
    static final String DFA5_eofS =
        "\1\13\u0088\uffff";
    static final String DFA5_minS =
        "\1\46\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_acceptS =
        "\13\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA5_specialS =
        "\1\uffff\1\41\1\147\1\107\1\76\1\113\1\146\1\164\1\60\1\14\1\134"+
        "\1\uffff\1\124\1\22\1\103\1\11\1\100\1\10\1\163\1\102\1\32\1\140"+
        "\1\157\1\50\1\21\1\20\1\167\1\150\1\u0080\1\166\1\131\1\133\1\u0082"+
        "\1\77\1\72\1\51\1\145\1\153\1\u0081\1\36\1\154\1\47\1\173\1\23\1"+
        "\137\1\123\1\101\1\165\1\7\1\37\1\6\1\64\1\67\1\54\1\116\1\70\1"+
        "\143\1\15\1\12\1\155\1\106\1\30\1\125\1\104\1\46\1\141\1\105\1\65"+
        "\1\55\1\110\1\120\1\0\1\71\1\126\1\122\1\114\1\174\1\57\1\66\1\1"+
        "\1\161\1\132\1\111\1\13\1\63\1\175\1\26\1\34\1\73\1\144\1\56\1\40"+
        "\1\17\1\61\1\170\1\27\1\33\1\156\1\5\1\160\1\151\1\52\1\142\1\162"+
        "\1\112\1\130\1\62\1\43\1\53\1\35\1\16\1\177\1\152\1\121\1\74\1\42"+
        "\1\25\1\136\1\171\1\117\1\45\1\75\1\4\1\31\1\176\1\115\1\127\1\44"+
        "\1\3\1\24\1\135\1\172\1\2\4\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\44\1\10\1\12\1\42\1\37\1\54\1\13\1\11\1\35\1\115\1\116\1"+
            "\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120\1"+
            "\121\1\130\1\127\1\125\1\26\1\53\1\13\1\57\1\13\1\40\1\60\1"+
            "\67\1\25\1\55\1\21\1\56\1\47\1\50\1\23\1\61\1\62\1\63\1\64\1"+
            "\65\1\36\1\27\1\143\1\u0083\1\144\1\147\1\24\1\41\1\151\1\150"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\31\1\161\1\66\1"+
            "\162\1\146\1\163\1\164\1\72\1\165\1\73\1\166\1\74\1\167\1\170"+
            "\1\145\1\171\1\172\1\75\1\173\1\70\1\174\1\175\1\176\1\76\1"+
            "\177\1\52\1\71\1\u0080\1\u0081\1\u0082\1\22\1\15\1\13\1\14\1"+
            "\13\1\u0084\3\13\1\43\1\13\1\34\1\32\1\17\2\13\1\20\1\16\1\104"+
            "\1\77\1\113\1\5\1\6\1\7\1\107\1\134\1\30\1\51\1\33\1\110\1\105"+
            "\1\111\1\45\1\46\1\1\1\2\1\4\1\3\1\100\1\112\1\13\1\135\1\140"+
            "\1\137\1\142\1\136\1\141\1\101\1\106\1\102\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 91:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_132 = input.LA(1);

                         
                        int index5_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_132);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_128 = input.LA(1);

                         
                        int index5_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_128);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_122 = input.LA(1);

                         
                        int index5_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_122);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_50 = input.LA(1);

                         
                        int index5_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_50);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_58 = input.LA(1);

                         
                        int index5_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_58);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA5_57 = input.LA(1);

                         
                        int index5_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_57);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA5_110 = input.LA(1);

                         
                        int index5_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_110);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA5_43 = input.LA(1);

                         
                        int index5_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_43);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA5_129 = input.LA(1);

                         
                        int index5_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_129);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA5_116 = input.LA(1);

                         
                        int index5_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_116);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA5_61 = input.LA(1);

                         
                        int index5_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_61);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA5_123 = input.LA(1);

                         
                        int index5_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_123);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA5_109 = input.LA(1);

                         
                        int index5_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_109);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA5_39 = input.LA(1);

                         
                        int index5_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_39);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_49);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA5_115 = input.LA(1);

                         
                        int index5_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_115);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA5_107 = input.LA(1);

                         
                        int index5_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_107);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA5_127 = input.LA(1);

                         
                        int index5_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_127);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA5_120 = input.LA(1);

                         
                        int index5_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_120);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA5_64 = input.LA(1);

                         
                        int index5_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_64);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_35);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA5_108 = input.LA(1);

                         
                        int index5_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_108);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA5_53 = input.LA(1);

                         
                        int index5_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_53);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA5_106 = input.LA(1);

                         
                        int index5_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_106);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA5_52 = input.LA(1);

                         
                        int index5_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_52);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA5_55 = input.LA(1);

                         
                        int index5_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_55);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_34);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA5_114 = input.LA(1);

                         
                        int index5_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_114);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA5_121 = input.LA(1);

                         
                        int index5_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_121);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA5_33 = input.LA(1);

                         
                        int index5_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_33);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA5_46 = input.LA(1);

                         
                        int index5_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_46);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA5_63 = input.LA(1);

                         
                        int index5_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_63);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA5_66 = input.LA(1);

                         
                        int index5_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_66);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA5_60 = input.LA(1);

                         
                        int index5_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_60);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA5_104 = input.LA(1);

                         
                        int index5_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_104);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA5_125 = input.LA(1);

                         
                        int index5_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_125);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA5_54 = input.LA(1);

                         
                        int index5_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_54);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA5_119 = input.LA(1);

                         
                        int index5_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_119);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA5_113 = input.LA(1);

                         
                        int index5_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_113);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_45);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA5_62 = input.LA(1);

                         
                        int index5_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_62);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA5_126 = input.LA(1);

                         
                        int index5_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_126);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA5_105 = input.LA(1);

                         
                        int index5_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_105);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA5_30 = input.LA(1);

                         
                        int index5_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_30);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA5_31 = input.LA(1);

                         
                        int index5_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_31);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA5_130 = input.LA(1);

                         
                        int index5_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_130);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA5_117 = input.LA(1);

                         
                        int index5_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_117);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA5_65 = input.LA(1);

                         
                        int index5_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_65);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA5_102 = input.LA(1);

                         
                        int index5_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_102);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA5_56 = input.LA(1);

                         
                        int index5_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_56);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA5_36 = input.LA(1);

                         
                        int index5_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_36);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA5_112 = input.LA(1);

                         
                        int index5_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_112);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA5_37 = input.LA(1);

                         
                        int index5_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_37);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_40);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA5_59 = input.LA(1);

                         
                        int index5_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_59);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA5_103 = input.LA(1);

                         
                        int index5_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_103);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_47);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA5_29 = input.LA(1);

                         
                        int index5_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_29);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA5_118 = input.LA(1);

                         
                        int index5_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_118);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA5_131 = input.LA(1);

                         
                        int index5_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_131);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA5_42 = input.LA(1);

                         
                        int index5_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_42);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred10_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA5_124 = input.LA(1);

                         
                        int index5_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_124);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA5_111 = input.LA(1);

                         
                        int index5_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_111);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA5_28 = input.LA(1);

                         
                        int index5_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_28);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_38);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA5_32 = input.LA(1);

                         
                        int index5_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\32\uffff";
    static final String DFA6_eofS =
        "\1\1\31\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA6_specialS =
        "\15\uffff\1\1\1\3\1\6\1\5\1\7\1\11\1\4\1\2\1\10\1\0\1\12\2\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 91:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_20);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_15 = input.LA(1);

                         
                        int index6_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_15);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_17 = input.LA(1);

                         
                        int index6_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_17);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA7_static {
    static final String DFA7_eotS =
        "\13\uffff";
    static final String DFA7_eofS =
        "\1\1\12\uffff";
    static final String DFA7_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_maxS =
        "\1\u00b4\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA7_specialS =
        "\5\uffff\1\1\1\2\1\0\3\uffff}>";
    static final String[] DFA7_transitionS = {
            "\135\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_static.DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_static.DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_static.DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_static.DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_static.DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_static.DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 91:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\111\uffff";
    static final String DFA14_eofS =
        "\111\uffff";
    static final String DFA14_minS =
        "\1\46\23\0\65\uffff";
    static final String DFA14_maxS =
        "\1\u00b4\23\0\65\uffff";
    static final String DFA14_acceptS =
        "\24\uffff\1\2\63\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\65\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\24\1\11\1\13\3\24\1\uffff\1\12\1\24\20\uffff\1\20\1\24\1"+
            "\uffff\1\24\1\uffff\3\24\1\17\1\24\1\4\3\24\1\14\6\24\1\21\4"+
            "\uffff\1\15\1\24\11\uffff\1\23\1\uffff\1\24\4\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\1\24\5\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1"+
            "\uffff\2\24\3\uffff\1\5\2\uffff\1\16\5\uffff\1\24\1\uffff\2"+
            "\24\1\2\2\uffff\1\3\1\1\2\24\1\uffff\1\6\1\7\1\10\1\24\1\uffff"+
            "\1\22\14\24\10\uffff\4\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "120:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\112\uffff";
    static final String DFA18_eofS =
        "\1\1\111\uffff";
    static final String DFA18_minS =
        "\1\46\1\uffff\107\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b4\1\uffff\107\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA18_specialS =
        "\2\uffff\1\15\1\76\1\36\1\51\1\6\1\10\1\106\1\53\1\31\1\20\1\60"+
        "\1\35\1\47\1\52\1\67\1\105\1\24\1\5\1\100\1\45\1\11\1\7\1\1\1\61"+
        "\1\77\1\72\1\25\1\23\1\44\1\12\1\55\1\0\1\62\1\40\1\75\1\2\1\32"+
        "\1\104\1\50\1\22\1\66\1\26\1\102\1\64\1\21\1\30\1\27\1\17\1\33\1"+
        "\103\1\4\1\46\1\16\1\101\1\71\1\37\1\13\1\70\1\57\1\34\1\42\1\14"+
        "\1\74\1\43\1\73\1\56\1\3\1\63\1\54\1\65\1\41\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\43\1\11\1\13\1\41\1\36\1\53\1\1\1\12\1\34\20\1\1\26\1\52"+
            "\1\1\1\56\1\1\1\37\1\57\1\66\1\25\1\54\1\21\1\55\1\46\1\47\1"+
            "\23\1\60\1\61\1\62\1\63\1\64\1\35\1\27\4\1\1\24\1\40\11\1\1"+
            "\31\1\1\1\65\4\1\1\71\1\1\1\72\1\1\1\73\5\1\1\74\1\1\1\67\3"+
            "\1\1\75\1\1\1\51\1\70\3\1\1\22\2\1\1\15\5\1\1\42\1\1\1\33\1"+
            "\1\1\17\1\1\1\14\1\20\1\16\1\103\1\76\1\1\1\6\1\7\1\10\1\106"+
            "\1\1\1\30\1\50\1\32\1\107\1\104\1\110\1\44\1\45\1\2\1\3\1\5"+
            "\1\4\1\77\10\1\1\100\1\105\1\101\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()* loopback of 125:34: ( ( conjunction )* nounphraseContent )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_33);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_24);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_37);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_52 = input.LA(1);

                         
                        int index18_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_52);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_22);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_31);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_58 = input.LA(1);

                         
                        int index18_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_58);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_63 = input.LA(1);

                         
                        int index18_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_63);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_54 = input.LA(1);

                         
                        int index18_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_49 = input.LA(1);

                         
                        int index18_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_49);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_46);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_41);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_29);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_18);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_28);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_43);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_48 = input.LA(1);

                         
                        int index18_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_48);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_47);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_38);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA18_50 = input.LA(1);

                         
                        int index18_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_50);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_61);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA18_57 = input.LA(1);

                         
                        int index18_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_57);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_35);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA18_72 = input.LA(1);

                         
                        int index18_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_72);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA18_62 = input.LA(1);

                         
                        int index18_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_62);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA18_65 = input.LA(1);

                         
                        int index18_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_65);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_30);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_21);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA18_53 = input.LA(1);

                         
                        int index18_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_53);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_40);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA18_70 = input.LA(1);

                         
                        int index18_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_70);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_32);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA18_67 = input.LA(1);

                         
                        int index18_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_67);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA18_60 = input.LA(1);

                         
                        int index18_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_60);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_25);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_34);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA18_69 = input.LA(1);

                         
                        int index18_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_69);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA18_45 = input.LA(1);

                         
                        int index18_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_45);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA18_71 = input.LA(1);

                         
                        int index18_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_71);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_42);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA18_59 = input.LA(1);

                         
                        int index18_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_59);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_56);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_27);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_66);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA18_64 = input.LA(1);

                         
                        int index18_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_64);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_36);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_26);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_20);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA18_55 = input.LA(1);

                         
                        int index18_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_55);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA18_44 = input.LA(1);

                         
                        int index18_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_44);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA18_51 = input.LA(1);

                         
                        int index18_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_51);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_39);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\110\uffff";
    static final String DFA17_eofS =
        "\110\uffff";
    static final String DFA17_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA17_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA17_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA17_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 125:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_16 = input.LA(1);

                         
                        int index17_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA20_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA20_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA20_specialS =
        "\11\uffff\1\2\1\4\1\0\1\5\1\3\1\1}>";
    static final String[] DFA20_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()* loopback of 128:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\110\uffff";
    static final String DFA21_eofS =
        "\1\1\107\uffff";
    static final String DFA21_minS =
        "\1\46\1\uffff\102\0\4\uffff";
    static final String DFA21_maxS =
        "\1\u00b4\1\uffff\102\0\4\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\5\102\uffff\1\1\1\3\1\2\1\4";
    static final String DFA21_specialS =
        "\2\uffff\1\43\1\16\1\62\1\2\1\63\1\65\1\44\1\14\1\66\1\77\1\23"+
        "\1\1\1\17\1\24\1\33\1\10\1\20\1\15\1\101\1\47\1\5\1\52\1\11\1\42"+
        "\1\74\1\32\1\21\1\55\1\61\1\26\1\37\1\75\1\67\1\25\1\50\1\41\1\64"+
        "\1\7\1\40\1\0\1\3\1\6\1\45\1\56\1\70\1\46\1\100\1\71\1\57\1\60\1"+
        "\54\1\31\1\4\1\35\1\36\1\13\1\72\1\76\1\12\1\51\1\27\1\30\1\34\1"+
        "\22\1\73\1\53\4\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\31\1\6\1\10\1\27\1\24\1\46\1\1\1\7\1\22\20\1\1\17\1\45\1"+
            "\1\1\51\1\1\1\25\1\52\1\61\1\16\1\47\1\14\1\50\1\41\1\42\1\35"+
            "\1\53\1\54\1\55\1\56\1\57\1\23\1\20\4\1\1\36\1\26\11\1\1\40"+
            "\1\1\1\60\4\1\1\64\1\1\1\65\1\1\1\66\5\1\1\67\1\1\1\62\3\1\1"+
            "\70\1\1\1\44\1\63\3\1\1\15\2\1\1\2\5\1\1\30\1\1\1\21\1\1\1\12"+
            "\2\1\1\13\1\34\1\76\1\71\1\1\1\3\1\4\1\5\1\101\1\1\1\37\1\43"+
            "\1\11\1\102\1\77\1\103\1\32\1\33\4\1\1\72\10\1\1\73\1\100\1"+
            "\74\1\75",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()+ loopback of 128:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_41);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_42 = input.LA(1);

                         
                        int index21_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_42);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_54 = input.LA(1);

                         
                        int index21_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_54);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA21_43 = input.LA(1);

                         
                        int index21_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_43);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA21_24 = input.LA(1);

                         
                        int index21_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_24);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA21_60 = input.LA(1);

                         
                        int index21_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_60);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA21_57 = input.LA(1);

                         
                        int index21_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_57);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA21_19 = input.LA(1);

                         
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA21_18 = input.LA(1);

                         
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA21_65 = input.LA(1);

                         
                        int index21_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_65);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA21_62 = input.LA(1);

                         
                        int index21_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_62);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA21_63 = input.LA(1);

                         
                        int index21_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_63);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA21_53 = input.LA(1);

                         
                        int index21_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_53);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA21_27 = input.LA(1);

                         
                        int index21_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA21_64 = input.LA(1);

                         
                        int index21_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_64);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA21_55 = input.LA(1);

                         
                        int index21_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_55);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA21_56 = input.LA(1);

                         
                        int index21_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_56);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA21_40 = input.LA(1);

                         
                        int index21_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_40);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA21_25 = input.LA(1);

                         
                        int index21_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred104_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_25);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA21_44 = input.LA(1);

                         
                        int index21_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_44);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA21_47 = input.LA(1);

                         
                        int index21_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_47);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA21_61 = input.LA(1);

                         
                        int index21_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_61);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA21_23 = input.LA(1);

                         
                        int index21_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_23);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA21_67 = input.LA(1);

                         
                        int index21_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_67);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA21_52 = input.LA(1);

                         
                        int index21_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_52);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA21_45 = input.LA(1);

                         
                        int index21_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_45);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA21_50 = input.LA(1);

                         
                        int index21_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_50);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA21_51 = input.LA(1);

                         
                        int index21_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_51);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA21_4 = input.LA(1);

                         
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_46);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA21_49 = input.LA(1);

                         
                        int index21_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_49);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA21_58 = input.LA(1);

                         
                        int index21_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_58);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA21_66 = input.LA(1);

                         
                        int index21_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_66);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA21_26 = input.LA(1);

                         
                        int index21_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_26);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA21_59 = input.LA(1);

                         
                        int index21_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_59);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred104_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA21_48 = input.LA(1);

                         
                        int index21_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_48);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA21_20 = input.LA(1);

                         
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\32\uffff";
    static final String DFA22_eofS =
        "\32\uffff";
    static final String DFA22_minS =
        "\1\46\7\uffff\1\0\21\uffff";
    static final String DFA22_maxS =
        "\1\u009e\7\uffff\1\0\21\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\27\uffff\1\2";
    static final String DFA22_specialS =
        "\10\uffff\1\0\21\uffff}>";
    static final String[] DFA22_transitionS = {
            "\5\1\2\uffff\2\1\20\uffff\1\1\4\uffff\1\1\2\uffff\1\1\1\uffff"+
            "\1\1\11\uffff\2\1\5\uffff\1\1\47\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "131:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\17\uffff";
    static final String DFA23_eofS =
        "\17\uffff";
    static final String DFA23_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA23_specialS =
        "\10\uffff\1\0\1\3\1\5\1\2\1\1\1\4\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\7\1\4\1\6\2\7\2\uffff\1\5\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "134:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\30\uffff";
    static final String DFA25_eofS =
        "\30\uffff";
    static final String DFA25_minS =
        "\1\46\4\0\1\uffff\10\0\12\uffff";
    static final String DFA25_maxS =
        "\1\u0099\4\0\1\uffff\10\0\12\uffff";
    static final String DFA25_acceptS =
        "\5\uffff\1\1\11\uffff\1\2\10\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\12\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\17\1\13\1\15\2\17\2\uffff\1\14\1\17\20\uffff\1\7\4\uffff"+
            "\1\17\2\uffff\1\6\1\uffff\1\3\11\uffff\1\17\1\5\5\uffff\1\17"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\17\1\uffff\1\17\1\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\1\10\1\11\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "134:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA27_static {
    static final String DFA27_eotS =
        "\u0092\uffff";
    static final String DFA27_eofS =
        "\1\3\u0091\uffff";
    static final String DFA27_minS =
        "\1\46\2\0\u008f\uffff";
    static final String DFA27_maxS =
        "\1\u00b4\2\0\u008f\uffff";
    static final String DFA27_acceptS =
        "\3\uffff\1\2\u008d\uffff\1\1";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\u008f\uffff}>";
    static final String[] DFA27_transitionS = {
            "\137\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_static.DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_static.DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_static.DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_static.DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_static.DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_static.DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 134:71: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA29_static {
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\17\uffff";
    static final String DFA29_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\0\1\1\1\3\1\5\1\2\1\4\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\4\1\6\2\7\2\uffff\1\5\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_static.DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_static.DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_static.DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_static.DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_static.DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_static.DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "137:16: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA31_static {
    static final String DFA31_eotS =
        "\30\uffff";
    static final String DFA31_eofS =
        "\30\uffff";
    static final String DFA31_minS =
        "\1\46\4\0\1\uffff\10\0\12\uffff";
    static final String DFA31_maxS =
        "\1\u0099\4\0\1\uffff\10\0\12\uffff";
    static final String DFA31_acceptS =
        "\5\uffff\1\1\11\uffff\1\2\10\uffff";
    static final String DFA31_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\12\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\17\1\13\1\15\2\17\2\uffff\1\14\1\17\20\uffff\1\7\4\uffff"+
            "\1\17\2\uffff\1\6\1\uffff\1\3\11\uffff\1\17\1\5\5\uffff\1\17"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\17\1\uffff\1\17\1\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\1\10\1\11\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_static.DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_static.DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_static.DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_static.DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_static.DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_static.DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "137:26: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\67\uffff";
    static final String DFA45_eofS =
        "\1\1\66\uffff";
    static final String DFA45_minS =
        "\1\46\1\uffff\64\0\1\uffff";
    static final String DFA45_maxS =
        "\1\u00b4\1\uffff\64\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA45_specialS =
        "\2\uffff\1\15\1\25\1\36\1\37\1\57\1\47\1\40\1\0\1\32\1\33\1\45"+
        "\1\27\1\26\1\2\1\31\1\60\1\56\1\14\1\43\1\53\1\21\1\61\1\16\1\4"+
        "\1\3\1\17\1\7\1\52\1\41\1\20\1\1\1\54\1\42\1\11\1\23\1\62\1\6\1"+
        "\44\1\55\1\22\1\46\1\5\1\24\1\51\1\12\1\63\1\50\1\10\1\34\1\30\1"+
        "\13\1\35\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\23\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()+ loopback of 141:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA45_32 = input.LA(1);

                         
                        int index45_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_32);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA45_15 = input.LA(1);

                         
                        int index45_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA45_26 = input.LA(1);

                         
                        int index45_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_26);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA45_25 = input.LA(1);

                         
                        int index45_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_25);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA45_43 = input.LA(1);

                         
                        int index45_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_43);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA45_38 = input.LA(1);

                         
                        int index45_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_38);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA45_28 = input.LA(1);

                         
                        int index45_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_28);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA45_49 = input.LA(1);

                         
                        int index45_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_49);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA45_35 = input.LA(1);

                         
                        int index45_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_35);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA45_46 = input.LA(1);

                         
                        int index45_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_46);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA45_52 = input.LA(1);

                         
                        int index45_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_52);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA45_19 = input.LA(1);

                         
                        int index45_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_19);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA45_2 = input.LA(1);

                         
                        int index45_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_2);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA45_24 = input.LA(1);

                         
                        int index45_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_24);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA45_27 = input.LA(1);

                         
                        int index45_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_27);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA45_31 = input.LA(1);

                         
                        int index45_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_31);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA45_22 = input.LA(1);

                         
                        int index45_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_22);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA45_41 = input.LA(1);

                         
                        int index45_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_41);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA45_36 = input.LA(1);

                         
                        int index45_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_36);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA45_44 = input.LA(1);

                         
                        int index45_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_44);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA45_3 = input.LA(1);

                         
                        int index45_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_3);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA45_14 = input.LA(1);

                         
                        int index45_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_14);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA45_13 = input.LA(1);

                         
                        int index45_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_13);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA45_51 = input.LA(1);

                         
                        int index45_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_51);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA45_16 = input.LA(1);

                         
                        int index45_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_16);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA45_10 = input.LA(1);

                         
                        int index45_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_10);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA45_11 = input.LA(1);

                         
                        int index45_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_11);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA45_50 = input.LA(1);

                         
                        int index45_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_50);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA45_53 = input.LA(1);

                         
                        int index45_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_53);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA45_4 = input.LA(1);

                         
                        int index45_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_4);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA45_5 = input.LA(1);

                         
                        int index45_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_5);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA45_8 = input.LA(1);

                         
                        int index45_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_8);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA45_30 = input.LA(1);

                         
                        int index45_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_30);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA45_34 = input.LA(1);

                         
                        int index45_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_34);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA45_20 = input.LA(1);

                         
                        int index45_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_20);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA45_39 = input.LA(1);

                         
                        int index45_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_39);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA45_12 = input.LA(1);

                         
                        int index45_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_12);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA45_42 = input.LA(1);

                         
                        int index45_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_42);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA45_7 = input.LA(1);

                         
                        int index45_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_7);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA45_48 = input.LA(1);

                         
                        int index45_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_48);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA45_45 = input.LA(1);

                         
                        int index45_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_45);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA45_29 = input.LA(1);

                         
                        int index45_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_29);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA45_21 = input.LA(1);

                         
                        int index45_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_21);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA45_33 = input.LA(1);

                         
                        int index45_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_33);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA45_40 = input.LA(1);

                         
                        int index45_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_40);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA45_18 = input.LA(1);

                         
                        int index45_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_18);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA45_6 = input.LA(1);

                         
                        int index45_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_6);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA45_17 = input.LA(1);

                         
                        int index45_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_17);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA45_23 = input.LA(1);

                         
                        int index45_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_23);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA45_37 = input.LA(1);

                         
                        int index45_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_37);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA45_47 = input.LA(1);

                         
                        int index45_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA40_static {
    static final String DFA40_eotS =
        "\53\uffff";
    static final String DFA40_eofS =
        "\1\1\52\uffff";
    static final String DFA40_minS =
        "\1\46\1\uffff\50\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA40_specialS =
        "\2\uffff\1\13\1\42\1\32\1\45\1\21\1\16\1\0\1\17\1\23\1\20\1\15"+
        "\1\37\1\47\1\25\1\26\1\11\1\36\1\5\1\27\1\46\1\1\1\12\1\6\1\33\1"+
        "\7\1\3\1\24\1\22\1\44\1\2\1\31\1\41\1\35\1\14\1\34\1\40\1\10\1\30"+
        "\1\4\1\43\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\57\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\51\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_static.DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_static.DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_static.DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_static.DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_static.DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_static.DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 141:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA40_22 = input.LA(1);

                         
                        int index40_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_22);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA40_31 = input.LA(1);

                         
                        int index40_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_31);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA40_27 = input.LA(1);

                         
                        int index40_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_27);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA40_40 = input.LA(1);

                         
                        int index40_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_40);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA40_19 = input.LA(1);

                         
                        int index40_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA40_24 = input.LA(1);

                         
                        int index40_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_24);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA40_26 = input.LA(1);

                         
                        int index40_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_26);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA40_38 = input.LA(1);

                         
                        int index40_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_38);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA40_23 = input.LA(1);

                         
                        int index40_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_23);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA40_29 = input.LA(1);

                         
                        int index40_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA40_28 = input.LA(1);

                         
                        int index40_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_28);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA40_20 = input.LA(1);

                         
                        int index40_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_20);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA40_32 = input.LA(1);

                         
                        int index40_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_32);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA40_25 = input.LA(1);

                         
                        int index40_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_25);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA40_34 = input.LA(1);

                         
                        int index40_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_34);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA40_37 = input.LA(1);

                         
                        int index40_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_37);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA40_33 = input.LA(1);

                         
                        int index40_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_33);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA40_30 = input.LA(1);

                         
                        int index40_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_30);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA40_21 = input.LA(1);

                         
                        int index40_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_21);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\13\uffff";
    static final String DFA42_eofS =
        "\1\1\12\uffff";
    static final String DFA42_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA42_specialS =
        "\6\uffff\1\1\1\2\1\3\1\0\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()* loopback of 141:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA43_static {
    static final String DFA43_eotS =
        "\17\uffff";
    static final String DFA43_eofS =
        "\1\7\16\uffff";
    static final String DFA43_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA43_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA43_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA43_specialS =
        "\10\uffff\1\1\1\0\1\5\1\3\1\2\1\4\1\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_static.DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_static.DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_static.DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_static.DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_static.DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_static.DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "141:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA43_11 = input.LA(1);

                         
                        int index43_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA43_13 = input.LA(1);

                         
                        int index43_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA43_10 = input.LA(1);

                         
                        int index43_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\u0092\uffff";
    static final String DFA49_eofS =
        "\1\13\u0091\uffff";
    static final String DFA49_minS =
        "\1\46\12\0\1\uffff\2\0\1\uffff\1\0\1\uffff\1\0\32\uffff\1\0\1\uffff"+
        "\1\0\34\uffff\22\0\50\uffff\1\0\14\uffff";
    static final String DFA49_maxS =
        "\1\u00b4\12\0\1\uffff\2\0\1\uffff\1\0\1\uffff\1\0\32\uffff\1\0"+
        "\1\uffff\1\0\34\uffff\22\0\50\uffff\1\0\14\uffff";
    static final String DFA49_acceptS =
        "\13\uffff\1\2\u0085\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\1\uffff\1\14\1\uffff\1\15\32\uffff\1\16\1\uffff\1\17\34\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\14\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\116\1\117\1\115\1\123\1\124"+
            "\1\133\1\134\1\120\1\132\1\125\1\127\1\121\1\122\1\131\1\130"+
            "\1\126\1\13\1\54\7\13\1\56\74\13\1\15\1\13\1\u0085\11\13\1\14"+
            "\1\21\1\17\2\13\1\114\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\113\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 141:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_15 = input.LA(1);

                         
                        int index49_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_17 = input.LA(1);

                         
                        int index49_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_44 = input.LA(1);

                         
                        int index49_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_44);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_46);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_75 = input.LA(1);

                         
                        int index49_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_75);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_76 = input.LA(1);

                         
                        int index49_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_76);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_77 = input.LA(1);

                         
                        int index49_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_77);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_78 = input.LA(1);

                         
                        int index49_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_78);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_79 = input.LA(1);

                         
                        int index49_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_79);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_80);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_81);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_82);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_83);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_84);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_85);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_86 = input.LA(1);

                         
                        int index49_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_86);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_87 = input.LA(1);

                         
                        int index49_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_87);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_88 = input.LA(1);

                         
                        int index49_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_88);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA49_89 = input.LA(1);

                         
                        int index49_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_89);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA49_90 = input.LA(1);

                         
                        int index49_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_90);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA49_91 = input.LA(1);

                         
                        int index49_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_91);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA49_92 = input.LA(1);

                         
                        int index49_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_92);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA49_133 = input.LA(1);

                         
                        int index49_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_133);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA50_static {
    static final String DFA50_eotS =
        "\60\uffff";
    static final String DFA50_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA50_minS =
        "\1\125\11\uffff\1\45\36\uffff\1\46\1\uffff\1\45\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA50_maxS =
        "\1\u00b0\11\uffff\1\45\36\uffff\1\u00b4\1\uffff\1\45\1\u00b4\1"+
        "\45\1\0\1\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA50_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\51\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\153\52\1\53\43\52",
            "",
            "\1\54",
            "\72\52\1\55\124\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_static.DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_static.DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_static.DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_static.DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_static.DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_static.DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "142:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA50_46 = input.LA(1);

                         
                        int index50_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index50_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA52_static {
    static final String DFA52_eotS =
        "\130\uffff";
    static final String DFA52_eofS =
        "\130\uffff";
    static final String DFA52_minS =
        "\1\46\2\uffff\16\0\1\uffff\3\0\3\uffff\10\0\70\uffff";
    static final String DFA52_maxS =
        "\1\u00b4\2\uffff\16\0\1\uffff\3\0\3\uffff\10\0\70\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\1\1\2\16\uffff\1\6\4\uffff\1\10\11\uffff\1\12\1\14\1"+
        "\15\1\17\1\23\1\25\1\30\1\32\1\34\1\35\1\37\1\40\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\1\47\1\52\1\54\1\55\1\56\1\57\1\61\1\62\1\63\5\uffff"+
        "\1\64\1\65\1\66\1\3\1\5\1\7\1\26\1\4\1\21\1\53\1\31\1\60\1\27\1"+
        "\11\1\36\1\16\1\13\1\20\1\22\1\24\1\50\1\67\1\51\1\33";
    static final String DFA52_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\uffff\1\16\1\17\1\20\3\uffff\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\70\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\36\1\15\1\17\1\34\1\31\1\45\1\uffff\1\16\1\26\20\uffff\1"+
            "\11\1\44\1\uffff\1\50\1\uffff\1\32\1\51\1\60\1\10\1\46\1\6\1"+
            "\47\1\37\1\40\1\22\1\52\1\53\1\54\1\55\1\56\1\30\1\20\4\uffff"+
            "\1\23\1\33\11\uffff\1\21\1\uffff\1\57\4\uffff\1\63\1\uffff\1"+
            "\64\1\uffff\1\65\5\uffff\1\66\1\uffff\1\61\3\uffff\1\67\1\uffff"+
            "\1\43\1\62\3\uffff\1\7\2\uffff\1\4\5\uffff\1\35\1\uffff\1\26"+
            "\1\uffff\1\3\2\uffff\1\5\1\21\1\72\1\70\1\uffff\1\12\1\13\1"+
            "\14\1\100\1\uffff\1\24\1\41\1\42\1\101\1\72\1\102\1\1\1\2\4"+
            "\uffff\1\71\10\uffff\4\72",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_static.DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_static.DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_static.DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_static.DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_static.DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_static.DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "149:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA52_4 = input.LA(1);

                         
                        int index52_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index52_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA52_5 = input.LA(1);

                         
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred216_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA52_7 = input.LA(1);

                         
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred221_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred203_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA52_19 = input.LA(1);

                         
                        int index52_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index52_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA52_20 = input.LA(1);

                         
                        int index52_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index52_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA52_24 = input.LA(1);

                         
                        int index52_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index52_24);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA52_25 = input.LA(1);

                         
                        int index52_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index52_25);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA52_26 = input.LA(1);

                         
                        int index52_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index52_26);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA52_27 = input.LA(1);

                         
                        int index52_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 84;}

                         
                        input.seek(index52_27);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA52_28 = input.LA(1);

                         
                        int index52_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 85;}

                         
                        input.seek(index52_28);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA52_29 = input.LA(1);

                         
                        int index52_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 86;}

                         
                        input.seek(index52_29);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA52_30 = input.LA(1);

                         
                        int index52_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred216_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index52_30);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA52_31 = input.LA(1);

                         
                        int index52_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 87;}

                         
                        input.seek(index52_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA54_static {
    static final String DFA54_eotS =
        "\45\uffff";
    static final String DFA54_eofS =
        "\45\uffff";
    static final String DFA54_minS =
        "\1\47\36\0\6\uffff";
    static final String DFA54_maxS =
        "\1\u00a9\36\0\6\uffff";
    static final String DFA54_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA54_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_static.DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_static.DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_static.DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_static.DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_static.DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_static.DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "154:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA54_11 = input.LA(1);

                         
                        int index54_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA54_15 = input.LA(1);

                         
                        int index54_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA54_16 = input.LA(1);

                         
                        int index54_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA54_17 = input.LA(1);

                         
                        int index54_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA54_19 = input.LA(1);

                         
                        int index54_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred232_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA54_20 = input.LA(1);

                         
                        int index54_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA54_21 = input.LA(1);

                         
                        int index54_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA54_22 = input.LA(1);

                         
                        int index54_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA54_23 = input.LA(1);

                         
                        int index54_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA54_24 = input.LA(1);

                         
                        int index54_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA54_25 = input.LA(1);

                         
                        int index54_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA54_26 = input.LA(1);

                         
                        int index54_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA54_27 = input.LA(1);

                         
                        int index54_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA54_28 = input.LA(1);

                         
                        int index54_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA54_29 = input.LA(1);

                         
                        int index54_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA54_30 = input.LA(1);

                         
                        int index54_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA56_static {
    static final String DFA56_eotS =
        "\17\uffff";
    static final String DFA56_eofS =
        "\17\uffff";
    static final String DFA56_minS =
        "\1\47\1\uffff\6\45\1\uffff\6\0";
    static final String DFA56_maxS =
        "\1\u00a7\1\uffff\6\45\1\uffff\6\0";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA56_specialS =
        "\11\uffff\1\3\1\1\1\2\1\4\1\0\1\5}>";
    static final String[] DFA56_transitionS = {
            "\1\5\1\7\4\uffff\1\6\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\12"+
            "\uffff\1\1\55\uffff\1\1\2\uffff\1\1\11\uffff\1\1\2\uffff\1\1"+
            "\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_static.DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_static.DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_static.DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_static.DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_static.DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_static.DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 160:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA58_static {
    static final String DFA58_eotS =
        "\27\uffff";
    static final String DFA58_eofS =
        "\27\uffff";
    static final String DFA58_minS =
        "\1\47\1\uffff\12\45\12\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00a9\1\uffff\12\45\12\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA58_specialS =
        "\14\uffff\1\4\1\3\1\0\1\7\1\11\1\2\1\5\1\6\1\1\1\10\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_static.DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_static.DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_static.DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_static.DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_static.DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_static.DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 166:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA58_20 = input.LA(1);

                         
                        int index58_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_20);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA58_12 = input.LA(1);

                         
                        int index58_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA58_18 = input.LA(1);

                         
                        int index58_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA58_19 = input.LA(1);

                         
                        int index58_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA58_21 = input.LA(1);

                         
                        int index58_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA58_16 = input.LA(1);

                         
                        int index58_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA64_static {
    static final String DFA64_eotS =
        "\27\uffff";
    static final String DFA64_eofS =
        "\27\uffff";
    static final String DFA64_minS =
        "\1\47\12\45\1\uffff\12\0\1\uffff";
    static final String DFA64_maxS =
        "\1\u00a9\12\45\1\uffff\12\0\1\uffff";
    static final String DFA64_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA64_specialS =
        "\14\uffff\1\11\1\10\1\7\1\1\1\6\1\3\1\5\1\0\1\4\1\2\1\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_static.DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_static.DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_static.DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_static.DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_static.DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_static.DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "171:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA64_19 = input.LA(1);

                         
                        int index64_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_19);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA64_15 = input.LA(1);

                         
                        int index64_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA64_21 = input.LA(1);

                         
                        int index64_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_21);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA64_17 = input.LA(1);

                         
                        int index64_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA64_20 = input.LA(1);

                         
                        int index64_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA64_18 = input.LA(1);

                         
                        int index64_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA64_16 = input.LA(1);

                         
                        int index64_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA64_14 = input.LA(1);

                         
                        int index64_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_14);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA64_13 = input.LA(1);

                         
                        int index64_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_13);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA64_12 = input.LA(1);

                         
                        int index64_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA76_static {
    static final String DFA76_eotS =
        "\u0092\uffff";
    static final String DFA76_eofS =
        "\1\1\u0091\uffff";
    static final String DFA76_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\1\uffff\14\0\167\uffff";
    static final String DFA76_maxS =
        "\1\u00b4\4\uffff\6\0\1\uffff\2\0\1\uffff\14\0\167\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA76_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\1\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\167\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\1\10\1\12\4\1\1\11\21\1\1\27\7\1\1\26\1\1\1\22\3\1\1\24"+
            "\6\1\1\30\4\1\1\25\12\1\1\32\35\1\1\23\2\1\1\15\11\1\1\20\1"+
            "\1\1\14\1\21\1\17\3\1\1\5\1\6\1\7\2\1\1\31\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_static.DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_static.DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_static.DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_static.DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_static.DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_static.DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()* loopback of 192:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA76_5 = input.LA(1);

                         
                        int index76_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_6 = input.LA(1);

                         
                        int index76_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA76_7 = input.LA(1);

                         
                        int index76_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA76_12 = input.LA(1);

                         
                        int index76_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA76_13 = input.LA(1);

                         
                        int index76_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA76_15 = input.LA(1);

                         
                        int index76_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_15);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA76_16 = input.LA(1);

                         
                        int index76_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_16);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA76_17 = input.LA(1);

                         
                        int index76_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_17);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA76_18 = input.LA(1);

                         
                        int index76_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_18);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA76_19 = input.LA(1);

                         
                        int index76_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_19);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA76_20 = input.LA(1);

                         
                        int index76_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_20);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA76_21 = input.LA(1);

                         
                        int index76_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_21);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA76_22 = input.LA(1);

                         
                        int index76_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_22);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA76_23 = input.LA(1);

                         
                        int index76_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_23);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA76_24 = input.LA(1);

                         
                        int index76_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_24);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA76_25 = input.LA(1);

                         
                        int index76_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_25);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA76_26 = input.LA(1);

                         
                        int index76_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\25\uffff";
    static final String DFA75_eofS =
        "\25\uffff";
    static final String DFA75_minS =
        "\1\47\15\uffff\1\0\6\uffff";
    static final String DFA75_maxS =
        "\1\u009c\15\uffff\1\0\6\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA75_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA75_transitionS = {
            "\2\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\11\uffff\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 192:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_14 = input.LA(1);

                         
                        int index75_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA82_static {
    static final String DFA82_eotS =
        "\33\uffff";
    static final String DFA82_eofS =
        "\1\1\32\uffff";
    static final String DFA82_minS =
        "\1\47\1\uffff\21\0\10\uffff";
    static final String DFA82_maxS =
        "\1\u009c\1\uffff\21\0\10\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\11\21\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA82_specialS =
        "\2\uffff\1\0\1\6\1\17\1\2\1\1\1\20\1\3\1\11\1\5\1\4\1\15\1\16\1"+
        "\12\1\13\1\14\1\7\1\10\10\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\11\1\13\4\uffff\1\12\21\uffff\1\20\7\uffff\1\17\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\21\4\uffff\1\15\12\uffff\1\1\35"+
            "\uffff\1\5\2\uffff\1\16\11\uffff\1\2\2\uffff\1\3\4\uffff\1\6"+
            "\1\7\1\10\2\uffff\1\22",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_static.DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_static.DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_static.DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_static.DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_static.DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_static.DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()+ loopback of 199:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA82_2 = input.LA(1);

                         
                        int index82_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA82_6 = input.LA(1);

                         
                        int index82_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA82_5 = input.LA(1);

                         
                        int index82_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA82_8 = input.LA(1);

                         
                        int index82_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA82_11 = input.LA(1);

                         
                        int index82_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA82_10 = input.LA(1);

                         
                        int index82_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA82_3 = input.LA(1);

                         
                        int index82_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_3);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA82_17 = input.LA(1);

                         
                        int index82_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_17);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA82_18 = input.LA(1);

                         
                        int index82_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA82_9 = input.LA(1);

                         
                        int index82_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_9);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA82_14 = input.LA(1);

                         
                        int index82_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_14);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA82_15 = input.LA(1);

                         
                        int index82_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred266_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_15);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA82_16 = input.LA(1);

                         
                        int index82_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred267_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_16);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA82_12 = input.LA(1);

                         
                        int index82_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_12);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA82_13 = input.LA(1);

                         
                        int index82_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_13);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA82_4 = input.LA(1);

                         
                        int index82_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_4);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA82_7 = input.LA(1);

                         
                        int index82_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA85_static {
    static final String DFA85_eotS =
        "\17\uffff";
    static final String DFA85_eofS =
        "\1\7\16\uffff";
    static final String DFA85_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA85_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA85_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA85_specialS =
        "\10\uffff\1\3\1\2\1\4\1\0\1\5\1\1\1\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_static.DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_static.DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_static.DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_static.DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_static.DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_static.DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "203:46: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA85_11 = input.LA(1);

                         
                        int index85_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA85_13 = input.LA(1);

                         
                        int index85_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA85_9 = input.LA(1);

                         
                        int index85_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA85_8 = input.LA(1);

                         
                        int index85_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA85_10 = input.LA(1);

                         
                        int index85_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA85_12 = input.LA(1);

                         
                        int index85_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA86_static {
    static final String DFA86_eotS =
        "\u0093\uffff";
    static final String DFA86_eofS =
        "\1\11\u0092\uffff";
    static final String DFA86_minS =
        "\1\46\10\0\u008a\uffff";
    static final String DFA86_maxS =
        "\1\u00b4\10\0\u008a\uffff";
    static final String DFA86_acceptS =
        "\11\uffff\1\3\u0087\uffff\1\1\1\2";
    static final String DFA86_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\u008a\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\7\40\11\1\10\1\11\1\3\70\11\1\4\10\11\1\5\1\11\1\6\1\11"+
            "\1\1\2\11\1\2\42\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_static.DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_static.DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_static.DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_static.DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_static.DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_static.DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "203:51: ( numericReferenceOrQuantity | nnchementity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA86_1 = input.LA(1);

                         
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred272_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred272_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA86_2 = input.LA(1);

                         
                        int index86_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred272_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred272_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA86_3 = input.LA(1);

                         
                        int index86_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA86_4 = input.LA(1);

                         
                        int index86_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA86_5 = input.LA(1);

                         
                        int index86_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred272_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA86_6 = input.LA(1);

                         
                        int index86_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred272_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA86_7 = input.LA(1);

                         
                        int index86_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred272_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA86_8 = input.LA(1);

                         
                        int index86_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA87_static {
    static final String DFA87_eotS =
        "\u0092\uffff";
    static final String DFA87_eofS =
        "\1\1\u0091\uffff";
    static final String DFA87_minS =
        "\1\46\23\uffff\4\0\172\uffff";
    static final String DFA87_maxS =
        "\1\u00b4\23\uffff\4\0\172\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA87_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\172\uffff}>";
    static final String[] DFA87_transitionS = {
            "\43\1\1\26\70\1\1\27\14\1\1\24\2\1\1\25\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_static.DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_static.DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_static.DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_static.DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_static.DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_static.DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "()* loopback of 203:97: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA87_20 = input.LA(1);

                         
                        int index87_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA87_21 = input.LA(1);

                         
                        int index87_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA87_22 = input.LA(1);

                         
                        int index87_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA87_23 = input.LA(1);

                         
                        int index87_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA88_static {
    static final String DFA88_eotS =
        "\u0092\uffff";
    static final String DFA88_eofS =
        "\1\5\u0091\uffff";
    static final String DFA88_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA88_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA88_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA88_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA88_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_static.DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_static.DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_static.DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_static.DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_static.DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_static.DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "203:107: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA88_1 = input.LA(1);

                         
                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred275_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA88_3 = input.LA(1);

                         
                        int index88_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred275_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA88_4 = input.LA(1);

                         
                        int index88_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred275_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA89_static {
    static final String DFA89_eotS =
        "\15\uffff";
    static final String DFA89_eofS =
        "\1\5\7\uffff\1\5\4\uffff";
    static final String DFA89_minS =
        "\1\46\4\45\1\uffff\2\0\1\46\1\0\1\uffff\1\45\1\0";
    static final String DFA89_maxS =
        "\1\u00b4\4\45\1\uffff\2\0\1\u00b4\1\0\1\uffff\1\45\1\0";
    static final String DFA89_acceptS =
        "\5\uffff\1\2\4\uffff\1\1\2\uffff";
    static final String DFA89_specialS =
        "\6\uffff\1\3\1\1\1\uffff\1\2\2\uffff\1\0}>";
    static final String[] DFA89_transitionS = {
            "\56\5\1\1\57\5\1\3\1\5\1\4\1\5\1\2\54\5",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "",
            "\1\uffff",
            "\1\uffff",
            "\56\5\1\13\140\5",
            "\1\uffff",
            "",
            "\1\14",
            "\1\uffff"
    };
    }

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_static.DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_static.DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_static.DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_static.DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_static.DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_static.DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_static.DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_static.DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "205:34: ( afterOscarCompoundStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA89_12 = input.LA(1);

                         
                        int index89_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA89_7 = input.LA(1);

                         
                        int index89_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA89_9 = input.LA(1);

                         
                        int index89_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA89_6 = input.LA(1);

                         
                        int index89_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA100_static {
    static final String DFA100_eotS =
        "\20\uffff";
    static final String DFA100_eofS =
        "\20\uffff";
    static final String DFA100_minS =
        "\1\47\5\0\12\uffff";
    static final String DFA100_maxS =
        "\1\u0099\5\0\12\uffff";
    static final String DFA100_acceptS =
        "\6\uffff\1\2\1\uffff\1\3\6\uffff\1\1";
    static final String DFA100_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\12\uffff}>";
    static final String[] DFA100_transitionS = {
            "\2\10\4\uffff\1\10\21\uffff\1\6\7\uffff\1\6\1\uffff\1\3\12"+
            "\uffff\1\10\55\uffff\1\4\2\uffff\1\5\11\uffff\1\1\2\uffff\1"+
            "\2\4\uffff\3\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_static.DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_static.DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_static.DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_static.DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_static.DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_static.DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "212:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA100_1 = input.LA(1);

                         
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA100_2 = input.LA(1);

                         
                        int index100_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index100_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA100_3 = input.LA(1);

                         
                        int index100_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index100_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA100_4 = input.LA(1);

                         
                        int index100_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index100_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA100_5 = input.LA(1);

                         
                        int index100_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index100_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA101_static {
    static final String DFA101_eotS =
        "\33\uffff";
    static final String DFA101_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA101_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA101_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA101_specialS =
        "\13\uffff\1\1\10\uffff\1\0\6\uffff}>";
    static final String[] DFA101_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_static.DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_static.DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_static.DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_static.DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_static.DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_static.DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "212:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA101_20 = input.LA(1);

                         
                        int index101_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA101_11 = input.LA(1);

                         
                        int index101_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\13\uffff";
    static final String DFA104_eofS =
        "\13\uffff";
    static final String DFA104_minS =
        "\1\47\1\uffff\1\0\10\uffff";
    static final String DFA104_maxS =
        "\1\u0099\1\uffff\1\0\10\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\6\uffff";
    static final String DFA104_specialS =
        "\2\uffff\1\0\10\uffff}>";
    static final String[] DFA104_transitionS = {
            "\2\4\4\uffff\1\4\46\uffff\1\4\60\uffff\1\1\11\uffff\1\2\2\uffff"+
            "\1\1\4\uffff\3\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "215:64: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA104_2 = input.LA(1);

                         
                        int index104_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index104_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\u0092\uffff";
    static final String DFA110_eofS =
        "\1\2\u0091\uffff";
    static final String DFA110_minS =
        "\1\46\1\0\13\uffff\6\0\3\uffff\1\0\173\uffff";
    static final String DFA110_maxS =
        "\1\u00b4\1\0\13\uffff\6\0\3\uffff\1\0\173\uffff";
    static final String DFA110_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA110_specialS =
        "\1\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff\1\7\173\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\2\1\20\1\22\4\2\1\21\46\2\1\26\72\2\1\1\7\2\1\15\1\16\1"+
            "\17\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()+ loopback of 218:86: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_1 = input.LA(1);

                         
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_13 = input.LA(1);

                         
                        int index110_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_14 = input.LA(1);

                         
                        int index110_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_15 = input.LA(1);

                         
                        int index110_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_15);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA110_16 = input.LA(1);

                         
                        int index110_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA110_17 = input.LA(1);

                         
                        int index110_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA110_18 = input.LA(1);

                         
                        int index110_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA110_22 = input.LA(1);

                         
                        int index110_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\15\uffff";
    static final String DFA111_eofS =
        "\15\uffff";
    static final String DFA111_minS =
        "\1\47\7\uffff\2\0\3\uffff";
    static final String DFA111_maxS =
        "\1\u0099\7\uffff\2\0\3\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\1\uffff\1\2";
    static final String DFA111_specialS =
        "\10\uffff\1\0\1\1\3\uffff}>";
    static final String[] DFA111_transitionS = {
            "\2\1\4\uffff\1\1\33\uffff\1\12\12\uffff\1\1\55\uffff\1\12\2"+
            "\uffff\1\14\11\uffff\1\10\2\uffff\1\11\4\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()* loopback of 221:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\13\uffff";
    static final String DFA112_eofS =
        "\1\2\12\uffff";
    static final String DFA112_minS =
        "\1\46\1\0\1\uffff\7\0\1\uffff";
    static final String DFA112_maxS =
        "\1\u00b4\1\0\1\uffff\7\0\1\uffff";
    static final String DFA112_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA112_specialS =
        "\1\uffff\1\6\1\uffff\1\4\1\3\1\5\1\2\1\1\1\0\1\7\1\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\2\1\6\1\10\4\2\1\7\46\2\1\11\72\2\1\1\7\2\1\3\1\4\1\5\33"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()+ loopback of 221:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_5);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA114_static {
    static final String DFA114_eotS =
        "\u0095\uffff";
    static final String DFA114_eofS =
        "\1\1\u0094\uffff";
    static final String DFA114_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA114_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\5\u008f\uffff\1\1\1\3\1\4\1\2";
    static final String DFA114_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0081\uffff}>";
    static final String[] DFA114_transitionS = {
            "\43\1\1\22\70\1\1\23\2\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_static.DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_static.DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_static.DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_static.DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_static.DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_static.DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "()* loopback of 223:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA114_4 = input.LA(1);

                         
                        int index114_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA114_16 = input.LA(1);

                         
                        int index114_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA114_17 = input.LA(1);

                         
                        int index114_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA115_static {
    static final String DFA115_eotS =
        "\33\uffff";
    static final String DFA115_eofS =
        "\1\2\2\uffff\1\2\4\uffff\2\2\1\uffff\1\2\6\uffff\4\2\3\uffff\2"+
        "\2";
    static final String DFA115_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\2\46\1\0\1\46\2\45\1\uffff\3\45\4"+
        "\46\1\0\2\45\2\46";
    static final String DFA115_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\2\u00b4\1\0\1\u00b4\2\45\1\uffff"+
        "\3\45\4\u00b4\1\0\2\45\2\u00b4";
    static final String DFA115_acceptS =
        "\2\uffff\1\2\13\uffff\1\1\14\uffff";
    static final String DFA115_specialS =
        "\12\uffff\1\0\13\uffff\1\1\4\uffff}>";
    static final String[] DFA115_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\5\21\2\1\6\123\2\1\7\3\2\1\4\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\21\127\2\1\17\35\2",
            "\1\22",
            "\1\23",
            "",
            "\1\24",
            "\1\25",
            "\1\26",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\1\uffff",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2"
    };
    }

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_static.DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_static.DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_static.DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_static.DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_static.DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_static.DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "229:68: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA115_10 = input.LA(1);

                         
                        int index115_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA115_22 = input.LA(1);

                         
                        int index115_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\26\uffff";
    static final String DFA117_eofS =
        "\26\uffff";
    static final String DFA117_minS =
        "\1\46\2\0\2\uffff\4\0\6\uffff\1\0\6\uffff";
    static final String DFA117_maxS =
        "\1\u0099\2\0\2\uffff\4\0\6\uffff\1\0\6\uffff";
    static final String DFA117_acceptS =
        "\3\uffff\1\1\5\uffff\1\2\6\uffff\1\3\5\uffff";
    static final String DFA117_specialS =
        "\1\uffff\1\0\1\1\2\uffff\1\2\1\3\1\4\1\5\6\uffff\1\6\6\uffff}>";
    static final String[] DFA117_transitionS = {
            "\3\20\2\11\2\uffff\1\7\1\10\20\uffff\1\11\4\uffff\1\11\2\uffff"+
            "\1\17\1\uffff\1\3\11\uffff\1\11\6\uffff\1\11\47\uffff\1\3\10"+
            "\uffff\1\20\1\uffff\1\5\1\uffff\1\1\2\uffff\1\2\4\uffff\1\6"+
            "\2\20",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "231:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred321_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred321_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA117_6 = input.LA(1);

                         
                        int index117_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA117_7 = input.LA(1);

                         
                        int index117_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA117_8 = input.LA(1);

                         
                        int index117_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA117_15 = input.LA(1);

                         
                        int index117_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA116_static {
    static final String DFA116_eotS =
        "\26\uffff";
    static final String DFA116_eofS =
        "\26\uffff";
    static final String DFA116_minS =
        "\1\46\15\0\10\uffff";
    static final String DFA116_maxS =
        "\1\u0099\15\0\10\uffff";
    static final String DFA116_acceptS =
        "\16\uffff\1\3\5\uffff\1\1\1\2";
    static final String DFA116_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\10\uffff}>";
    static final String[] DFA116_transitionS = {
            "\3\16\1\14\1\11\2\uffff\1\5\1\6\20\uffff\1\7\4\uffff\1\12\2"+
            "\uffff\1\15\13\uffff\1\10\6\uffff\1\13\60\uffff\1\16\1\uffff"+
            "\1\2\1\uffff\1\3\2\uffff\1\1\4\uffff\1\4\2\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_static.DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_static.DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_static.DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_static.DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_static.DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_static.DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "232:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA116_2 = input.LA(1);

                         
                        int index116_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA116_3 = input.LA(1);

                         
                        int index116_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA116_4 = input.LA(1);

                         
                        int index116_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA116_5 = input.LA(1);

                         
                        int index116_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA116_6 = input.LA(1);

                         
                        int index116_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA116_7 = input.LA(1);

                         
                        int index116_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA116_8 = input.LA(1);

                         
                        int index116_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA116_9 = input.LA(1);

                         
                        int index116_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA116_10 = input.LA(1);

                         
                        int index116_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA116_11 = input.LA(1);

                         
                        int index116_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA116_12 = input.LA(1);

                         
                        int index116_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA116_13 = input.LA(1);

                         
                        int index116_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\31\uffff";
    static final String DFA118_eofS =
        "\5\uffff\1\1\23\uffff";
    static final String DFA118_minS =
        "\1\46\1\uffff\2\45\1\uffff\2\46\11\45\10\0\1\54";
    static final String DFA118_maxS =
        "\1\u0099\1\uffff\2\45\1\uffff\1\u00b4\1\u0092\11\45\10\0\1\u009c";
    static final String DFA118_acceptS =
        "\1\uffff\1\2\2\uffff\1\1\24\uffff";
    static final String DFA118_specialS =
        "\20\uffff\1\6\1\2\1\7\1\5\1\1\1\4\1\0\1\3\1\uffff}>";
    static final String[] DFA118_transitionS = {
            "\5\1\2\uffff\2\1\11\uffff\1\1\6\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\4\11\uffff\1\1\6\uffff\1\1\47\uffff\1\4\10\uffff"+
            "\1\1\1\uffff\2\1\1\3\2\uffff\1\2\1\1\3\uffff\3\1",
            "",
            "\1\5",
            "\1\6",
            "",
            "\6\1\1\14\24\1\1\15\1\7\1\16\1\1\1\12\1\13\103\1\1\11\21\1"+
            "\1\10\30\1",
            "\1\1\42\uffff\1\4\70\uffff\1\4\12\uffff\1\1\4\uffff\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\4\24\uffff\3\4\1\uffff\2\4\103\uffff\1\4\2\uffff\1\1\2"+
            "\uffff\1\1\13\uffff\1\4"
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "()+ loopback of 235:4: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_22 = input.LA(1);

                         
                        int index118_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA118_20 = input.LA(1);

                         
                        int index118_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_20);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA118_17 = input.LA(1);

                         
                        int index118_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA118_23 = input.LA(1);

                         
                        int index118_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_23);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA118_21 = input.LA(1);

                         
                        int index118_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA118_19 = input.LA(1);

                         
                        int index118_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA118_16 = input.LA(1);

                         
                        int index118_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA118_18 = input.LA(1);

                         
                        int index118_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA121_static {
    static final String DFA121_eotS =
        "\u0092\uffff";
    static final String DFA121_eofS =
        "\1\1\u0091\uffff";
    static final String DFA121_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA121_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA121_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA121_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_static.DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_static.DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_static.DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_static.DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_static.DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_static.DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 238:29: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA121_10 = input.LA(1);

                         
                        int index121_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA122_static {
    static final String DFA122_eotS =
        "\33\uffff";
    static final String DFA122_eofS =
        "\1\2\2\uffff\1\2\4\uffff\2\2\1\uffff\1\2\6\uffff\4\2\3\uffff\2"+
        "\2";
    static final String DFA122_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\2\46\1\0\1\46\2\45\1\uffff\3\45\4"+
        "\46\1\0\2\45\2\46";
    static final String DFA122_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\2\u00b4\1\0\1\u00b4\2\45\1\uffff"+
        "\3\45\4\u00b4\1\0\2\45\2\u00b4";
    static final String DFA122_acceptS =
        "\2\uffff\1\2\13\uffff\1\1\14\uffff";
    static final String DFA122_specialS =
        "\12\uffff\1\1\13\uffff\1\0\4\uffff}>";
    static final String[] DFA122_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\5\21\2\1\6\123\2\1\7\3\2\1\4\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\21\127\2\1\17\35\2",
            "\1\22",
            "\1\23",
            "",
            "\1\24",
            "\1\25",
            "\1\26",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\1\uffff",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2"
    };
    }

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_static.DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_static.DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_static.DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_static.DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_static.DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_static.DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "238:39: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA122_22 = input.LA(1);

                         
                        int index122_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA122_10 = input.LA(1);

                         
                        int index122_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\u0092\uffff";
    static final String DFA123_eofS =
        "\1\5\u0091\uffff";
    static final String DFA123_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA123_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA123_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA123_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA123_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "238:49: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA127_static {
    static final String DFA127_eotS =
        "\u0092\uffff";
    static final String DFA127_eofS =
        "\1\1\u0091\uffff";
    static final String DFA127_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA127_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA127_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA127_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_static.DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_static.DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_static.DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_static.DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_static.DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_static.DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "()* loopback of 241:148: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA127_6 = input.LA(1);

                         
                        int index127_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA127_8 = input.LA(1);

                         
                        int index127_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA127_9 = input.LA(1);

                         
                        int index127_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA127_10 = input.LA(1);

                         
                        int index127_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\33\uffff";
    static final String DFA128_eofS =
        "\1\2\2\uffff\1\2\4\uffff\2\2\1\uffff\1\2\6\uffff\4\2\3\uffff\2"+
        "\2";
    static final String DFA128_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\2\46\1\0\1\46\2\45\1\uffff\3\45\4"+
        "\46\1\0\2\45\2\46";
    static final String DFA128_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\2\u00b4\1\0\1\u00b4\2\45\1\uffff"+
        "\3\45\4\u00b4\1\0\2\45\2\u00b4";
    static final String DFA128_acceptS =
        "\2\uffff\1\2\13\uffff\1\1\14\uffff";
    static final String DFA128_specialS =
        "\12\uffff\1\0\13\uffff\1\1\4\uffff}>";
    static final String[] DFA128_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\5\21\2\1\6\123\2\1\7\3\2\1\4\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\21\127\2\1\17\35\2",
            "\1\22",
            "\1\23",
            "",
            "\1\24",
            "\1\25",
            "\1\26",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\1\uffff",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2"
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "241:158: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_10 = input.LA(1);

                         
                        int index128_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index128_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA128_22 = input.LA(1);

                         
                        int index128_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index128_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA129_static {
    static final String DFA129_eotS =
        "\u0092\uffff";
    static final String DFA129_eofS =
        "\1\5\u0091\uffff";
    static final String DFA129_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA129_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA129_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA129_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA129_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_static.DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_static.DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_static.DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_static.DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_static.DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_static.DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "241:168: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA129_2 = input.LA(1);

                         
                        int index129_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA129_3 = input.LA(1);

                         
                        int index129_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA129_4 = input.LA(1);

                         
                        int index129_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA131_static {
    static final String DFA131_eotS =
        "\u0092\uffff";
    static final String DFA131_eofS =
        "\1\1\u0091\uffff";
    static final String DFA131_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA131_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA131_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA131_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_static.DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_static.DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_static.DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_static.DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_static.DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_static.DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "()* loopback of 244:42: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA131_6 = input.LA(1);

                         
                        int index131_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA131_8 = input.LA(1);

                         
                        int index131_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA131_9 = input.LA(1);

                         
                        int index131_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA131_10 = input.LA(1);

                         
                        int index131_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\33\uffff";
    static final String DFA132_eofS =
        "\1\2\2\uffff\1\2\4\uffff\2\2\1\uffff\1\2\6\uffff\4\2\3\uffff\2"+
        "\2";
    static final String DFA132_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\2\46\1\0\1\46\2\45\1\uffff\3\45\4"+
        "\46\1\0\2\45\2\46";
    static final String DFA132_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\2\u00b4\1\0\1\u00b4\2\45\1\uffff"+
        "\3\45\4\u00b4\1\0\2\45\2\u00b4";
    static final String DFA132_acceptS =
        "\2\uffff\1\2\13\uffff\1\1\14\uffff";
    static final String DFA132_specialS =
        "\12\uffff\1\1\13\uffff\1\0\4\uffff}>";
    static final String[] DFA132_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\5\21\2\1\6\123\2\1\7\3\2\1\4\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\21\127\2\1\17\35\2",
            "\1\22",
            "\1\23",
            "",
            "\1\24",
            "\1\25",
            "\1\26",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\6\127\2\1\14\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\1\uffff",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\21\127\2\1\27\35\2"
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "244:52: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_22 = input.LA(1);

                         
                        int index132_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA132_10 = input.LA(1);

                         
                        int index132_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\u0092\uffff";
    static final String DFA133_eofS =
        "\1\5\u0091\uffff";
    static final String DFA133_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA133_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA133_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA133_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA133_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "244:62: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA133_2 = input.LA(1);

                         
                        int index133_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred339_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA133_3 = input.LA(1);

                         
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred339_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA133_4 = input.LA(1);

                         
                        int index133_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred339_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA134_static {
    static final String DFA134_eotS =
        "\u0092\uffff";
    static final String DFA134_eofS =
        "\1\10\u0091\uffff";
    static final String DFA134_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA134_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA134_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA134_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\7\42\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_static.DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_static.DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_static.DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_static.DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_static.DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_static.DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "247:120: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred342_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred342_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA134_2 = input.LA(1);

                         
                        int index134_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred342_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred342_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA134_3 = input.LA(1);

                         
                        int index134_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA134_4 = input.LA(1);

                         
                        int index134_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA134_5 = input.LA(1);

                         
                        int index134_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred342_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA134_6 = input.LA(1);

                         
                        int index134_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred342_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA134_7 = input.LA(1);

                         
                        int index134_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred342_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA136_static {
    static final String DFA136_eotS =
        "\u0092\uffff";
    static final String DFA136_eofS =
        "\1\10\u0091\uffff";
    static final String DFA136_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA136_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA136_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA136_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\7\42\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_static.DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_static.DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_static.DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_static.DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_static.DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_static.DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_static.DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_static.DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "250:66: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA136_1 = input.LA(1);

                         
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred344_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred344_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA136_2 = input.LA(1);

                         
                        int index136_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred344_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred344_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA136_3 = input.LA(1);

                         
                        int index136_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA136_4 = input.LA(1);

                         
                        int index136_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA136_5 = input.LA(1);

                         
                        int index136_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred344_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA136_6 = input.LA(1);

                         
                        int index136_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred344_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA136_7 = input.LA(1);

                         
                        int index136_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred344_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA141_static {
    static final String DFA141_eotS =
        "\7\uffff";
    static final String DFA141_eofS =
        "\7\uffff";
    static final String DFA141_minS =
        "\1\51\2\45\2\uffff\2\51";
    static final String DFA141_maxS =
        "\1\u0097\2\45\2\uffff\2\u0097";
    static final String DFA141_acceptS =
        "\3\uffff\1\1\1\2\2\uffff";
    static final String DFA141_specialS =
        "\7\uffff}>";
    static final String[] DFA141_transitionS = {
            "\2\3\2\uffff\1\2\1\3\20\uffff\1\3\4\uffff\1\3\2\uffff\1\4\13"+
            "\uffff\1\3\6\uffff\1\3\74\uffff\1\1",
            "\1\5",
            "\1\6",
            "",
            "",
            "\2\3\2\uffff\1\2\1\3\20\uffff\1\3\4\uffff\1\3\2\uffff\1\4"+
            "\13\uffff\1\3\6\uffff\1\3\74\uffff\1\1",
            "\2\3\2\uffff\1\2\1\3\20\uffff\1\3\4\uffff\1\3\2\uffff\1\4"+
            "\13\uffff\1\3\6\uffff\1\3\74\uffff\1\1"
    };
    }

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_static.DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_static.DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_static.DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_static.DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_static.DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_static.DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "252:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem )* nnchementity );";
        }
    }
    static class DFA139_static {
    static final String DFA139_eotS =
        "\34\uffff";
    static final String DFA139_eofS =
        "\7\uffff\1\12\5\uffff\1\12\6\uffff\2\12\2\uffff\1\12\3\uffff";
    static final String DFA139_minS =
        "\1\51\1\uffff\1\45\4\uffff\1\46\2\45\1\uffff\2\45\1\46\3\0\2\45"+
        "\1\uffff\2\46\2\45\1\46\1\0\1\45\1\0";
    static final String DFA139_maxS =
        "\1\132\1\uffff\1\45\4\uffff\1\u00b4\2\45\1\uffff\2\45\1\u00b4\3"+
        "\0\2\45\1\uffff\2\u00b4\2\45\1\u00b4\1\0\1\45\1\0";
    static final String DFA139_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\3\uffff\1\3\10\uffff\1\2\10"+
        "\uffff";
    static final String DFA139_specialS =
        "\16\uffff\1\2\1\4\1\3\10\uffff\1\1\1\uffff\1\0}>";
    static final String[] DFA139_transitionS = {
            "\1\6\1\3\24\uffff\1\1\4\uffff\1\4\16\uffff\1\2\6\uffff\1\5",
            "",
            "\1\7",
            "",
            "",
            "",
            "",
            "\1\14\146\12\1\13\1\12\1\10\2\12\1\11\42\12",
            "\1\15",
            "\1\16",
            "",
            "\1\17",
            "\1\20",
            "\147\12\1\22\4\12\1\21\42\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\24",
            "\1\25",
            "",
            "\147\12\1\26\47\12",
            "\152\12\1\27\44\12",
            "\1\30",
            "\1\31",
            "\152\12\1\32\44\12",
            "\1\uffff",
            "\1\33",
            "\1\uffff"
    };
    }

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_static.DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_static.DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_static.DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_static.DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_static.DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_static.DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "253:24: ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA139_27 = input.LA(1);

                         
                        int index139_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index139_27);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA139_25 = input.LA(1);

                         
                        int index139_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index139_25);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA139_14 = input.LA(1);

                         
                        int index139_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index139_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA139_16 = input.LA(1);

                         
                        int index139_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index139_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA139_15 = input.LA(1);

                         
                        int index139_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index139_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA145_static {
    static final String DFA145_eotS =
        "\u0092\uffff";
    static final String DFA145_eofS =
        "\1\1\u0091\uffff";
    static final String DFA145_minS =
        "\1\46\16\uffff\4\0\177\uffff";
    static final String DFA145_maxS =
        "\1\u00b4\16\uffff\4\0\177\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA145_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\177\uffff}>";
    static final String[] DFA145_transitionS = {
            "\43\1\1\21\70\1\1\22\14\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_static.DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_static.DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_static.DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_static.DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_static.DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_static.DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()* loopback of 260:34: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA145_15 = input.LA(1);

                         
                        int index145_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA145_16 = input.LA(1);

                         
                        int index145_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA145_17 = input.LA(1);

                         
                        int index145_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA145_18 = input.LA(1);

                         
                        int index145_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA148_static {
    static final String DFA148_eotS =
        "\14\uffff";
    static final String DFA148_eofS =
        "\6\uffff\1\5\5\uffff";
    static final String DFA148_minS =
        "\1\46\1\uffff\1\45\1\uffff\1\45\1\uffff\2\46\2\45\1\0\1\u008d";
    static final String DFA148_maxS =
        "\1\u0092\1\uffff\1\45\1\uffff\1\45\1\uffff\1\u00b4\1\u0092\2\45"+
        "\1\0\1\u0090";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\3\6\uffff";
    static final String DFA148_specialS =
        "\12\uffff\1\0\1\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\5\144\uffff\1\1\1\uffff\1\3\1\uffff\1\4\2\uffff\1\2",
            "",
            "\1\6",
            "",
            "\1\7",
            "",
            "\147\5\1\10\47\5",
            "\1\5\146\uffff\1\3\4\uffff\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\3\2\uffff\1\5"
    };
    }

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_static.DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_static.DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_static.DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_static.DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_static.DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_static.DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_static.DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_static.DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "270:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA148_10 = input.LA(1);

                         
                        int index148_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index148_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA153_static {
    static final String DFA153_eotS =
        "\u0092\uffff";
    static final String DFA153_eofS =
        "\1\1\u0091\uffff";
    static final String DFA153_minS =
        "\1\46\2\uffff\1\0\u008e\uffff";
    static final String DFA153_maxS =
        "\1\u00b4\2\uffff\1\0\u008e\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA153_specialS =
        "\3\uffff\1\0\u008e\uffff}>";
    static final String[] DFA153_transitionS = {
            "\137\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_static.DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_static.DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_static.DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_static.DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_static.DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_static.DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 285:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA153_3 = input.LA(1);

                         
                        int index153_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA157_static {
    static final String DFA157_eotS =
        "\55\uffff";
    static final String DFA157_eofS =
        "\1\4\4\uffff\3\4\14\uffff\1\4\5\uffff\1\4\1\uffff\2\4\5\uffff\2"+
        "\4\4\uffff\1\4\1\uffff\1\4\1\uffff";
    static final String DFA157_minS =
        "\1\46\3\45\1\uffff\3\46\13\45\1\0\1\46\5\0\1\46\1\0\2\46\1\uffff"+
        "\3\45\1\0\2\46\4\45\1\46\1\0\1\46\1\0";
    static final String DFA157_maxS =
        "\1\u00b4\3\45\1\uffff\3\u00b4\13\45\1\0\1\u00b4\5\0\1\u00b4\1\0"+
        "\2\u00b4\1\uffff\3\45\1\0\2\u00b4\4\45\1\u00b4\1\0\1\u00b4\1\0";
    static final String DFA157_acceptS =
        "\4\uffff\1\2\31\uffff\1\1\16\uffff";
    static final String DFA157_specialS =
        "\23\uffff\1\6\1\uffff\1\3\1\0\1\5\1\11\1\10\1\uffff\1\7\6\uffff"+
        "\1\2\7\uffff\1\1\1\uffff\1\4}>";
    static final String[] DFA157_transitionS = {
            "\43\4\1\2\70\4\1\3\17\4\1\1\42\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "",
            "\33\4\1\10\1\14\1\13\1\4\1\16\1\15\103\4\1\12\21\4\1\11\30"+
            "\4",
            "\154\4\1\20\25\4\1\17\14\4",
            "\22\4\1\21\113\4\1\22\60\4",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\uffff",
            "\144\4\1\12\52\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\154\4\1\37\42\4",
            "\1\uffff",
            "\154\4\1\40\42\4",
            "\154\4\1\41\42\4",
            "",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\uffff",
            "\144\4\1\46\21\4\1\45\30\4",
            "\144\4\1\50\21\4\1\47\30\4",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\144\4\1\46\52\4",
            "\1\uffff",
            "\144\4\1\50\52\4",
            "\1\uffff"
    };
    }

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_static.DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_static.DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_static.DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_static.DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_static.DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_static.DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "289:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA157_22 = input.LA(1);

                         
                        int index157_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA157_42 = input.LA(1);

                         
                        int index157_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_42);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA157_34 = input.LA(1);

                         
                        int index157_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_34);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA157_21 = input.LA(1);

                         
                        int index157_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_21);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA157_44 = input.LA(1);

                         
                        int index157_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA157_23 = input.LA(1);

                         
                        int index157_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_23);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA157_19 = input.LA(1);

                         
                        int index157_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA157_27 = input.LA(1);

                         
                        int index157_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_27);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA157_25 = input.LA(1);

                         
                        int index157_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_25);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA157_24 = input.LA(1);

                         
                        int index157_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA158_static {
    static final String DFA158_eotS =
        "\27\uffff";
    static final String DFA158_eofS =
        "\15\uffff\1\20\3\uffff\1\20\2\uffff\1\20\2\uffff";
    static final String DFA158_minS =
        "\1\111\1\45\2\uffff\1\101\1\uffff\2\45\4\uffff\1\u008a\1\46\2\45"+
        "\1\uffff\1\46\1\0\1\45\1\46\1\45\1\0";
    static final String DFA158_maxS =
        "\1\u0092\1\45\2\uffff\1\u009c\1\uffff\2\45\4\uffff\1\u008a\1\u00b4"+
        "\2\45\1\uffff\1\u00b4\1\0\1\45\1\u00b4\1\45\1\0";
    static final String DFA158_acceptS =
        "\2\uffff\1\5\1\7\1\uffff\1\6\2\uffff\1\1\1\4\1\2\1\3\4\uffff\1"+
        "\10\6\uffff";
    static final String DFA158_specialS =
        "\22\uffff\1\1\3\uffff\1\0}>";
    static final String[] DFA158_transitionS = {
            "\1\2\70\uffff\1\3\17\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\13\1\12\1\10\1\uffff\1\5\1\11\103\uffff\1\7\21\uffff\1"+
            "\6",
            "",
            "\1\14",
            "\1\15",
            "",
            "",
            "",
            "",
            "\1\7",
            "\134\20\1\17\5\20\1\16\54\20",
            "\1\21",
            "\1\22",
            "",
            "\154\20\1\23\42\20",
            "\1\uffff",
            "\1\24",
            "\144\20\1\25\52\20",
            "\1\26",
            "\1\uffff"
    };
    }

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_static.DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_static.DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_static.DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_static.DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_static.DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_static.DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_static.DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_static.DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "290:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA158_22 = input.LA(1);

                         
                        int index158_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred383_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index158_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA158_18 = input.LA(1);

                         
                        int index158_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred383_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index158_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA165_static {
    static final String DFA165_eotS =
        "\24\uffff";
    static final String DFA165_eofS =
        "\24\uffff";
    static final String DFA165_minS =
        "\1\u0085\1\45\1\uffff\1\46\1\uffff\2\45\2\46\1\45\1\uffff\1\46"+
        "\1\45\1\46\2\45\1\46\1\0\1\45\1\46";
    static final String DFA165_maxS =
        "\1\u008f\1\45\1\uffff\1\u00b4\1\uffff\2\45\2\u00b4\1\45\1\uffff"+
        "\1\u00b4\1\45\1\u00b4\2\45\1\u00b4\1\0\1\45\1\u00b4";
    static final String DFA165_acceptS =
        "\2\uffff\1\2\1\uffff\1\3\5\uffff\1\1\11\uffff";
    static final String DFA165_specialS =
        "\21\uffff\1\0\2\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\2\11\uffff\1\1",
            "\1\3",
            "",
            "\6\4\1\uffff\24\4\1\uffff\1\4\1\uffff\77\4\1\uffff\2\4\2\uffff"+
            "\2\4\1\6\1\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\5\21\4\4\uffff"+
            "\2\4\1\uffff\12\4",
            "",
            "\1\7",
            "\1\10",
            "\135\4\1\uffff\1\11\1\4\2\uffff\4\4\1\uffff\1\4\1\uffff\1"+
            "\4\2\uffff\22\4\4\uffff\2\4\1\uffff\12\4",
            "\6\4\1\uffff\24\4\1\uffff\1\4\1\uffff\77\4\1\uffff\2\4\2\uffff"+
            "\4\4\1\uffff\1\4\1\uffff\1\4\1\12\1\uffff\22\4\4\uffff\2\4\1"+
            "\uffff\12\4",
            "\1\13",
            "",
            "\6\4\1\uffff\24\4\1\uffff\1\4\1\uffff\77\4\1\uffff\2\4\2\uffff"+
            "\4\4\1\uffff\1\4\1\uffff\2\4\1\uffff\1\14\21\4\4\uffff\2\4\1"+
            "\uffff\12\4",
            "\1\15",
            "\135\4\1\uffff\1\16\1\4\2\uffff\4\4\1\uffff\1\4\1\uffff\1"+
            "\4\1\17\1\uffff\22\4\4\uffff\2\4\1\uffff\12\4",
            "\1\20",
            "\1\21",
            "\6\4\1\uffff\24\4\1\uffff\1\4\1\uffff\77\4\1\uffff\2\4\2\uffff"+
            "\4\4\1\uffff\1\4\1\uffff\2\4\1\uffff\1\22\21\4\4\uffff\2\4\1"+
            "\uffff\12\4",
            "\1\uffff",
            "\1\23",
            "\135\4\1\uffff\1\16\1\4\2\uffff\4\4\1\uffff\1\4\1\uffff\1"+
            "\4\1\17\1\uffff\22\4\4\uffff\2\4\1\uffff\12\4"
    };
    }

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_static.DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_static.DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_static.DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_static.DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_static.DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_static.DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "304:18: ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA165_17 = input.LA(1);

                         
                        int index165_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index165_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA167_static {
    static final String DFA167_eotS =
        "\u008a\uffff";
    static final String DFA167_eofS =
        "\u008a\uffff";
    static final String DFA167_minS =
        "\1\46\43\uffff\1\0\4\uffff\4\0\2\uffff\24\0\1\uffff\1\0\105\uffff";
    static final String DFA167_maxS =
        "\1\u00b4\43\uffff\1\0\4\uffff\4\0\2\uffff\24\0\1\uffff\1\0\105"+
        "\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\1\53\uffff\1\4\1\5\24\uffff\1\11\1\uffff\1\13\47\uffff"+
        "\1\14\21\uffff\1\20\1\21\1\2\1\3\1\7\1\10\1\15\1\6\1\17\1\16\1\12";
    static final String DFA167_specialS =
        "\44\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\2\uffff\1\5\1\6\1\7\1\10"+
        "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\1\uffff\1\31\105\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\102\1\62\1\64\1\100\1\75\1\105\1\uffff\1\63\1\73\20\155"+
            "\1\71\1\105\1\uffff\1\105\1\uffff\1\76\2\105\1\70\1\105\1\53"+
            "\11\105\1\74\1\65\4\1\1\105\1\77\11\1\1\105\1\1\1\105\4\1\1"+
            "\105\1\1\1\105\1\1\1\105\5\1\1\105\1\1\1\105\3\1\1\105\1\1\1"+
            "\44\1\105\3\1\1\54\1\uffff\1\177\1\67\2\uffff\1\103\1\u0080"+
            "\1\56\1\101\1\uffff\1\72\1\uffff\1\66\2\uffff\1\52\3\105\1\155"+
            "\1\57\1\60\1\61\1\105\1\55\1\51\7\105\4\uffff\1\104\1\155\1"+
            "\uffff\6\1\4\105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_static.DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_static.DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_static.DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_static.DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_static.DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_static.DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_static.DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_static.DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "309:19: ( verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA167_36 = input.LA(1);

                         
                        int index167_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_36);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA167_41 = input.LA(1);

                         
                        int index167_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA167_42 = input.LA(1);

                         
                        int index167_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index167_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA167_43 = input.LA(1);

                         
                        int index167_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA167_44 = input.LA(1);

                         
                        int index167_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA167_47 = input.LA(1);

                         
                        int index167_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index167_47);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA167_48 = input.LA(1);

                         
                        int index167_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index167_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA167_49 = input.LA(1);

                         
                        int index167_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index167_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA167_50 = input.LA(1);

                         
                        int index167_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index167_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA167_51 = input.LA(1);

                         
                        int index167_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index167_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA167_52 = input.LA(1);

                         
                        int index167_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index167_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA167_53 = input.LA(1);

                         
                        int index167_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA167_54 = input.LA(1);

                         
                        int index167_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA167_55 = input.LA(1);

                         
                        int index167_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred406_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index167_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA167_56 = input.LA(1);

                         
                        int index167_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA167_57 = input.LA(1);

                         
                        int index167_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA167_58 = input.LA(1);

                         
                        int index167_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA167_59 = input.LA(1);

                         
                        int index167_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_59);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA167_60 = input.LA(1);

                         
                        int index167_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA167_61 = input.LA(1);

                         
                        int index167_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_61);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA167_62 = input.LA(1);

                         
                        int index167_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_62);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA167_63 = input.LA(1);

                         
                        int index167_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_63);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA167_64 = input.LA(1);

                         
                        int index167_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_64);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA167_65 = input.LA(1);

                         
                        int index167_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_65);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA167_66 = input.LA(1);

                         
                        int index167_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_66);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA167_68 = input.LA(1);

                         
                        int index167_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index167_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA168_static {
    static final String DFA168_eotS =
        "\u008c\uffff";
    static final String DFA168_eofS =
        "\u008c\uffff";
    static final String DFA168_minS =
        "\1\46\1\uffff\2\0\43\uffff\1\0\4\uffff\3\0\2\uffff\22\0\1\uffff"+
        "\1\0\107\uffff";
    static final String DFA168_maxS =
        "\1\u00b4\1\uffff\2\0\43\uffff\1\0\4\uffff\3\0\2\uffff\22\0\1\uffff"+
        "\1\0\107\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\23\2\uffff\1\2\52\uffff\1\5\1\6\22\uffff\1\12\1\uffff"+
        "\1\14\50\uffff\1\15\21\uffff\1\21\1\22\1\1\1\10\1\17\1\7\1\11\1"+
        "\3\1\16\1\4\1\20\1\13";
    static final String DFA168_specialS =
        "\2\uffff\1\0\1\1\43\uffff\1\2\4\uffff\1\3\1\4\1\5\2\uffff\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\27\1\uffff\1\30\107\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\102\1\64\1\66\1\100\1\75\1\105\1\uffff\1\65\1\73\20\156"+
            "\1\71\1\105\1\uffff\1\105\1\uffff\1\76\2\105\1\70\1\105\1\55"+
            "\11\105\1\74\1\67\4\4\1\105\1\77\11\4\1\105\1\4\1\105\4\4\1"+
            "\105\1\4\1\105\1\4\1\105\5\4\1\105\1\4\1\105\3\4\1\105\1\4\1"+
            "\47\1\105\3\4\1\56\1\uffff\1\u0080\1\2\2\uffff\1\103\1\u0081"+
            "\1\60\1\101\1\uffff\1\72\1\uffff\1\3\1\1\1\uffff\1\54\3\105"+
            "\1\156\1\61\1\62\1\63\1\105\1\57\10\105\4\uffff\1\104\1\156"+
            "\1\uffff\6\4\4\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_static.DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_static.DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_static.DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_static.DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_static.DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_static.DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "()+ loopback of 309:139: ( minimixture | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA168_2 = input.LA(1);

                         
                        int index168_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index168_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA168_3 = input.LA(1);

                         
                        int index168_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA168_39 = input.LA(1);

                         
                        int index168_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 4;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_39);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA168_44 = input.LA(1);

                         
                        int index168_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred411_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred422_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index168_44);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA168_45 = input.LA(1);

                         
                        int index168_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred411_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA168_46 = input.LA(1);

                         
                        int index168_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred411_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA168_49 = input.LA(1);

                         
                        int index168_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index168_49);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA168_50 = input.LA(1);

                         
                        int index168_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index168_50);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA168_51 = input.LA(1);

                         
                        int index168_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index168_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA168_52 = input.LA(1);

                         
                        int index168_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index168_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA168_53 = input.LA(1);

                         
                        int index168_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index168_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA168_54 = input.LA(1);

                         
                        int index168_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index168_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA168_55 = input.LA(1);

                         
                        int index168_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA168_56 = input.LA(1);

                         
                        int index168_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA168_57 = input.LA(1);

                         
                        int index168_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA168_58 = input.LA(1);

                         
                        int index168_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA168_59 = input.LA(1);

                         
                        int index168_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA168_60 = input.LA(1);

                         
                        int index168_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA168_61 = input.LA(1);

                         
                        int index168_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_61);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA168_62 = input.LA(1);

                         
                        int index168_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_62);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA168_63 = input.LA(1);

                         
                        int index168_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_63);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA168_64 = input.LA(1);

                         
                        int index168_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_64);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA168_65 = input.LA(1);

                         
                        int index168_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_65);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA168_66 = input.LA(1);

                         
                        int index168_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_66);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA168_68 = input.LA(1);

                         
                        int index168_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index168_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA174_static {
    static final String DFA174_eotS =
        "\u0093\uffff";
    static final String DFA174_eofS =
        "\1\5\u0092\uffff";
    static final String DFA174_minS =
        "\1\46\4\0\u008e\uffff";
    static final String DFA174_maxS =
        "\1\u00b4\4\0\u008e\uffff";
    static final String DFA174_acceptS =
        "\5\uffff\1\3\u008b\uffff\1\1\1\2";
    static final String DFA174_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008e\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\4\146\5\1\2\1\5\1\3\2\5\1\1\42\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_static.DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_static.DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_static.DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_static.DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_static.DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_static.DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "318:31: ( identifierOrBracketedIdentifier | numeric )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA174_1 = input.LA(1);

                         
                        int index174_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA174_2 = input.LA(1);

                         
                        int index174_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA174_3 = input.LA(1);

                         
                        int index174_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA174_4 = input.LA(1);

                         
                        int index174_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred436_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA178_static {
    static final String DFA178_eotS =
        "\u0093\uffff";
    static final String DFA178_eofS =
        "\1\1\u0092\uffff";
    static final String DFA178_minS =
        "\1\46\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\16\uffff\1\0\43\uffff"+
        "\1\0\107\uffff";
    static final String DFA178_maxS =
        "\1\u00b4\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\16\uffff\1\0\43"+
        "\uffff\1\0\107\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\1\1\2";
    static final String DFA178_specialS =
        "\3\uffff\1\0\13\uffff\1\1\10\uffff\1\2\16\uffff\1\3\43\uffff\1"+
        "\4\107\uffff}>";
    static final String[] DFA178_transitionS = {
            "\46\1\1\47\6\1\1\30\60\1\1\113\1\3\11\1\1\17\45\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_static.DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_static.DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_static.DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_static.DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_static.DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_static.DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "()* loopback of 318:129: ( ( comma | colon )? submethod | lrb submethod rrb )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA178_3 = input.LA(1);

                         
                        int index178_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA178_15 = input.LA(1);

                         
                        int index178_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA178_24 = input.LA(1);

                         
                        int index178_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA178_39 = input.LA(1);

                         
                        int index178_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_39);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA178_75 = input.LA(1);

                         
                        int index178_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA203_static {
    static final String DFA203_eotS =
        "\110\uffff";
    static final String DFA203_eofS =
        "\110\uffff";
    static final String DFA203_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA203_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA203_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA203_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA203_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_static.DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_static.DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_static.DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_static.DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_static.DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_static.DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "()* loopback of 125:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA203_16 = input.LA(1);

                         
                        int index203_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index203_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA215_static {
    static final String DFA215_eotS =
        "\25\uffff";
    static final String DFA215_eofS =
        "\25\uffff";
    static final String DFA215_minS =
        "\1\47\15\uffff\1\0\6\uffff";
    static final String DFA215_maxS =
        "\1\u009c\15\uffff\1\0\6\uffff";
    static final String DFA215_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA215_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA215_transitionS = {
            "\2\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\11\uffff\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_static.DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_static.DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_static.DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_static.DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_static.DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_static.DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_static.DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_static.DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "()* loopback of 192:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA215_14 = input.LA(1);

                         
                        int index215_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index215_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA228_static {
    static final String DFA228_eotS =
        "\26\uffff";
    static final String DFA228_eofS =
        "\26\uffff";
    static final String DFA228_minS =
        "\1\46\15\0\10\uffff";
    static final String DFA228_maxS =
        "\1\u0099\15\0\10\uffff";
    static final String DFA228_acceptS =
        "\16\uffff\1\3\5\uffff\1\1\1\2";
    static final String DFA228_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\10\uffff}>";
    static final String[] DFA228_transitionS = {
            "\3\16\1\14\1\11\2\uffff\1\5\1\6\20\uffff\1\7\4\uffff\1\12\2"+
            "\uffff\1\15\13\uffff\1\10\6\uffff\1\13\60\uffff\1\16\1\uffff"+
            "\1\2\1\uffff\1\3\2\uffff\1\1\4\uffff\1\4\2\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA228_eot = DFA.unpackEncodedString(DFA228_static.DFA228_eotS);
    static final short[] DFA228_eof = DFA.unpackEncodedString(DFA228_static.DFA228_eofS);
    static final char[] DFA228_min = DFA.unpackEncodedStringToUnsignedChars(DFA228_static.DFA228_minS);
    static final char[] DFA228_max = DFA.unpackEncodedStringToUnsignedChars(DFA228_static.DFA228_maxS);
    static final short[] DFA228_accept = DFA.unpackEncodedString(DFA228_static.DFA228_acceptS);
    static final short[] DFA228_special = DFA.unpackEncodedString(DFA228_static.DFA228_specialS);
    static final short[][] DFA228_transition;

    static {
        int numStates = DFA228_static.DFA228_transitionS.length;
        DFA228_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA228_transition[i] = DFA.unpackEncodedString(DFA228_static.DFA228_transitionS[i]);
        }
    }

    class DFA228 extends DFA {

        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = DFA228_eot;
            this.eof = DFA228_eof;
            this.min = DFA228_min;
            this.max = DFA228_max;
            this.accept = DFA228_accept;
            this.special = DFA228_special;
            this.transition = DFA228_transition;
        }
        public String getDescription() {
            return "232:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA228_1 = input.LA(1);

                         
                        int index228_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA228_2 = input.LA(1);

                         
                        int index228_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA228_3 = input.LA(1);

                         
                        int index228_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA228_4 = input.LA(1);

                         
                        int index228_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA228_5 = input.LA(1);

                         
                        int index228_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA228_6 = input.LA(1);

                         
                        int index228_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA228_7 = input.LA(1);

                         
                        int index228_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA228_8 = input.LA(1);

                         
                        int index228_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA228_9 = input.LA(1);

                         
                        int index228_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA228_10 = input.LA(1);

                         
                        int index228_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA228_11 = input.LA(1);

                         
                        int index228_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA228_12 = input.LA(1);

                         
                        int index228_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA228_13 = input.LA(1);

                         
                        int index228_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 228, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentence_in_document202_static {
    public static final BitSet FOLLOW_sentence_in_document202 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFDFFL});

    }static class FOLLOW_procedureNounPhrase_in_sentence223_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_sentence223 = new BitSet(new long[]{0xFFFFFFC000000000L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_sentenceStructure_in_sentence225_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentence225 = new BitSet(new long[]{0xFFFFFFC000000000L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentence227_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentence227 = new BitSet(new long[]{0xFFFFFFC000000000L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_sentenceStructure_in_sentence231_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentence231 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentence233_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentence233 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentence237_static {
    public static final BitSet FOLLOW_stop_in_sentence237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure247_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure247 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure249_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure249 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure251_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure251 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure253_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure253 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure258_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure258 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_colon_in_sentenceStructure260_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure260 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_conjunction_in_sentenceStructure265_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure265 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_rbconj_in_sentenceStructure267_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_comma_in_sentenceStructure269_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure269 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase281_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken304_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken306_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken326_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken330_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken348_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken348 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken350_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken374_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken382_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken400_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken420_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken422_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken424_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken426_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken428_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken430_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken432_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken434_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken436_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken438_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken440_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken440 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken442_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken444_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken444 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken446_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken446 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedure_in_procedureNounPhrase456_static {
    public static final BitSet FOLLOW_headingProcedure_in_procedureNounPhrase456 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475_static {
    public static final BitSet FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure477_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedHeadingProcedure_in_headingProcedure481_static {
    public static final BitSet FOLLOW_bracketedHeadingProcedure_in_headingProcedure481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure483_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure483 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494_static {
    public static final BitSet FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_headingProcedureRequiringTerminator496_static {
    public static final BitSet FOLLOW_numeric_in_headingProcedureRequiringTerminator496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_headingProcedureTerminators552_static {
    public static final BitSet FOLLOW_rrb_in_headingProcedureTerminators552 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_headingProcedureTerminators554_static {
    public static final BitSet FOLLOW_stop_in_headingProcedureTerminators554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_headingProcedureTerminators556_static {
    public static final BitSet FOLLOW_colon_in_headingProcedureTerminators556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase565_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase565 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure584_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure586_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1595_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2612_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2612 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dt_in_nounphraseStructure2615_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2615 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2618_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2618 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2622_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2622 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2625_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2625 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2630_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2633_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent645_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent645 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent650_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent650 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_ratioOrBracketedRatio_in_nounphraseContent652_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_nounphraseContent652 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_nounphraseContent654_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent654 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_numeric_in_nounphraseContent656_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent656 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase668_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase668 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase670_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase670 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase672_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_dissolvePhrase674_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase674 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure699_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure699 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_dissolveStructure703_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure705_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure705 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure708_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure708 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure711_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure711 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure713_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure713 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inMolecule_in_dissolveStructure717_static {
    public static final BitSet FOLLOW_inMolecule_in_dissolveStructure717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_dissolveStructure720_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure720 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_molecule_in_dissolveStructure722_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_inin_in_inMolecule734_static {
    public static final BitSet FOLLOW_inin_in_inMolecule734 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384E824L});

    }static class FOLLOW_dtTHE_in_inMolecule736_static {
    public static final BitSet FOLLOW_dtTHE_in_inMolecule736 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_adj_in_inMolecule739_static {
    public static final BitSet FOLLOW_adj_in_inMolecule739 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_inMolecule742_static {
    public static final BitSet FOLLOW_nnp_in_inMolecule742 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_inMolecule746_static {
    public static final BitSet FOLLOW_molecule_in_inMolecule746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_inMolecule748_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_inMolecule748 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase758_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure776_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure776 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_to_in_verbphraseStructure779_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure779 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure782_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure782 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure785_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure785 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_md_in_verbphraseStructure789_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure789 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure792_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure792 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_verbphraseStructure795_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure795 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_verbphraseStructure798_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure798 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_verbphraseStructure801_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure801 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_md_in_verbphraseStructure804_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure804 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adv_in_verbphraseStructure807_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure807 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adj_in_verbphraseStructure810_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure810 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_neg_in_verbphraseStructure813_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure813 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_inoff_in_verbphraseStructure819_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure819 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_cc_in_verbphraseStructure823_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure823 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_verbphraseStructure826_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure826 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure829_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure829 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_vb_in_verb841_static {
    public static final BitSet FOLLOW_vb_in_verb841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb843_static {
    public static final BitSet FOLLOW_vbp_in_verb843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb845_static {
    public static final BitSet FOLLOW_vbg_in_verb845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb847_static {
    public static final BitSet FOLLOW_vbd_in_verb847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb849_static {
    public static final BitSet FOLLOW_vbz_in_verb849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb851_static {
    public static final BitSet FOLLOW_vbn_in_verb851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb853_static {
    public static final BitSet FOLLOW_vbuse_in_verb853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb855_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb857_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb859_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb861_static {
    public static final BitSet FOLLOW_vbsubject_in_verb861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb863_static {
    public static final BitSet FOLLOW_vbadd_in_verb863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb865_static {
    public static final BitSet FOLLOW_vbdilute_in_verb865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb867_static {
    public static final BitSet FOLLOW_vbcharge_in_verb867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb869_static {
    public static final BitSet FOLLOW_vbcontain_in_verb869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb871_static {
    public static final BitSet FOLLOW_vbdrop_in_verb871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb873_static {
    public static final BitSet FOLLOW_vbfill_in_verb873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb875_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb877_static {
    public static final BitSet FOLLOW_vbtreat_in_verb877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb879_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb881_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb883_static {
    public static final BitSet FOLLOW_vbcool_in_verb883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb885_static {
    public static final BitSet FOLLOW_vbdegass_in_verb885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb887_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb889_static {
    public static final BitSet FOLLOW_vbdry_in_verb889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb891_static {
    public static final BitSet FOLLOW_vbextract_in_verb891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb893_static {
    public static final BitSet FOLLOW_vbfilter_in_verb893 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb896_static {
    public static final BitSet FOLLOW_vbheat_in_verb896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb898_static {
    public static final BitSet FOLLOW_vbincrease_in_verb898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb900_static {
    public static final BitSet FOLLOW_vbpartition_in_verb900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb902_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb904_static {
    public static final BitSet FOLLOW_vbpurify_in_verb904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb906_static {
    public static final BitSet FOLLOW_vbquench_in_verb906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb908_static {
    public static final BitSet FOLLOW_vbrecover_in_verb908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb910_static {
    public static final BitSet FOLLOW_vbremove_in_verb910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb912_static {
    public static final BitSet FOLLOW_vbstir_in_verb912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb914_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb916_static {
    public static final BitSet FOLLOW_vbwait_in_verb916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb918_static {
    public static final BitSet FOLLOW_vbwash_in_verb918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb920_static {
    public static final BitSet FOLLOW_vbyield_in_verb920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb922_static {
    public static final BitSet FOLLOW_vbchange_in_verb922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb931_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cc_in_degassMultiVerb933_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb933 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb935_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb935 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun944_static {
    public static final BitSet FOLLOW_nounStructure_in_noun944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun947_static {
    public static final BitSet FOLLOW_dash_in_noun947 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_noun949_static {
    public static final BitSet FOLLOW_nounStructure_in_noun949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure960_static {
    public static final BitSet FOLLOW_prp_in_nounStructure960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure962_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure964_static {
    public static final BitSet FOLLOW_citation_in_nounStructure964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure966_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure968_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure970_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure972_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure974_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure976_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure978_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure980_static {
    public static final BitSet FOLLOW_nn_in_nounStructure980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure982_static {
    public static final BitSet FOLLOW_nns_in_nounStructure982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure984_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure986_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure988_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure990_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure992_static {
    public static final BitSet FOLLOW_range_in_nounStructure992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure994_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure996_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure998_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure1000_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure1000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure1002_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure1002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure1004_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure1004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure1006_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure1006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure1008_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure1008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure1010_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure1012_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure1014_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure1014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure1016_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure1016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure1018_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure1020_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure1022_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure1024_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure1026_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure1026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure1028_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure1028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure1030_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure1032_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure1032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure1034_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure1036_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure1038_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure1040_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure1040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure1042_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure1042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_nounStructure1044_static {
    public static final BitSet FOLLOW_numeric_in_nounStructure1044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure1046_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure1046 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure1048_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure1050_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1050 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure1052_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure1052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure1054_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure1054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure1056_static {
    public static final BitSet FOLLOW_fw_in_nounStructure1056 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure1058_static {
    public static final BitSet FOLLOW_sym_in_nounStructure1058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure1060_static {
    public static final BitSet FOLLOW_clause_in_nounStructure1060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure1062_static {
    public static final BitSet FOLLOW_ls_in_nounStructure1062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure1064_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure1066_static {
    public static final BitSet FOLLOW_pos_in_nounStructure1066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure1068_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure1068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1080_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1080 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1084_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1086_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1088_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1090_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1092_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1094_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1126_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1126 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x000000F0038C8024L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1129_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1129 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x000000F003848024L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1132_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1132 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x000000F003848024L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1135_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1165_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1165 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000001L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1168_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1168 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1172_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1172 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1175_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1175 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1178_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1181_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1191_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1212_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1212 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000100L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1215_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1215 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1218_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1218 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1221_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000040000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1224_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1227_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1236_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1236 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_molecule_in_prepphraseIN1238_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1259_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});

    }static class FOLLOW_dt_in_prepphraseRole1261_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1264_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1287_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1287 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_inMost_in_prepphraseOther1290_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1290 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x001E03FFF7FCE8A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1294_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1320_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1320 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1323_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1345_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1345 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1348_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1348 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1351_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1376_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1376 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1378_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1378 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000080101L,0x000002F003CC0080L});

    }static class FOLLOW_nnexample_in_preparationphrase1381_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_preparationphrase1383_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1386_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1397_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1397 = new BitSet(new long[]{0x8000218000000002L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_conjunction_in_multiApparatus1400_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1400 = new BitSet(new long[]{0x8000218000000000L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_apparatus_in_multiApparatus1403_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1403 = new BitSet(new long[]{0x8000218000000002L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_dt_in_apparatus1414_static {
    public static final BitSet FOLLOW_dt_in_apparatus1414 = new BitSet(new long[]{0x8000218000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_preapparatus_in_apparatus1417_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1417 = new BitSet(new long[]{0x8000218000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnApp_in_apparatus1420_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1420 = new BitSet(new long[]{0x8000218000000002L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnapparatus_in_nnApp1447_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1447 = new BitSet(new long[]{0x8000218000000002L,0x0000001002102280L,0x00000000138C8124L});

    }static class FOLLOW_dash_in_nnApp1451_static {
    public static final BitSet FOLLOW_dash_in_nnApp1451 = new BitSet(new long[]{0x8000218000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnapparatus_in_nnApp1453_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1467_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1467 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_adj_in_preapparatus1469_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1469 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnpressure_in_preapparatus1471_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1471 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnadd_in_preapparatus1473_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1473 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_molecule_in_preapparatus1475_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1475 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnchementity_in_preapparatus1477_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1477 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnstate_in_preapparatus1479_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1479 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nn_in_preapparatus1481_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1481 = new BitSet(new long[]{0x8000218000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_oscaront_in_oscaronts1493_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1493 = new BitSet(new long[]{0x0000040000000002L});

    }static class FOLLOW_adj_in_oscarCompound1513_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1513 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1516_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1516 = new BitSet(new long[]{0x090021C000000002L,0x2000000000000280L,0x000000000384A806L});

    }static class FOLLOW_adj_in_oscarCompound1518_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1518 = new BitSet(new long[]{0x0900004000000002L,0x2000000000000280L,0x000000000004A806L});

    }static class FOLLOW_numericReferenceOrQuantity_in_oscarCompound1522_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_oscarCompound1522 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_nnchementity_in_oscarCompound1526_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1526 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_oscarCompound1531_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1531 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_fromProcedure_in_oscarCompound1534_static {
    public static final BitSet FOLLOW_fromProcedure_in_oscarCompound1534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1543_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000150L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1545_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1550_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1572_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1576_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1578_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1583_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_afterOscarCompoundStructure1599_static {
    public static final BitSet FOLLOW_colon_in_afterOscarCompoundStructure1599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1601_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000010L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1607_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1609_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1618_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1621_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1624_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1634_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1652_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1652 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1655_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1655 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1659_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1659 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1662_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1662 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31673_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31673 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_moleculeamount31675_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31675 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_inof_in_moleculeamount31679_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000CC000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31682_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_dt_in_moleculeamount31686_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_ratioOrBracketedRatio_in_moleculeamount31690_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_moleculeamount31690 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_mixture_in_moleculeamount31692_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31692 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31695_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_moleculeamount11705_static {
    public static final BitSet FOLLOW_nnchementity_in_moleculeamount11705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_nnstate_in_moleculeamount11709_static {
    public static final BitSet FOLLOW_nnstate_in_moleculeamount11709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_moleculeamount11714_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11714 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_moleculeamount11716_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11716 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_inof_in_moleculeamount11720_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11720 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x00000000038CC024L});

    }static class FOLLOW_quantity_in_moleculeamount11723_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11723 = new BitSet(new long[]{0x8100218000000000L,0x0000000000100280L,0x00000000038CC024L});

    }static class FOLLOW_inof_in_moleculeamount11725_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11725 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x00000000038CC024L});

    }static class FOLLOW_dtTHE_in_moleculeamount11731_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11731 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_dt_in_moleculeamount11735_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11735 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11739_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11739 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11742_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11742 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21751_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21751 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_mixture_in_moleculeamount21753_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21753 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21757_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21757 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21760_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1768_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1770_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1772_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1775_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1777_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_afterCompoundCitationOrQuantity1780_static {
    public static final BitSet FOLLOW_mixture_in_afterCompoundCitationOrQuantity1780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1791_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1808_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1808 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1810_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1810 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_unnamedmoleculeDescription1812_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmoleculeDescription1812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1822_static {
    public static final BitSet FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1822 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1825_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1829_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1833_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1839_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1843_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_quantityOf1852_static {
    public static final BitSet FOLLOW_quantity_in_quantityOf1852 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000200L,0x00000000000CC004L});

    }static class FOLLOW_inof_in_quantityOf1855_static {
    public static final BitSet FOLLOW_inof_in_quantityOf1855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000084000L});

    }static class FOLLOW_dtTHE_in_quantityOf1859_static {
    public static final BitSet FOLLOW_dtTHE_in_quantityOf1859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_quantityOf1863_static {
    public static final BitSet FOLLOW_dt_in_quantityOf1863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11874_static {
    public static final BitSet FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11874 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11876_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11876 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11879_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11879 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11882_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21893_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21893 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21896_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21896 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21900_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21900 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21906_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21906 = new BitSet(new long[]{0x0900804000000000L,0x2000000000000200L,0x000000000004A806L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21909_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21909 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21913_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21913 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21917_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21917 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21922_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21922 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21925_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21925 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21928_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_definiteUnnamedMolecule1938_static {
    public static final BitSet FOLLOW_adj_in_definiteUnnamedMolecule1938 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1941_static {
    public static final BitSet FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1941 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_definiteUnnamedMolecule1943_static {
    public static final BitSet FOLLOW_quantity_in_definiteUnnamedMolecule1943 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_definiteUnnamedMolecule1946_static {
    public static final BitSet FOLLOW_asAstate_in_definiteUnnamedMolecule1946 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_definiteUnnamedMolecule1949_static {
    public static final BitSet FOLLOW_fromProcedure_in_definiteUnnamedMolecule1949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1959_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1959 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A804L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1961_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1961 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1965_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1969_static {
    public static final BitSet FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1971_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1971 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A804L});

    }static class FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1973_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A804L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002 = new BitSet(new long[]{0x8000660000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004 = new BitSet(new long[]{0x8000660000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006_static {
    public static final BitSet FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006 = new BitSet(new long[]{0x8000660000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011_static {
    public static final BitSet FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015_static {
    public static final BitSet FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017_static {
    public static final BitSet FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019_static {
    public static final BitSet FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021_static {
    public static final BitSet FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023_static {
    public static final BitSet FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035_static {
    public static final BitSet FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_numericReferenceOrQuantity2045_static {
    public static final BitSet FOLLOW_quantity_in_numericReferenceOrQuantity2045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_asAstate2060_static {
    public static final BitSet FOLLOW_inas_in_asAstate2060 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_asAstate2062_static {
    public static final BitSet FOLLOW_dt_in_asAstate2062 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_asAstate2066_static {
    public static final BitSet FOLLOW_jj_in_asAstate2066 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_asAstate2068_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate2068 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_asAstate2072_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate2072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_asAstate2074_static {
    public static final BitSet FOLLOW_quantity_in_asAstate2074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090_static {
    public static final BitSet FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberCompoundReference2132_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference2132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161_static {
    public static final BitSet FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference2187_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference2187 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_squareBracketedReference2189_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference2189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference2191_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference2191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2202_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2202 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2204_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2204 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2213_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2213 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12233_static {
    public static final BitSet FOLLOW_lrb_in_quantity12233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12235_static {
    public static final BitSet FOLLOW_measurements_in_quantity12235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12238_static {
    public static final BitSet FOLLOW_comma_in_quantity12238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12241_static {
    public static final BitSet FOLLOW_measurements_in_quantity12241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12246_static {
    public static final BitSet FOLLOW_comma_in_quantity12246 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12248_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_stop_in_quantity12253_static {
    public static final BitSet FOLLOW_stop_in_quantity12253 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12255_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});

    }static class FOLLOW_rrb_in_quantity12260_static {
    public static final BitSet FOLLOW_rrb_in_quantity12260 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2268_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2268 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22289_static {
    public static final BitSet FOLLOW_measurements_in_quantity22289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22292_static {
    public static final BitSet FOLLOW_comma_in_quantity22292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity22295_static {
    public static final BitSet FOLLOW_measurements_in_quantity22295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2308_static {
    public static final BitSet FOLLOW_cd_in_measurements2308 = new BitSet(new long[]{0x8000218000000000L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nn_in_measurements2310_static {
    public static final BitSet FOLLOW_nn_in_measurements2310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_multiple_in_measurements2315_static {
    public static final BitSet FOLLOW_multiple_in_measurements2315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_measurementtypes_in_measurements2317_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2317 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_dt_in_measurements2320_static {
    public static final BitSet FOLLOW_dt_in_measurements2320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2328_static {
    public static final BitSet FOLLOW_cd_in_multiple2328 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2330_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurementtypes_in_multiple2332_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2357_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2359_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2361_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2363_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2365_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2367_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2369_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2371_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2379_static {
    public static final BitSet FOLLOW_cd_in_molar2379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnmolar_in_molar2381_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2401_static {
    public static final BitSet FOLLOW_cd_in_amount2401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnamount_in_amount2403_static {
    public static final BitSet FOLLOW_nnamount_in_amount2403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2423_static {
    public static final BitSet FOLLOW_cd_in_mass2423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});

    }static class FOLLOW_nnmass_in_mass2425_static {
    public static final BitSet FOLLOW_nnmass_in_mass2425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2444_static {
    public static final BitSet FOLLOW_cd_in_volume2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nnvol_in_volume2446_static {
    public static final BitSet FOLLOW_nnvol_in_volume2446 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2466_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000040000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2468_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2471_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2491_static {
    public static final BitSet FOLLOW_cd_in_equivalent2491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nneq_in_equivalent2493_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield1_in_yield2510_static {
    public static final BitSet FOLLOW_yield1_in_yield2510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield2_in_yield2521_static {
    public static final BitSet FOLLOW_yield2_in_yield2521 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_yield12535_static {
    public static final BitSet FOLLOW_nnyield_in_yield12535 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_inof_in_yield12538_static {
    public static final BitSet FOLLOW_inof_in_yield12538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_colon_in_yield12540_static {
    public static final BitSet FOLLOW_colon_in_yield12540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_percent_in_yield12543_static {
    public static final BitSet FOLLOW_percent_in_yield12543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield22549_static {
    public static final BitSet FOLLOW_percent_in_yield22549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield22551_static {
    public static final BitSet FOLLOW_nnyield_in_yield22551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_percent2559_static {
    public static final BitSet FOLLOW_cd_in_percent2559 = new BitSet(new long[]{0x8000218000000000L,0x0000000002102280L,0x0000000013848424L});

    }static class FOLLOW_nn_in_percent2561_static {
    public static final BitSet FOLLOW_nn_in_percent2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_percent2564_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_percent2568_static {
    public static final BitSet FOLLOW_dash_in_percent2568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_percent2570_static {
    public static final BitSet FOLLOW_cd_in_percent2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_percent2572_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_mixture2605_static {
    public static final BitSet FOLLOW_ratio_in_mixture2605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixtureStructure1_in_mixture2610_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture2610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture2612_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture2612 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure3_in_mixture2614_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture2614 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure12639_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure12639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040400L});

    }static class FOLLOW_nnpercent_in_mixtureStructure12642_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure12642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_ratio_in_mixtureStructure12644_static {
    public static final BitSet FOLLOW_ratio_in_mixtureStructure12644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure12647_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure12647 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure22653_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_mixtureStructure22655_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure22655 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure22657_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure22657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure22659_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure22659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_mixtureStructure22661_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22661 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure32667_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure32667 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure32669_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure32669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure32671_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure32671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_mixtureContent2681_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2681 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nn_in_mixtureContent2683_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent2683 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2685_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2685 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2687_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2687 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2689_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2689 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2691_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2691 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2693_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2693 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2695_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2695 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2697_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2697 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2699_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2699 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2701_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2701 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2703_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2703 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2705_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2705 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2707_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2707 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2709_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2709 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2711_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2711 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2713_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2713 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_minimixture_in_mixtureContent2717_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent2717 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2719_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2719 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2721_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2721 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnyield_in_mixtureContent2723_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent2723 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2725_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2725 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2727_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2727 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2729_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2729 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2731_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2731 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2733_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2733 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2735_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2735 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2737_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2737 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2739_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2739 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2741_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2741 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2743_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2743 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2745_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2745 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2747_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2747 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2749_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2749 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2751_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2751 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureStructure2_in_minimixture2762_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture2762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure3_in_minimixture2764_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_minimixture2764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_fromProcedure2786_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2786 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_inof_in_fromProcedure2792_static {
    public static final BitSet FOLLOW_inof_in_fromProcedure2792 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_vbyield_in_fromProcedure2799_static {
    public static final BitSet FOLLOW_vbyield_in_fromProcedure2799 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_vbsynthesize_in_fromProcedure2801_static {
    public static final BitSet FOLLOW_vbsynthesize_in_fromProcedure2801 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_inin_in_fromProcedure2805_static {
    public static final BitSet FOLLOW_inin_in_fromProcedure2805 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_inby_in_fromProcedure2807_static {
    public static final BitSet FOLLOW_inby_in_fromProcedure2807 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_infrom_in_fromProcedure2809_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2809 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_procedureNode_in_fromProcedure2813_static {
    public static final BitSet FOLLOW_procedureNode_in_fromProcedure2813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2820_static {
    public static final BitSet FOLLOW_method_in_procedureNode2820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2841_static {
    public static final BitSet FOLLOW_nngeneral_in_method2841 = new BitSet(new long[]{0x8000218000000000L,0x0000000002103A80L,0x0000000013848024L});

    }static class FOLLOW_nn_in_method2843_static {
    public static final BitSet FOLLOW_nn_in_method2843 = new BitSet(new long[]{0x8000218000000000L,0x0000000002103A80L,0x0000000013848024L});

    }static class FOLLOW_nnmethod_in_method2847_static {
    public static final BitSet FOLLOW_nnmethod_in_method2847 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x000000001384A034L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2850_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2850 = new BitSet(new long[]{0x8000218000000002L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_numeric_in_method2852_static {
    public static final BitSet FOLLOW_numeric_in_method2852 = new BitSet(new long[]{0x8000218000000002L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_nnexample_in_method2858_static {
    public static final BitSet FOLLOW_nnexample_in_method2858 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2861_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2861 = new BitSet(new long[]{0x8000218000000002L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_numeric_in_method2863_static {
    public static final BitSet FOLLOW_numeric_in_method2863 = new BitSet(new long[]{0x8000218000000002L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_comma_in_method2870_static {
    public static final BitSet FOLLOW_comma_in_method2870 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_colon_in_method2873_static {
    public static final BitSet FOLLOW_colon_in_method2873 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_submethod_in_method2877_static {
    public static final BitSet FOLLOW_submethod_in_method2877 = new BitSet(new long[]{0x8000218000000002L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_lrb_in_method2881_static {
    public static final BitSet FOLLOW_lrb_in_method2881 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_submethod_in_method2883_static {
    public static final BitSet FOLLOW_submethod_in_method2883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_method2885_static {
    public static final BitSet FOLLOW_rrb_in_method2885 = new BitSet(new long[]{0x8000218000000002L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_nnmethod_in_submethod2896_static {
    public static final BitSet FOLLOW_nnmethod_in_submethod2896 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_nnexample_in_submethod2898_static {
    public static final BitSet FOLLOW_nnexample_in_submethod2898 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_submethod2902_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_submethod2902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_submethod2904_static {
    public static final BitSet FOLLOW_numeric_in_submethod2904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound2914_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound2914 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2917_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_referenceToExampleCompound2919_static {
    public static final BitSet FOLLOW_numeric_in_referenceToExampleCompound2919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2942_static {
    public static final BitSet FOLLOW_adv_in_advAdj2942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2944_static {
    public static final BitSet FOLLOW_adj_in_advAdj2944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2951_static {
    public static final BitSet FOLLOW_numeric_in_range2951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range2953_static {
    public static final BitSet FOLLOW_dash_in_range2953 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_range2955_static {
    public static final BitSet FOLLOW_numeric_in_range2955 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2962_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2979_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2979 = new BitSet(new long[]{0x8000218000000000L,0x0000000002122280L,0x0000000013848024L});

    }static class FOLLOW_dashNN_in_cycleStructure2981_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure2984_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2992_static {
    public static final BitSet FOLLOW_adj_in_dashNN2992 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2994_static {
    public static final BitSet FOLLOW_nn_in_dashNN2994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2996_static {
    public static final BitSet FOLLOW_cd_in_dashNN2996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN3000_static {
    public static final BitSet FOLLOW_dash_in_dashNN3000 = new BitSet(new long[]{0x8000218000000000L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_adj_in_dashNN3003_static {
    public static final BitSet FOLLOW_adj_in_dashNN3003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN3005_static {
    public static final BitSet FOLLOW_nn_in_dashNN3005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN3007_static {
    public static final BitSet FOLLOW_cd_in_dashNN3007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_lrb_in_ratioOrBracketedRatio3018_static {
    public static final BitSet FOLLOW_lrb_in_ratioOrBracketedRatio3018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3020_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_ratioOrBracketedRatio3022_static {
    public static final BitSet FOLLOW_rrb_in_ratioOrBracketedRatio3022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3026_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatio_in_ratio3033_static {
    public static final BitSet FOLLOW_cdRatio_in_ratio3033 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cdRatio3048_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_cdRatio3051_static {
    public static final BitSet FOLLOW_colon_in_cdRatio3051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_cdRatio3053_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation3063_static {
    public static final BitSet FOLLOW_citationStructure_in_citation3063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation3065_static {
    public static final BitSet FOLLOW_comma_in_citation3065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_citationContent_in_citation3067_static {
    public static final BitSet FOLLOW_citationContent_in_citation3067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation3069_static {
    public static final BitSet FOLLOW_comma_in_citation3069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure3077_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure3077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent3093_static {
    public static final BitSet FOLLOW_lrb_in_citationContent3093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3096_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_fw_in_citationContent3098_static {
    public static final BitSet FOLLOW_fw_in_citationContent3098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_cd_in_citationContent3100_static {
    public static final BitSet FOLLOW_cd_in_citationContent3100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_conjunction_in_citationContent3102_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3106_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_fw_in_citationContent3108_static {
    public static final BitSet FOLLOW_fw_in_citationContent3108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_cd_in_citationContent3110_static {
    public static final BitSet FOLLOW_cd_in_citationContent3110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_conjunction_in_citationContent3112_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_rrb_in_citationContent3116_static {
    public static final BitSet FOLLOW_rrb_in_citationContent3116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric3126_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric3126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3130_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric3138_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric3138 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_bracketedNumeric3140_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric3140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedNumeric3142_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric3142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier3149_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier3149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3152_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3152 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3156_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier3164_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_cd_in_bracketedIdentifier3166_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier3166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier3169_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier3171_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier3171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj3179_static {
    public static final BitSet FOLLOW_jj_in_adj3179 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj3181_static {
    public static final BitSet FOLLOW_jjr_in_adj3181 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj3183_static {
    public static final BitSet FOLLOW_jjs_in_adj3183 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj3185_static {
    public static final BitSet FOLLOW_oscarcj_in_adj3185 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj3187_static {
    public static final BitSet FOLLOW_jjchem_in_adj3187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj3189_static {
    public static final BitSet FOLLOW_oscarrn_in_adj3189 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv3196_static {
    public static final BitSet FOLLOW_rb_in_adv3196 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv3198_static {
    public static final BitSet FOLLOW_rbr_in_adv3198 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv3200_static {
    public static final BitSet FOLLOW_rp_in_adv3200 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv3202_static {
    public static final BitSet FOLLOW_rbs_in_adv3202 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause3209_static {
    public static final BitSet FOLLOW_wdt_in_clause3209 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause3211_static {
    public static final BitSet FOLLOW_wp_poss_in_clause3211 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause3213_static {
    public static final BitSet FOLLOW_wrb_in_clause3213 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause3215_static {
    public static final BitSet FOLLOW_ex_in_clause3215 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause3217_static {
    public static final BitSet FOLLOW_pdt_in_clause3217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause3219_static {
    public static final BitSet FOLLOW_wp_in_clause3219 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction3226_static {
    public static final BitSet FOLLOW_cc_in_conjunction3226 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction3228_static {
    public static final BitSet FOLLOW_comma_in_conjunction3228 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll3235_static {
    public static final BitSet FOLLOW_in_in_inAll3235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll3237_static {
    public static final BitSet FOLLOW_inafter_in_inAll3237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll3239_static {
    public static final BitSet FOLLOW_inas_in_inAll3239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll3241_static {
    public static final BitSet FOLLOW_inbefore_in_inAll3241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll3243_static {
    public static final BitSet FOLLOW_inby_in_inAll3243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll3245_static {
    public static final BitSet FOLLOW_infor_in_inAll3245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll3247_static {
    public static final BitSet FOLLOW_infrom_in_inAll3247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll3249_static {
    public static final BitSet FOLLOW_inin_in_inAll3249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll3251_static {
    public static final BitSet FOLLOW_ininto_in_inAll3251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll3253_static {
    public static final BitSet FOLLOW_inof_in_inAll3253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll3255_static {
    public static final BitSet FOLLOW_inoff_in_inAll3255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll3257_static {
    public static final BitSet FOLLOW_inon_in_inAll3257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll3259_static {
    public static final BitSet FOLLOW_inover_in_inAll3259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll3261_static {
    public static final BitSet FOLLOW_inunder_in_inAll3261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll3263_static {
    public static final BitSet FOLLOW_invia_in_inAll3263 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3265_static {
    public static final BitSet FOLLOW_inwith_in_inAll3265 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3267_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3269_static {
    public static final BitSet FOLLOW_to_in_inAll3269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3276_static {
    public static final BitSet FOLLOW_in_in_inMost3276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3278_static {
    public static final BitSet FOLLOW_inas_in_inMost3278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3280_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3280 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3282_static {
    public static final BitSet FOLLOW_inby_in_inMost3282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3284_static {
    public static final BitSet FOLLOW_infor_in_inMost3284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3286_static {
    public static final BitSet FOLLOW_infrom_in_inMost3286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3288_static {
    public static final BitSet FOLLOW_inin_in_inMost3288 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3290_static {
    public static final BitSet FOLLOW_ininto_in_inMost3290 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3292_static {
    public static final BitSet FOLLOW_inof_in_inMost3292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3294_static {
    public static final BitSet FOLLOW_inoff_in_inMost3294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3296_static {
    public static final BitSet FOLLOW_inon_in_inMost3296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3298_static {
    public static final BitSet FOLLOW_inover_in_inMost3298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3300_static {
    public static final BitSet FOLLOW_inunder_in_inMost3300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3302_static {
    public static final BitSet FOLLOW_invia_in_inMost3302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3304_static {
    public static final BitSet FOLLOW_inwith_in_inMost3304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3306_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3308_static {
    public static final BitSet FOLLOW_to_in_inMost3308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3315_static {
    public static final BitSet FOLLOW_cd_in_numeric3315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3317_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdAlphanum3325_static {
    public static final BitSet FOLLOW_38_in_cdAlphanum3325 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3327_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarcj3340_static {
    public static final BitSet FOLLOW_39_in_oscarcj3340 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3342_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarrn3355_static {
    public static final BitSet FOLLOW_40_in_oscarrn3355 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3357_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarase3370_static {
    public static final BitSet FOLLOW_41_in_oscarase3370 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3372_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscaront3385_static {
    public static final BitSet FOLLOW_42_in_oscaront3385 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscaront3387_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode3400_static {
    public static final BitSet FOLLOW_43_in_tmunicode3400 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3402_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode3415_static {
    public static final BitSet FOLLOW_44_in_cdunicode3415 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3417_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3430_static {
    public static final BitSet FOLLOW_45_in_jjchem3430 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3432_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3445_static {
    public static final BitSet FOLLOW_46_in_jjcomp3445 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3447_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3461_static {
    public static final BitSet FOLLOW_47_in_inas3461 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3463_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3463 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3476_static {
    public static final BitSet FOLLOW_48_in_inbefore3476 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3478_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3491_static {
    public static final BitSet FOLLOW_49_in_inafter3491 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3493_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3506_static {
    public static final BitSet FOLLOW_50_in_inin3506 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3508_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3521_static {
    public static final BitSet FOLLOW_51_in_ininto3521 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3523_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3536_static {
    public static final BitSet FOLLOW_52_in_inwith3536 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3538_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3538 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3551_static {
    public static final BitSet FOLLOW_53_in_inwithout3551 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3553_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3553 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3566_static {
    public static final BitSet FOLLOW_54_in_inby3566 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3568_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3568 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3581_static {
    public static final BitSet FOLLOW_55_in_invia3581 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3583_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3596_static {
    public static final BitSet FOLLOW_56_in_inof3596 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3598_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3598 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3611_static {
    public static final BitSet FOLLOW_57_in_inon3611 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3613_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3626_static {
    public static final BitSet FOLLOW_58_in_infor3626 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3628_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3641_static {
    public static final BitSet FOLLOW_59_in_infrom3641 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3643_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3656_static {
    public static final BitSet FOLLOW_60_in_inunder3656 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3658_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3671_static {
    public static final BitSet FOLLOW_61_in_inover3671 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3673_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3686_static {
    public static final BitSet FOLLOW_62_in_inoff3686 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3688_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3688 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3703_static {
    public static final BitSet FOLLOW_63_in_nnstate3703 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3705_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3718_static {
    public static final BitSet FOLLOW_64_in_nntime3718 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3720_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3720 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3733_static {
    public static final BitSet FOLLOW_65_in_nnmass3733 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3735_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3748_static {
    public static final BitSet FOLLOW_66_in_nnamount3748 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3750_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3763_static {
    public static final BitSet FOLLOW_67_in_nnmolar3763 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3765_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3778_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3778 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3780_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3793_static {
    public static final BitSet FOLLOW_69_in_nneq3793 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3795_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3795 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3808_static {
    public static final BitSet FOLLOW_70_in_nnvol3808 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3810_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3823_static {
    public static final BitSet FOLLOW_71_in_nnchementity3823 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3825_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3838_static {
    public static final BitSet FOLLOW_72_in_nntemp3838 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3840_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph3853_static {
    public static final BitSet FOLLOW_73_in_nnph3853 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph3855_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash3868_static {
    public static final BitSet FOLLOW_74_in_nnflash3868 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3870_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral3883_static {
    public static final BitSet FOLLOW_75_in_nngeneral3883 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3885_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod3898_static {
    public static final BitSet FOLLOW_76_in_nnmethod3898 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3900_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure3913_static {
    public static final BitSet FOLLOW_77_in_nnpressure3913 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3915_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn3928_static {
    public static final BitSet FOLLOW_78_in_nncolumn3928 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3930_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography3943_static {
    public static final BitSet FOLLOW_79_in_nnchromatography3943 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3945_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum3958_static {
    public static final BitSet FOLLOW_80_in_nnvacuum3958 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3960_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle3973_static {
    public static final BitSet FOLLOW_81_in_nncycle3973 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle3975_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes3988_static {
    public static final BitSet FOLLOW_82_in_nntimes3988 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes3990_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample4003_static {
    public static final BitSet FOLLOW_83_in_nnexample4003 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample4005_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample4005 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm4020_static {
    public static final BitSet FOLLOW_84_in_oscarcm4020 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm4022_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm4022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse4037_static {
    public static final BitSet FOLLOW_85_in_vbuse4037 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse4039_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse4039 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange4052_static {
    public static final BitSet FOLLOW_86_in_vbchange4052 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange4054_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange4054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge4067_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge4067 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge4069_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge4069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject4082_static {
    public static final BitSet FOLLOW_88_in_vbsubject4082 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject4084_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject4084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd4099_static {
    public static final BitSet FOLLOW_89_in_nnadd4099 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd4101_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd4101 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture4114_static {
    public static final BitSet FOLLOW_90_in_nnmixture4114 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture4116_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture4116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute4129_static {
    public static final BitSet FOLLOW_91_in_vbdilute4129 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute4131_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute4131 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd4144_static {
    public static final BitSet FOLLOW_92_in_vbadd4144 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd4146_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd4146 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge4159_static {
    public static final BitSet FOLLOW_93_in_vbcharge4159 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge4161_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge4161 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain4174_static {
    public static final BitSet FOLLOW_94_in_vbcontain4174 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain4176_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain4176 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop4189_static {
    public static final BitSet FOLLOW_95_in_vbdrop4189 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop4191_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop4191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill4204_static {
    public static final BitSet FOLLOW_96_in_vbfill4204 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill4206_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill4206 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend4219_static {
    public static final BitSet FOLLOW_97_in_vbsuspend4219 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend4221_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend4221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat4234_static {
    public static final BitSet FOLLOW_98_in_vbtreat4234 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat4236_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat4236 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus4251_static {
    public static final BitSet FOLLOW_99_in_vbapparatus4251 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4253_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus4266_static {
    public static final BitSet FOLLOW_100_in_nnapparatus4266 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4268_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4268 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate4283_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate4283 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4285_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate4298_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate4298 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4300_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool4315_static {
    public static final BitSet FOLLOW_103_in_vbcool4315 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4317_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass4332_static {
    public static final BitSet FOLLOW_104_in_vbdegass4332 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4334_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve4349_static {
    public static final BitSet FOLLOW_105_in_vbdissolve4349 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4351_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry4366_static {
    public static final BitSet FOLLOW_106_in_vbdry4366 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4368_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry4381_static {
    public static final BitSet FOLLOW_107_in_nndry4381 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry4383_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract4398_static {
    public static final BitSet FOLLOW_108_in_vbextract4398 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4400_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract4413_static {
    public static final BitSet FOLLOW_109_in_nnextract4413 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4415_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4430_static {
    public static final BitSet FOLLOW_110_in_vbfilter4430 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4432_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4445_static {
    public static final BitSet FOLLOW_111_in_nnfilter4445 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4447_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4462_static {
    public static final BitSet FOLLOW_112_in_vbheat4462 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4464_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4477_static {
    public static final BitSet FOLLOW_113_in_vbincrease4477 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4479_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4494_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4494 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4496_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4511_static {
    public static final BitSet FOLLOW_115_in_vbpartition4511 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4513_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4513 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4528_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4528 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4530_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4543_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4543 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4545_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4560_static {
    public static final BitSet FOLLOW_118_in_vbpurify4560 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4562_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4562 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4575_static {
    public static final BitSet FOLLOW_119_in_nnpurify4575 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4577_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4577 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4592_static {
    public static final BitSet FOLLOW_120_in_vbquench4592 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4594_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4609_static {
    public static final BitSet FOLLOW_121_in_vbrecover4609 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4611_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4626_static {
    public static final BitSet FOLLOW_122_in_vbremove4626 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4628_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4641_static {
    public static final BitSet FOLLOW_123_in_nnremove4641 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4643_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4658_static {
    public static final BitSet FOLLOW_124_in_vbstir4658 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4660_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4675_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4675 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4677_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4677 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4690_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4690 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4692_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4707_static {
    public static final BitSet FOLLOW_127_in_vbwait4707 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4709_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4724_static {
    public static final BitSet FOLLOW_128_in_vbwash4724 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4726_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4741_static {
    public static final BitSet FOLLOW_129_in_vbyield4741 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4743_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4758_static {
    public static final BitSet FOLLOW_130_in_nnyield4758 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4760_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4776_static {
    public static final BitSet FOLLOW_131_in_rbconj4776 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4778_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4791_static {
    public static final BitSet FOLLOW_132_in_colon4791 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4793_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4806_static {
    public static final BitSet FOLLOW_133_in_comma4806 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4808_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4821_static {
    public static final BitSet FOLLOW_134_in_apost4821 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4823_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4836_static {
    public static final BitSet FOLLOW_135_in_neg4836 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4838_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash4851_static {
    public static final BitSet FOLLOW_136_in_dash4851 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash4853_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop4866_static {
    public static final BitSet FOLLOW_137_in_stop4866 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop4868_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_nnpercent4881_static {
    public static final BitSet FOLLOW_138_in_nnpercent4881 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4883_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb4896_static {
    public static final BitSet FOLLOW_139_in_lsqb4896 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4898_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb4911_static {
    public static final BitSet FOLLOW_140_in_rsqb4911 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4913_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_nnidentifier4927_static {
    public static final BitSet FOLLOW_141_in_nnidentifier4927 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier4929_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier4929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_dtTHE4944_static {
    public static final BitSet FOLLOW_142_in_dtTHE4944 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4946_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_lrb4960_static {
    public static final BitSet FOLLOW_143_in_lrb4960 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb4962_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_rrb4975_static {
    public static final BitSet FOLLOW_144_in_rrb4975 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb4977_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cc4994_static {
    public static final BitSet FOLLOW_145_in_cc4994 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc4996_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_cd5011_static {
    public static final BitSet FOLLOW_146_in_cd5011 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd5013_static {
    public static final BitSet FOLLOW_TOKEN_in_cd5013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_dt5028_static {
    public static final BitSet FOLLOW_147_in_dt5028 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt5030_static {
    public static final BitSet FOLLOW_TOKEN_in_dt5030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ex5045_static {
    public static final BitSet FOLLOW_148_in_ex5045 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex5047_static {
    public static final BitSet FOLLOW_TOKEN_in_ex5047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_fw5062_static {
    public static final BitSet FOLLOW_149_in_fw5062 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw5064_static {
    public static final BitSet FOLLOW_TOKEN_in_fw5064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_in5079_static {
    public static final BitSet FOLLOW_150_in_in5079 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in5081_static {
    public static final BitSet FOLLOW_TOKEN_in_in5081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jj5096_static {
    public static final BitSet FOLLOW_151_in_jj5096 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj5098_static {
    public static final BitSet FOLLOW_TOKEN_in_jj5098 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjr5113_static {
    public static final BitSet FOLLOW_152_in_jjr5113 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr5115_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr5115 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_jjs5130_static {
    public static final BitSet FOLLOW_153_in_jjs5130 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs5132_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs5132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_ls5147_static {
    public static final BitSet FOLLOW_154_in_ls5147 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls5149_static {
    public static final BitSet FOLLOW_TOKEN_in_ls5149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_md5164_static {
    public static final BitSet FOLLOW_155_in_md5164 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md5166_static {
    public static final BitSet FOLLOW_TOKEN_in_md5166 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nn5181_static {
    public static final BitSet FOLLOW_156_in_nn5181 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn5183_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5183 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nns5198_static {
    public static final BitSet FOLLOW_157_in_nns5198 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns5200_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5200 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnp5215_static {
    public static final BitSet FOLLOW_158_in_nnp5215 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp5217_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_nnps5232_static {
    public static final BitSet FOLLOW_159_in_nnps5232 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps5234_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps5234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pdt5249_static {
    public static final BitSet FOLLOW_160_in_pdt5249 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt5251_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt5251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_pos5266_static {
    public static final BitSet FOLLOW_161_in_pos5266 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos5268_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5268 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp5283_static {
    public static final BitSet FOLLOW_162_in_prp5283 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp5285_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_prp_poss5300_static {
    public static final BitSet FOLLOW_163_in_prp_poss5300 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5302_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rb5317_static {
    public static final BitSet FOLLOW_164_in_rb5317 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb5319_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbr5334_static {
    public static final BitSet FOLLOW_165_in_rbr5334 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr5336_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rbs5351_static {
    public static final BitSet FOLLOW_166_in_rbs5351 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs5353_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_rp5368_static {
    public static final BitSet FOLLOW_167_in_rp5368 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp5370_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_sym5385_static {
    public static final BitSet FOLLOW_168_in_sym5385 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym5387_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_to5402_static {
    public static final BitSet FOLLOW_169_in_to5402 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to5404_static {
    public static final BitSet FOLLOW_TOKEN_in_to5404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_uh5419_static {
    public static final BitSet FOLLOW_170_in_uh5419 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh5421_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vb5436_static {
    public static final BitSet FOLLOW_171_in_vb5436 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5438_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbd5453_static {
    public static final BitSet FOLLOW_172_in_vbd5453 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5455_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5455 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbg5470_static {
    public static final BitSet FOLLOW_173_in_vbg5470 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5472_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5472 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbn5487_static {
    public static final BitSet FOLLOW_174_in_vbn5487 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5489_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbp5504_static {
    public static final BitSet FOLLOW_175_in_vbp5504 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5506_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_vbz5521_static {
    public static final BitSet FOLLOW_176_in_vbz5521 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5523_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wdt5538_static {
    public static final BitSet FOLLOW_177_in_wdt5538 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5540_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5540 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp5555_static {
    public static final BitSet FOLLOW_178_in_wp5555 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5557_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5557 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wp_poss5572_static {
    public static final BitSet FOLLOW_179_in_wp_poss5572 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5574_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_wrb5589_static {
    public static final BitSet FOLLOW_180_in_wrb5589 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5591_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5591 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker223_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker225_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred4_ChemicalChunker231_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred4_ChemicalChunker231 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred5_ChemicalChunker233_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred5_ChemicalChunker233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred7_ChemicalChunker247_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred7_ChemicalChunker247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred8_ChemicalChunker249_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred8_ChemicalChunker249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred9_ChemicalChunker251_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred9_ChemicalChunker251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred10_ChemicalChunker253_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred10_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred11_ChemicalChunker258_static {
    public static final BitSet FOLLOW_advAdj_in_synpred11_ChemicalChunker258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred12_ChemicalChunker260_static {
    public static final BitSet FOLLOW_colon_in_synpred12_ChemicalChunker260 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred13_ChemicalChunker265_static {
    public static final BitSet FOLLOW_conjunction_in_synpred13_ChemicalChunker265 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred14_ChemicalChunker267_static {
    public static final BitSet FOLLOW_rbconj_in_synpred14_ChemicalChunker267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred15_ChemicalChunker269_static {
    public static final BitSet FOLLOW_comma_in_synpred15_ChemicalChunker269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureTerminators_in_synpred87_ChemicalChunker483_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_synpred87_ChemicalChunker483 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred93_ChemicalChunker584_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred93_ChemicalChunker584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred95_ChemicalChunker615_static {
    public static final BitSet FOLLOW_dt_in_synpred95_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred96_ChemicalChunker622_static {
    public static final BitSet FOLLOW_conjunction_in_synpred96_ChemicalChunker622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred97_ChemicalChunker622_static {
    public static final BitSet FOLLOW_conjunction_in_synpred97_ChemicalChunker622 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_synpred97_ChemicalChunker625_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred97_ChemicalChunker625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker630_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker633_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred100_ChemicalChunker645_static {
    public static final BitSet FOLLOW_advAdj_in_synpred100_ChemicalChunker645 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred101_ChemicalChunker650_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred101_ChemicalChunker650 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred102_ChemicalChunker652_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred102_ChemicalChunker652 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred103_ChemicalChunker654_static {
    public static final BitSet FOLLOW_noun_in_synpred103_ChemicalChunker654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred104_ChemicalChunker656_static {
    public static final BitSet FOLLOW_numeric_in_synpred104_ChemicalChunker656 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker668_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker668 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred106_ChemicalChunker699_static {
    public static final BitSet FOLLOW_adj_in_synpred106_ChemicalChunker699 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker711_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker711 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred110_ChemicalChunker720_static {
    public static final BitSet FOLLOW_conjunction_in_synpred110_ChemicalChunker720 = new BitSet(new long[]{0x8000218000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker722_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker722 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred112_ChemicalChunker739_static {
    public static final BitSet FOLLOW_adj_in_synpred112_ChemicalChunker739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred114_ChemicalChunker746_static {
    public static final BitSet FOLLOW_molecule_in_synpred114_ChemicalChunker746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_synpred116_ChemicalChunker779_static {
    public static final BitSet FOLLOW_to_in_synpred116_ChemicalChunker779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred117_ChemicalChunker782_static {
    public static final BitSet FOLLOW_inAll_in_synpred117_ChemicalChunker782 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred123_ChemicalChunker801_static {
    public static final BitSet FOLLOW_verb_in_synpred123_ChemicalChunker801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred124_ChemicalChunker804_static {
    public static final BitSet FOLLOW_md_in_synpred124_ChemicalChunker804 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred125_ChemicalChunker807_static {
    public static final BitSet FOLLOW_adv_in_synpred125_ChemicalChunker807 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred126_ChemicalChunker810_static {
    public static final BitSet FOLLOW_adj_in_synpred126_ChemicalChunker810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred127_ChemicalChunker813_static {
    public static final BitSet FOLLOW_neg_in_synpred127_ChemicalChunker813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred128_ChemicalChunker789_static {
    public static final BitSet FOLLOW_md_in_synpred128_ChemicalChunker789 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_synpred128_ChemicalChunker792_static {
    public static final BitSet FOLLOW_rbconj_in_synpred128_ChemicalChunker792 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_synpred128_ChemicalChunker795_static {
    public static final BitSet FOLLOW_adv_in_synpred128_ChemicalChunker795 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_synpred128_ChemicalChunker798_static {
    public static final BitSet FOLLOW_adj_in_synpred128_ChemicalChunker798 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_synpred128_ChemicalChunker801_static {
    public static final BitSet FOLLOW_verb_in_synpred128_ChemicalChunker801 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00000L,0x0001FAF00BC8008BL});

    }static class FOLLOW_md_in_synpred128_ChemicalChunker804_static {
    public static final BitSet FOLLOW_md_in_synpred128_ChemicalChunker804 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_synpred128_ChemicalChunker807_static {
    public static final BitSet FOLLOW_adv_in_synpred128_ChemicalChunker807 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_synpred128_ChemicalChunker810_static {
    public static final BitSet FOLLOW_adj_in_synpred128_ChemicalChunker810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_synpred128_ChemicalChunker813_static {
    public static final BitSet FOLLOW_neg_in_synpred128_ChemicalChunker813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred129_ChemicalChunker819_static {
    public static final BitSet FOLLOW_inoff_in_synpred129_ChemicalChunker819 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred132_ChemicalChunker823_static {
    public static final BitSet FOLLOW_cc_in_synpred132_ChemicalChunker823 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_synpred132_ChemicalChunker826_static {
    public static final BitSet FOLLOW_comma_in_synpred132_ChemicalChunker826 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_synpred132_ChemicalChunker829_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred132_ChemicalChunker829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker859_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred155_ChemicalChunker885_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred155_ChemicalChunker885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred173_ChemicalChunker947_static {
    public static final BitSet FOLLOW_dash_in_synpred173_ChemicalChunker947 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_synpred173_ChemicalChunker949_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred173_ChemicalChunker949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred176_ChemicalChunker964_static {
    public static final BitSet FOLLOW_citation_in_synpred176_ChemicalChunker964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred177_ChemicalChunker966_static {
    public static final BitSet FOLLOW_cycles_in_synpred177_ChemicalChunker966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred178_ChemicalChunker968_static {
    public static final BitSet FOLLOW_molecule_in_synpred178_ChemicalChunker968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred179_ChemicalChunker970_static {
    public static final BitSet FOLLOW_apparatus_in_synpred179_ChemicalChunker970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred180_ChemicalChunker972_static {
    public static final BitSet FOLLOW_mixture_in_synpred180_ChemicalChunker972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred181_ChemicalChunker974_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred181_ChemicalChunker974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred182_ChemicalChunker976_static {
    public static final BitSet FOLLOW_nnstate_in_synpred182_ChemicalChunker976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred183_ChemicalChunker978_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred183_ChemicalChunker978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred184_ChemicalChunker980_static {
    public static final BitSet FOLLOW_nn_in_synpred184_ChemicalChunker980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred187_ChemicalChunker986_static {
    public static final BitSet FOLLOW_nnadd_in_synpred187_ChemicalChunker986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred189_ChemicalChunker990_static {
    public static final BitSet FOLLOW_nnexample_in_synpred189_ChemicalChunker990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred190_ChemicalChunker992_static {
    public static final BitSet FOLLOW_range_in_synpred190_ChemicalChunker992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_synpred191_ChemicalChunker994_static {
    public static final BitSet FOLLOW_oscaronts_in_synpred191_ChemicalChunker994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred193_ChemicalChunker998_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred193_ChemicalChunker998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred195_ChemicalChunker1002_static {
    public static final BitSet FOLLOW_quantity_in_synpred195_ChemicalChunker1002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred196_ChemicalChunker1004_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred196_ChemicalChunker1004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred198_ChemicalChunker1008_static {
    public static final BitSet FOLLOW_nnph_in_synpred198_ChemicalChunker1008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred200_ChemicalChunker1012_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred200_ChemicalChunker1012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred203_ChemicalChunker1018_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred203_ChemicalChunker1018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_synpred213_ChemicalChunker1038_static {
    public static final BitSet FOLLOW_nnmixture_in_synpred213_ChemicalChunker1038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred214_ChemicalChunker1040_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred214_ChemicalChunker1040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred216_ChemicalChunker1044_static {
    public static final BitSet FOLLOW_numeric_in_synpred216_ChemicalChunker1044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred221_ChemicalChunker1054_static {
    public static final BitSet FOLLOW_nnyield_in_synpred221_ChemicalChunker1054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred229_ChemicalChunker1084_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred229_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred230_ChemicalChunker1086_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred230_ChemicalChunker1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred231_ChemicalChunker1088_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred231_ChemicalChunker1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred232_ChemicalChunker1090_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred232_ChemicalChunker1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred233_ChemicalChunker1092_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred233_ChemicalChunker1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred235_ChemicalChunker1132_static {
    public static final BitSet FOLLOW_advAdj_in_synpred235_ChemicalChunker1132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred236_ChemicalChunker1137_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred236_ChemicalChunker1137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred237_ChemicalChunker1165_static {
    public static final BitSet FOLLOW_advAdj_in_synpred237_ChemicalChunker1165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred242_ChemicalChunker1181_static {
    public static final BitSet FOLLOW_nntime_in_synpred242_ChemicalChunker1181 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred243_ChemicalChunker1212_static {
    public static final BitSet FOLLOW_advAdj_in_synpred243_ChemicalChunker1212 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred248_ChemicalChunker1227_static {
    public static final BitSet FOLLOW_nntemp_in_synpred248_ChemicalChunker1227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred254_ChemicalChunker1400_static {
    public static final BitSet FOLLOW_conjunction_in_synpred254_ChemicalChunker1400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred255_ChemicalChunker1400_static {
    public static final BitSet FOLLOW_conjunction_in_synpred255_ChemicalChunker1400 = new BitSet(new long[]{0x8000218000000000L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_apparatus_in_synpred255_ChemicalChunker1403_static {
    public static final BitSet FOLLOW_apparatus_in_synpred255_ChemicalChunker1403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred258_ChemicalChunker1420_static {
    public static final BitSet FOLLOW_nnApp_in_synpred258_ChemicalChunker1420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1447_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred260_ChemicalChunker1451_static {
    public static final BitSet FOLLOW_dash_in_synpred260_ChemicalChunker1451 = new BitSet(new long[]{0x8000218000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnapparatus_in_synpred260_ChemicalChunker1453_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred260_ChemicalChunker1453 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred261_ChemicalChunker1467_static {
    public static final BitSet FOLLOW_quantity_in_synpred261_ChemicalChunker1467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred262_ChemicalChunker1469_static {
    public static final BitSet FOLLOW_adj_in_synpred262_ChemicalChunker1469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred263_ChemicalChunker1471_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred263_ChemicalChunker1471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred264_ChemicalChunker1473_static {
    public static final BitSet FOLLOW_nnadd_in_synpred264_ChemicalChunker1473 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred265_ChemicalChunker1475_static {
    public static final BitSet FOLLOW_molecule_in_synpred265_ChemicalChunker1475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred266_ChemicalChunker1477_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred266_ChemicalChunker1477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred267_ChemicalChunker1479_static {
    public static final BitSet FOLLOW_nnstate_in_synpred267_ChemicalChunker1479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred268_ChemicalChunker1481_static {
    public static final BitSet FOLLOW_nn_in_synpred268_ChemicalChunker1481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred269_ChemicalChunker1493_static {
    public static final BitSet FOLLOW_oscaront_in_synpred269_ChemicalChunker1493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred271_ChemicalChunker1518_static {
    public static final BitSet FOLLOW_adj_in_synpred271_ChemicalChunker1518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1522_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred273_ChemicalChunker1526_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred273_ChemicalChunker1526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred274_ChemicalChunker1531_static {
    public static final BitSet FOLLOW_quantity_in_synpred274_ChemicalChunker1531 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1534_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred276_ChemicalChunker1545_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred276_ChemicalChunker1545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred278_ChemicalChunker1572_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred278_ChemicalChunker1572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred280_ChemicalChunker1578_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred280_ChemicalChunker1578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred281_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_dash_in_synpred281_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred281_ChemicalChunker1578_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred281_ChemicalChunker1578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred282_ChemicalChunker1583_static {
    public static final BitSet FOLLOW_dash_in_synpred282_ChemicalChunker1583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred283_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_dash_in_synpred283_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred283_ChemicalChunker1578_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred283_ChemicalChunker1578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred283_ChemicalChunker1583_static {
    public static final BitSet FOLLOW_dash_in_synpred283_ChemicalChunker1583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred286_ChemicalChunker1588_static {
    public static final BitSet FOLLOW_colon_in_synpred286_ChemicalChunker1588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred286_ChemicalChunker1590_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred286_ChemicalChunker1590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000048010L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred286_ChemicalChunker1595_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred286_ChemicalChunker1595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred287_ChemicalChunker1601_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred287_ChemicalChunker1601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred288_ChemicalChunker1599_static {
    public static final BitSet FOLLOW_colon_in_synpred288_ChemicalChunker1599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred288_ChemicalChunker1601_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred288_ChemicalChunker1601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred289_ChemicalChunker1607_static {
    public static final BitSet FOLLOW_dash_in_synpred289_ChemicalChunker1607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred290_ChemicalChunker1609_static {
    public static final BitSet FOLLOW_apost_in_synpred290_ChemicalChunker1609 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1652_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1652 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1655_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1655 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred294_ChemicalChunker1662_static {
    public static final BitSet FOLLOW_asAstate_in_synpred294_ChemicalChunker1662 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred295_ChemicalChunker1673_static {
    public static final BitSet FOLLOW_quantity_in_synpred295_ChemicalChunker1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred296_ChemicalChunker1675_static {
    public static final BitSet FOLLOW_mixture_in_synpred296_ChemicalChunker1675 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred299_ChemicalChunker1692_static {
    public static final BitSet FOLLOW_mixture_in_synpred299_ChemicalChunker1692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred302_ChemicalChunker1714_static {
    public static final BitSet FOLLOW_quantity_in_synpred302_ChemicalChunker1714 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred303_ChemicalChunker1716_static {
    public static final BitSet FOLLOW_mixture_in_synpred303_ChemicalChunker1716 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1739_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred309_ChemicalChunker1751_static {
    public static final BitSet FOLLOW_quantity_in_synpred309_ChemicalChunker1751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred310_ChemicalChunker1753_static {
    public static final BitSet FOLLOW_mixture_in_synpred310_ChemicalChunker1753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1757_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred312_ChemicalChunker1768_static {
    public static final BitSet FOLLOW_citation_in_synpred312_ChemicalChunker1768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred313_ChemicalChunker1770_static {
    public static final BitSet FOLLOW_quantity_in_synpred313_ChemicalChunker1770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred315_ChemicalChunker1772_static {
    public static final BitSet FOLLOW_comma_in_synpred315_ChemicalChunker1772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1775_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred315_ChemicalChunker1777_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred315_ChemicalChunker1777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred316_ChemicalChunker1780_static {
    public static final BitSet FOLLOW_mixture_in_synpred316_ChemicalChunker1780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred317_ChemicalChunker1812_static {
    public static final BitSet FOLLOW_asAstate_in_synpred317_ChemicalChunker1812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1825_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1829_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_synpred320_ChemicalChunker1822_static {
    public static final BitSet FOLLOW_quantityOf_in_synpred320_ChemicalChunker1822 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred320_ChemicalChunker1825_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred320_ChemicalChunker1825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1829_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_synpred320_ChemicalChunker1833_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_synpred320_ChemicalChunker1833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1839_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred322_ChemicalChunker1852_static {
    public static final BitSet FOLLOW_quantity_in_synpred322_ChemicalChunker1852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred326_ChemicalChunker1876_static {
    public static final BitSet FOLLOW_quantity_in_synpred326_ChemicalChunker1876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred327_ChemicalChunker1879_static {
    public static final BitSet FOLLOW_asAstate_in_synpred327_ChemicalChunker1879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1882_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred333_ChemicalChunker1922_static {
    public static final BitSet FOLLOW_quantity_in_synpred333_ChemicalChunker1922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred334_ChemicalChunker1925_static {
    public static final BitSet FOLLOW_asAstate_in_synpred334_ChemicalChunker1925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1928_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred337_ChemicalChunker1943_static {
    public static final BitSet FOLLOW_quantity_in_synpred337_ChemicalChunker1943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred338_ChemicalChunker1946_static {
    public static final BitSet FOLLOW_asAstate_in_synpred338_ChemicalChunker1946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred339_ChemicalChunker1949_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred339_ChemicalChunker1949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred342_ChemicalChunker1973_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred342_ChemicalChunker1973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1989_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_synpred349_ChemicalChunker2013_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_synpred349_ChemicalChunker2013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred350_ChemicalChunker2015_static {
    public static final BitSet FOLLOW_nnexample_in_synpred350_ChemicalChunker2015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred357_ChemicalChunker2045_static {
    public static final BitSet FOLLOW_quantity_in_synpred357_ChemicalChunker2045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred361_ChemicalChunker2074_static {
    public static final BitSet FOLLOW_quantity_in_synpred361_ChemicalChunker2074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred365_ChemicalChunker2123_static {
    public static final BitSet FOLLOW_quantity_in_synpred365_ChemicalChunker2123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred367_ChemicalChunker2159_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred367_ChemicalChunker2159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred372_ChemicalChunker2292_static {
    public static final BitSet FOLLOW_comma_in_synpred372_ChemicalChunker2292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_synpred372_ChemicalChunker2295_static {
    public static final BitSet FOLLOW_measurements_in_synpred372_ChemicalChunker2295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred375_ChemicalChunker2320_static {
    public static final BitSet FOLLOW_dt_in_synpred375_ChemicalChunker2320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred376_ChemicalChunker2332_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred376_ChemicalChunker2332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred383_ChemicalChunker2369_static {
    public static final BitSet FOLLOW_yield_in_synpred383_ChemicalChunker2369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred388_ChemicalChunker2568_static {
    public static final BitSet FOLLOW_dash_in_synpred388_ChemicalChunker2568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred388_ChemicalChunker2570_static {
    public static final BitSet FOLLOW_cd_in_synpred388_ChemicalChunker2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_synpred388_ChemicalChunker2572_static {
    public static final BitSet FOLLOW_nnpercent_in_synpred388_ChemicalChunker2572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_synpred390_ChemicalChunker2610_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_synpred390_ChemicalChunker2610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred393_ChemicalChunker2681_static {
    public static final BitSet FOLLOW_verb_in_synpred393_ChemicalChunker2681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred394_ChemicalChunker2683_static {
    public static final BitSet FOLLOW_nn_in_synpred394_ChemicalChunker2683 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred395_ChemicalChunker2685_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred395_ChemicalChunker2685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred398_ChemicalChunker2691_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred398_ChemicalChunker2691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred399_ChemicalChunker2693_static {
    public static final BitSet FOLLOW_molecule_in_synpred399_ChemicalChunker2693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred400_ChemicalChunker2695_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred400_ChemicalChunker2695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred402_ChemicalChunker2699_static {
    public static final BitSet FOLLOW_sym_in_synpred402_ChemicalChunker2699 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred403_ChemicalChunker2701_static {
    public static final BitSet FOLLOW_noun_in_synpred403_ChemicalChunker2701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred405_ChemicalChunker2705_static {
    public static final BitSet FOLLOW_cd_in_synpred405_ChemicalChunker2705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred406_ChemicalChunker2707_static {
    public static final BitSet FOLLOW_comma_in_synpred406_ChemicalChunker2707 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred407_ChemicalChunker2709_static {
    public static final BitSet FOLLOW_adj_in_synpred407_ChemicalChunker2709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred409_ChemicalChunker2717_static {
    public static final BitSet FOLLOW_minimixture_in_synpred409_ChemicalChunker2717 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred410_ChemicalChunker2719_static {
    public static final BitSet FOLLOW_verb_in_synpred410_ChemicalChunker2719 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred411_ChemicalChunker2721_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred411_ChemicalChunker2721 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred412_ChemicalChunker2723_static {
    public static final BitSet FOLLOW_nnyield_in_synpred412_ChemicalChunker2723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred415_ChemicalChunker2729_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred415_ChemicalChunker2729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred416_ChemicalChunker2731_static {
    public static final BitSet FOLLOW_molecule_in_synpred416_ChemicalChunker2731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred417_ChemicalChunker2733_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred417_ChemicalChunker2733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred419_ChemicalChunker2737_static {
    public static final BitSet FOLLOW_sym_in_synpred419_ChemicalChunker2737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred420_ChemicalChunker2739_static {
    public static final BitSet FOLLOW_noun_in_synpred420_ChemicalChunker2739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred422_ChemicalChunker2743_static {
    public static final BitSet FOLLOW_cd_in_synpred422_ChemicalChunker2743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred423_ChemicalChunker2745_static {
    public static final BitSet FOLLOW_comma_in_synpred423_ChemicalChunker2745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred424_ChemicalChunker2747_static {
    public static final BitSet FOLLOW_adj_in_synpred424_ChemicalChunker2747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred435_ChemicalChunker2850_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred435_ChemicalChunker2850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred436_ChemicalChunker2852_static {
    public static final BitSet FOLLOW_numeric_in_synpred436_ChemicalChunker2852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred438_ChemicalChunker2861_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred438_ChemicalChunker2861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred441_ChemicalChunker2870_static {
    public static final BitSet FOLLOW_comma_in_synpred441_ChemicalChunker2870 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_colon_in_synpred441_ChemicalChunker2873_static {
    public static final BitSet FOLLOW_colon_in_synpred441_ChemicalChunker2873 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_submethod_in_synpred441_ChemicalChunker2877_static {
    public static final BitSet FOLLOW_submethod_in_synpred441_ChemicalChunker2877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_synpred442_ChemicalChunker2881_static {
    public static final BitSet FOLLOW_lrb_in_synpred442_ChemicalChunker2881 = new BitSet(new long[]{0x8000218000000000L,0x0000000002183A80L,0x0000000013848034L});

    }static class FOLLOW_submethod_in_synpred442_ChemicalChunker2883_static {
    public static final BitSet FOLLOW_submethod_in_synpred442_ChemicalChunker2883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_synpred442_ChemicalChunker2885_static {
    public static final BitSet FOLLOW_rrb_in_synpred442_ChemicalChunker2885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2902_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2917_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred454_ChemicalChunker3051_static {
    public static final BitSet FOLLOW_colon_in_synpred454_ChemicalChunker3051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred454_ChemicalChunker3053_static {
    public static final BitSet FOLLOW_cd_in_synpred454_ChemicalChunker3053 = new BitSet(new long[]{0x0000000000000002L});

    }
}